<?xml version="1.0" encoding="utf-8" standalone="no"?>
<!--This file represents the results of running a test suite-->
<test-results name="C:\Program Files\NUnit 2.5.2\bin\net-2.0\NUnitTests.nunit" total="2625" errors="0" failures="0" not-run="2" inconclusive="7" ignored="0" skipped="2" invalid="0" date="2009-12-02" time="06:48:50">
  <environment nunit-version="2.5.2.9222" clr-version="2.0.50727.3053" os-version="Microsoft Windows NT 5.1.2600 Service Pack 2" platform="Win32NT" cwd="C:\Program Files\NUnit 2.5.2\bin\net-2.0" machine-name="FERRARI" user="Charlie" user-domain="FERRARI" />
  <culture-info current-culture="en-US" current-uiculture="en-US" />
  <test-suite name="C:\Program Files\NUnit 2.5.2\bin\net-2.0\NUnitTests.nunit" executed="True" success="True" time="181.688" asserts="0">
    <results>
      <test-suite name="C:\Program Files\NUnit 2.5.2\bin\net-2.0\tests/nunit.framework.tests.dll" executed="True" success="True" time="18.422" asserts="0">
        <results>
          <test-suite name="NUnit" executed="True" success="True" time="18.422" asserts="0">
            <results>
              <test-suite name="Framework" executed="True" success="True" time="18.422" asserts="0">
                <results>
                  <test-suite name="Constraints" executed="True" success="True" time="10.875" asserts="0">
                    <results>
                      <test-suite name="Tests" executed="True" success="True" time="10.719" asserts="0">
                        <results>
                          <test-suite name="AfterConstraintTest" executed="True" success="True" time="6.328" asserts="0">
                            <results>
                              <test-suite name="FailsWithBadDelegates" executed="True" success="True" time="1.016" asserts="0">
                                <results>
                                  <test-case name="NUnit.Framework.Constraints.Tests.AfterConstraintTest.FailsWithBadDelegates(NUnit.Framework.Constraints.ActualValueDelegate)" executed="True" success="True" time="0.500" asserts="1" />
                                  <test-case name="NUnit.Framework.Constraints.Tests.AfterConstraintTest.FailsWithBadDelegates(NUnit.Framework.Constraints.ActualValueDelegate)" executed="True" success="True" time="0.500" asserts="1" />
                                </results>
                              </test-suite>
                              <test-suite name="FailsWithBadValues" executed="True" success="True" time="1.516" asserts="0">
                                <results>
                                  <test-case name="NUnit.Framework.Constraints.Tests.AfterConstraintTest.FailsWithBadValues(False)" executed="True" success="True" time="0.500" asserts="1" />
                                  <test-case name="NUnit.Framework.Constraints.Tests.AfterConstraintTest.FailsWithBadValues(0)" executed="True" success="True" time="0.500" asserts="1" />
                                  <test-case name="NUnit.Framework.Constraints.Tests.AfterConstraintTest.FailsWithBadValues(null)" executed="True" success="True" time="0.500" asserts="1" />
                                </results>
                              </test-suite>
                              <test-case name="NUnit.Framework.Constraints.Tests.AfterConstraintTest.ProvidesProperDescription" executed="True" success="True" time="0.000" asserts="1" />
                              <test-suite name="ProvidesProperFailureMessage" executed="True" success="True" time="1.500" asserts="0">
                                <results>
                                  <test-case name="NUnit.Framework.Constraints.Tests.AfterConstraintTest.ProvidesProperFailureMessage(False,&quot;False&quot;)" executed="True" success="True" time="0.500" asserts="1" />
                                  <test-case name="NUnit.Framework.Constraints.Tests.AfterConstraintTest.ProvidesProperFailureMessage(0,&quot;0&quot;)" executed="True" success="True" time="0.500" asserts="1" />
                                  <test-case name="NUnit.Framework.Constraints.Tests.AfterConstraintTest.ProvidesProperFailureMessage(null,&quot;null&quot;)" executed="True" success="True" time="0.500" asserts="1" />
                                </results>
                              </test-suite>
                              <test-case name="NUnit.Framework.Constraints.Tests.AfterConstraintTest.ProvidesProperStringRepresentation" executed="True" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Framework.Constraints.Tests.AfterConstraintTest.SimpleTest" executed="True" success="True" time="0.625" asserts="1" />
                              <test-case name="NUnit.Framework.Constraints.Tests.AfterConstraintTest.SimpleTestUsingReference" executed="True" success="True" time="0.609" asserts="1" />
                              <test-suite name="SucceedsWithGoodDelegates" executed="True" success="True" time="0.500" asserts="0">
                                <results>
                                  <test-case name="NUnit.Framework.Constraints.Tests.AfterConstraintTest.SucceedsWithGoodDelegates(NUnit.Framework.Constraints.ActualValueDelegate)" executed="True" success="True" time="0.500" asserts="1" />
                                </results>
                              </test-suite>
                              <test-suite name="SucceedsWithGoodValues" executed="True" success="True" time="0.500" asserts="0">
                                <results>
                                  <test-case name="NUnit.Framework.Constraints.Tests.AfterConstraintTest.SucceedsWithGoodValues(True)" executed="True" success="True" time="0.500" asserts="1" />
                                </results>
                              </test-suite>
                              <test-case name="NUnit.Framework.Constraints.Tests.AfterConstraintTest.ThatOverload_DoesNotAcceptNegativeDelayValues" executed="True" success="True" time="0.000" asserts="0" />
                              <test-case name="NUnit.Framework.Constraints.Tests.AfterConstraintTest.ThatOverload_ZeroDelayIsAllowed" executed="True" success="True" time="0.000" asserts="1" />
                            </results>
                          </test-suite>
                          <test-suite name="AllItemsTests" executed="True" success="True" time="0.078" asserts="0">
                            <results>
                              <test-case name="NUnit.Framework.Constraints.Tests.AllItemsTests.AllItemsAreInRange" executed="True" success="True" time="0.016" asserts="1" />
                              <test-case name="NUnit.Framework.Constraints.Tests.AllItemsTests.AllItemsAreInRange_UsingComparisonOfT" executed="True" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Framework.Constraints.Tests.AllItemsTests.AllItemsAreInRange_UsingIComparer" executed="True" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Framework.Constraints.Tests.AllItemsTests.AllItemsAreInRange_UsingIComparerOfT" executed="True" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Framework.Constraints.Tests.AllItemsTests.AllItemsAreInRangeFailureMessage" executed="True" success="True" time="0.000" asserts="2" />
                              <test-case name="NUnit.Framework.Constraints.Tests.AllItemsTests.AllItemsAreInstancesOfType" executed="True" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Framework.Constraints.Tests.AllItemsTests.AllItemsAreInstancesOfTypeFailureMessage" executed="True" success="True" time="0.000" asserts="2" />
                              <test-case name="NUnit.Framework.Constraints.Tests.AllItemsTests.AllItemsAreNotNull" executed="True" success="True" time="0.016" asserts="1" />
                              <test-case name="NUnit.Framework.Constraints.Tests.AllItemsTests.AllItemsAreNotNullFails" executed="True" success="True" time="0.016" asserts="2" />
                            </results>
                          </test-suite>
                          <test-suite name="AndTest" executed="True" success="True" time="0.000" asserts="0">
                            <results>
                              <test-case name="NUnit.Framework.Constraints.Tests.AndTest.CanCombineTestsWithAndOperator" executed="True" success="True" time="0.000" asserts="1" />
                              <test-suite name="FailsWithBadValues" executed="True" success="True" time="0.000" asserts="0">
                                <results>
                                  <test-case name="NUnit.Framework.Constraints.Tests.AndTest.FailsWithBadValues(37)" executed="True" success="True" time="0.000" asserts="1" />
                                  <test-case name="NUnit.Framework.Constraints.Tests.AndTest.FailsWithBadValues(53)" executed="True" success="True" time="0.000" asserts="1" />
                                </results>
                              </test-suite>
                              <test-case name="NUnit.Framework.Constraints.Tests.AndTest.ProvidesProperDescription" executed="True" success="True" time="0.000" asserts="1" />
                              <test-suite name="ProvidesProperFailureMessage" executed="True" success="True" time="0.000" asserts="0">
                                <results>
                                  <test-case name="NUnit.Framework.Constraints.Tests.AndTest.ProvidesProperFailureMessage(37,&quot;37&quot;)" executed="True" success="True" time="0.000" asserts="1" />
                                  <test-case name="NUnit.Framework.Constraints.Tests.AndTest.ProvidesProperFailureMessage(53,&quot;53&quot;)" executed="True" success="True" time="0.000" asserts="1" />
                                </results>
                              </test-suite>
                              <test-case name="NUnit.Framework.Constraints.Tests.AndTest.ProvidesProperStringRepresentation" executed="True" success="True" time="0.000" asserts="1" />
                              <test-suite name="SucceedsWithGoodValues" executed="True" success="True" time="0.000" asserts="0">
                                <results>
                                  <test-case name="NUnit.Framework.Constraints.Tests.AndTest.SucceedsWithGoodValues(42)" executed="True" success="True" time="0.000" asserts="1" />
                                </results>
                              </test-suite>
                            </results>
                          </test-suite>
                          <test-suite name="AssignableFromTest" executed="True" success="True" time="0.016" asserts="0">
                            <results>
                              <test-suite name="FailsWithBadValues" executed="True" success="True" time="0.000" asserts="0">
                                <results>
                                  <test-case name="NUnit.Framework.Constraints.Tests.AssignableFromTest.FailsWithBadValues(NUnit.Framework.Constraints.Tests.D2)" executed="True" success="True" time="0.000" asserts="1" />
                                </results>
                              </test-suite>
                              <test-case name="NUnit.Framework.Constraints.Tests.AssignableFromTest.ProvidesProperDescription" executed="True" success="True" time="0.000" asserts="1" />
                              <test-suite name="ProvidesProperFailureMessage" executed="True" success="True" time="0.000" asserts="0">
                                <results>
                                  <test-case name="NUnit.Framework.Constraints.Tests.AssignableFromTest.ProvidesProperFailureMessage(NUnit.Framework.Constraints.Tests.D2,&quot;&lt;NUnit.Framework.Constraints.Tests.D2&gt;&quot;)" executed="True" success="True" time="0.000" asserts="1" />
                                </results>
                              </test-suite>
                              <test-case name="NUnit.Framework.Constraints.Tests.AssignableFromTest.ProvidesProperStringRepresentation" executed="True" success="True" time="0.000" asserts="1" />
                              <test-suite name="SucceedsWithGoodValues" executed="True" success="True" time="0.000" asserts="0">
                                <results>
                                  <test-case name="NUnit.Framework.Constraints.Tests.AssignableFromTest.SucceedsWithGoodValues(NUnit.Framework.Constraints.Tests.D1)" executed="True" success="True" time="0.000" asserts="1" />
                                  <test-case name="NUnit.Framework.Constraints.Tests.AssignableFromTest.SucceedsWithGoodValues(NUnit.Framework.Constraints.Tests.B)" executed="True" success="True" time="0.000" asserts="1" />
                                </results>
                              </test-suite>
                            </results>
                          </test-suite>
                          <test-suite name="AssignableToTest" executed="True" success="True" time="0.000" asserts="0">
                            <results>
                              <test-suite name="FailsWithBadValues" executed="True" success="True" time="0.000" asserts="0">
                                <results>
                                  <test-case name="NUnit.Framework.Constraints.Tests.AssignableToTest.FailsWithBadValues(NUnit.Framework.Constraints.Tests.B)" executed="True" success="True" time="0.000" asserts="1" />
                                </results>
                              </test-suite>
                              <test-case name="NUnit.Framework.Constraints.Tests.AssignableToTest.ProvidesProperDescription" executed="True" success="True" time="0.000" asserts="1" />
                              <test-suite name="ProvidesProperFailureMessage" executed="True" success="True" time="0.000" asserts="0">
                                <results>
                                  <test-case name="NUnit.Framework.Constraints.Tests.AssignableToTest.ProvidesProperFailureMessage(NUnit.Framework.Constraints.Tests.B,&quot;&lt;NUnit.Framework.Constraints.Tests.B&gt;&quot;)" executed="True" success="True" time="0.000" asserts="1" />
                                </results>
                              </test-suite>
                              <test-case name="NUnit.Framework.Constraints.Tests.AssignableToTest.ProvidesProperStringRepresentation" executed="True" success="True" time="0.000" asserts="1" />
                              <test-suite name="SucceedsWithGoodValues" executed="True" success="True" time="0.000" asserts="0">
                                <results>
                                  <test-case name="NUnit.Framework.Constraints.Tests.AssignableToTest.SucceedsWithGoodValues(NUnit.Framework.Constraints.Tests.D1)" executed="True" success="True" time="0.000" asserts="1" />
                                  <test-case name="NUnit.Framework.Constraints.Tests.AssignableToTest.SucceedsWithGoodValues(NUnit.Framework.Constraints.Tests.D2)" executed="True" success="True" time="0.000" asserts="1" />
                                </results>
                              </test-suite>
                            </results>
                          </test-suite>
                          <test-suite name="AttributeExistsConstraintTest" executed="True" success="True" time="0.125" asserts="0">
                            <results>
                              <test-case name="NUnit.Framework.Constraints.Tests.AttributeExistsConstraintTest.AttributeExistsOnMethodInfo" executed="True" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Framework.Constraints.Tests.AttributeExistsConstraintTest.AttributeTestPropertyValueOnMethodInfo" description="my description" executed="True" success="True" time="0.000" asserts="1" />
                              <test-suite name="FailsWithBadValues" executed="True" success="True" time="0.000" asserts="0">
                                <results>
                                  <test-case name="NUnit.Framework.Constraints.Tests.AttributeExistsConstraintTest.FailsWithBadValues(NUnit.Framework.Constraints.Tests.D2)" executed="True" success="True" time="0.000" asserts="1" />
                                </results>
                              </test-suite>
                              <test-case name="NUnit.Framework.Constraints.Tests.AttributeExistsConstraintTest.NonAttributeThrowsException" executed="True" success="True" time="0.125" asserts="0" />
                              <test-case name="NUnit.Framework.Constraints.Tests.AttributeExistsConstraintTest.ProvidesProperDescription" executed="True" success="True" time="0.000" asserts="1" />
                              <test-suite name="ProvidesProperFailureMessage" executed="True" success="True" time="0.000" asserts="0">
                                <results>
                                  <test-case name="NUnit.Framework.Constraints.Tests.AttributeExistsConstraintTest.ProvidesProperFailureMessage(NUnit.Framework.Constraints.Tests.D2,&quot;&lt;NUnit.Framework.Constraints.Tests.D2&gt;&quot;)" executed="True" success="True" time="0.000" asserts="1" />
                                </results>
                              </test-suite>
                              <test-case name="NUnit.Framework.Constraints.Tests.AttributeExistsConstraintTest.ProvidesProperStringRepresentation" executed="True" success="True" time="0.000" asserts="1" />
                              <test-suite name="SucceedsWithGoodValues" executed="True" success="True" time="0.000" asserts="0">
                                <results>
                                  <test-case name="NUnit.Framework.Constraints.Tests.AttributeExistsConstraintTest.SucceedsWithGoodValues(NUnit.Framework.Constraints.Tests.AttributeExistsConstraintTest)" executed="True" success="True" time="0.000" asserts="1" />
                                </results>
                              </test-suite>
                            </results>
                          </test-suite>
                          <test-suite name="BinarySerializableTest" executed="True" success="True" time="0.047" asserts="0">
                            <results>
                              <test-suite name="FailsWithBadValues" executed="True" success="True" time="0.000" asserts="0">
                                <results>
                                  <test-case name="NUnit.Framework.Constraints.Tests.BinarySerializableTest.FailsWithBadValues(NUnit.Framework.Constraints.Tests.InternalClass)" executed="True" success="True" time="0.000" asserts="1" />
                                </results>
                              </test-suite>
                              <test-suite name="InvalidDataThrowsArgumentException" executed="True" success="True" time="0.000" asserts="0">
                                <results>
                                  <test-case name="NUnit.Framework.Constraints.Tests.BinarySerializableTest.InvalidDataThrowsArgumentException(null)" executed="True" success="True" time="0.000" asserts="0" />
                                </results>
                              </test-suite>
                              <test-case name="NUnit.Framework.Constraints.Tests.BinarySerializableTest.ProvidesProperDescription" executed="True" success="True" time="0.000" asserts="1" />
                              <test-suite name="ProvidesProperFailureMessage" executed="True" success="True" time="0.000" asserts="0">
                                <results>
                                  <test-case name="NUnit.Framework.Constraints.Tests.BinarySerializableTest.ProvidesProperFailureMessage(NUnit.Framework.Constraints.Tests.InternalClass,&quot;&lt;InternalClass&gt;&quot;)" executed="True" success="True" time="0.000" asserts="1" />
                                </results>
                              </test-suite>
                              <test-case name="NUnit.Framework.Constraints.Tests.BinarySerializableTest.ProvidesProperStringRepresentation" executed="True" success="True" time="0.000" asserts="1" />
                              <test-suite name="SucceedsWithGoodValues" executed="True" success="True" time="0.047" asserts="0">
                                <results>
                                  <test-case name="NUnit.Framework.Constraints.Tests.BinarySerializableTest.SucceedsWithGoodValues(1)" executed="True" success="True" time="0.016" asserts="1" />
                                  <test-case name="NUnit.Framework.Constraints.Tests.BinarySerializableTest.SucceedsWithGoodValues(&quot;a&quot;)" executed="True" success="True" time="0.000" asserts="1" />
                                  <test-case name="NUnit.Framework.Constraints.Tests.BinarySerializableTest.SucceedsWithGoodValues(System.Collections.ArrayList)" executed="True" success="True" time="0.000" asserts="1" />
                                  <test-case name="NUnit.Framework.Constraints.Tests.BinarySerializableTest.SucceedsWithGoodValues(NUnit.Framework.Constraints.Tests.InternalWithSerializableAttributeClass)" executed="True" success="True" time="0.031" asserts="1" />
                                </results>
                              </test-suite>
                            </results>
                          </test-suite>
                          <test-suite name="CollectionContainsTests" executed="True" success="True" time="0.047" asserts="0">
                            <results>
                              <test-case name="NUnit.Framework.Constraints.Tests.CollectionContainsTests.CanTestContentsOfArray" executed="True" success="True" time="0.016" asserts="1" />
                              <test-case name="NUnit.Framework.Constraints.Tests.CollectionContainsTests.CanTestContentsOfArrayList" executed="True" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Framework.Constraints.Tests.CollectionContainsTests.CanTestContentsOfCollectionNotImplementingIList" executed="True" success="True" time="0.016" asserts="1" />
                              <test-case name="NUnit.Framework.Constraints.Tests.CollectionContainsTests.CanTestContentsOfSortedList" executed="True" success="True" time="0.000" asserts="2" />
                              <test-case name="NUnit.Framework.Constraints.Tests.CollectionContainsTests.IgnoreCaseIsHonored" executed="True" success="True" time="0.000" asserts="1" />
                            </results>
                          </test-suite>
                          <test-suite name="CollectionEquivalentTests" executed="True" success="True" time="0.000" asserts="0">
                            <results>
                              <test-case name="NUnit.Framework.Constraints.Tests.CollectionEquivalentTests.EqualCollectionsAreEquivalent" executed="True" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Framework.Constraints.Tests.CollectionEquivalentTests.EquivalentFailsWithDuplicateElementInActual" executed="True" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Framework.Constraints.Tests.CollectionEquivalentTests.EquivalentFailsWithDuplicateElementInExpected" executed="True" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Framework.Constraints.Tests.CollectionEquivalentTests.EquivalentHandlesNull" executed="True" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Framework.Constraints.Tests.CollectionEquivalentTests.EquivalentHonorsIgnoreCase" executed="True" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Framework.Constraints.Tests.CollectionEquivalentTests.EquivalentIgnoresOrder" executed="True" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Framework.Constraints.Tests.CollectionEquivalentTests.WorksWithCollectionsOfArrays" executed="True" success="True" time="0.000" asserts="2" />
                            </results>
                          </test-suite>
                          <test-suite name="CollectionOrderedTests" executed="True" success="True" time="0.078" asserts="0">
                            <results>
                              <test-case name="NUnit.Framework.Constraints.Tests.CollectionOrderedTests.IsOrdered" executed="True" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Framework.Constraints.Tests.CollectionOrderedTests.IsOrdered_2" executed="True" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Framework.Constraints.Tests.CollectionOrderedTests.IsOrdered_Allows_adjacent_equal_values" executed="True" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Framework.Constraints.Tests.CollectionOrderedTests.IsOrdered_AtLeastOneArgMustImplementIComparable" executed="True" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Framework.Constraints.Tests.CollectionOrderedTests.IsOrdered_Fails" executed="True" success="True" time="0.016" asserts="2" />
                              <test-case name="NUnit.Framework.Constraints.Tests.CollectionOrderedTests.IsOrdered_Handles_custom_comparison" executed="True" success="True" time="0.000" asserts="2" />
                              <test-case name="NUnit.Framework.Constraints.Tests.CollectionOrderedTests.IsOrdered_Handles_custom_comparison2" executed="True" success="True" time="0.000" asserts="2" />
                              <test-case name="NUnit.Framework.Constraints.Tests.CollectionOrderedTests.IsOrdered_Handles_null" executed="True" success="True" time="0.016" asserts="1" />
                              <test-case name="NUnit.Framework.Constraints.Tests.CollectionOrderedTests.IsOrdered_TypesMustBeComparable" executed="True" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Framework.Constraints.Tests.CollectionOrderedTests.IsOrderedBy" executed="True" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Framework.Constraints.Tests.CollectionOrderedTests.IsOrderedBy_Comparer" executed="True" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Framework.Constraints.Tests.CollectionOrderedTests.IsOrderedBy_Handles_heterogeneous_classes_as_long_as_the_property_is_of_same_type" executed="True" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Framework.Constraints.Tests.CollectionOrderedTests.IsOrderedDescending" executed="True" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Framework.Constraints.Tests.CollectionOrderedTests.IsOrderedDescending_2" executed="True" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Framework.Constraints.Tests.CollectionOrderedTests.UsesProvidedComparerOfT" executed="True" success="True" time="0.000" asserts="2" />
                              <test-case name="NUnit.Framework.Constraints.Tests.CollectionOrderedTests.UsesProvidedComparisonOfT" executed="True" success="True" time="0.000" asserts="2" />
                            </results>
                          </test-suite>
                          <test-suite name="ComparerTests" executed="True" success="True" time="0.016" asserts="0">
                            <results>
                              <test-suite name="EqualItems" executed="True" success="True" time="0.016" asserts="0">
                                <results>
                                  <test-case name="NUnit.Framework.Constraints.Tests.ComparerTests.EqualItems(4,4.0f)" executed="True" success="True" time="0.000" asserts="2" />
                                  <test-case name="NUnit.Framework.Constraints.Tests.ComparerTests.EqualItems(4.0f,4)" executed="True" success="True" time="0.000" asserts="2" />
                                  <test-case name="NUnit.Framework.Constraints.Tests.ComparerTests.EqualItems(4.0f,4.0d)" executed="True" success="True" time="0.000" asserts="2" />
                                  <test-case name="NUnit.Framework.Constraints.Tests.ComparerTests.EqualItems(null,null)" executed="True" success="True" time="0.000" asserts="2" />
                                  <test-case name="NUnit.Framework.Constraints.Tests.ComparerTests.EqualItems(4,4)" executed="True" success="True" time="0.000" asserts="2" />
                                  <test-case name="NUnit.Framework.Constraints.Tests.ComparerTests.EqualItems(4.0f,4.0f)" executed="True" success="True" time="0.000" asserts="2" />
                                  <test-case name="NUnit.Framework.Constraints.Tests.ComparerTests.EqualItems(4,4.0d)" executed="True" success="True" time="0.000" asserts="2" />
                                  <test-case name="NUnit.Framework.Constraints.Tests.ComparerTests.EqualItems(4.0d,4.0f)" executed="True" success="True" time="0.000" asserts="2" />
                                  <test-case name="NUnit.Framework.Constraints.Tests.ComparerTests.EqualItems(4.0d,4.0d)" executed="True" success="True" time="0.000" asserts="2" />
                                  <test-case name="NUnit.Framework.Constraints.Tests.ComparerTests.EqualItems(4.0d,4)" executed="True" success="True" time="0.000" asserts="2" />
                                  <test-case name="NUnit.Framework.Constraints.Tests.ComparerTests.EqualItems(null,null)" executed="True" success="True" time="0.000" asserts="2" />
                                </results>
                              </test-suite>
                              <test-suite name="SpecialFloatingPointValues" executed="True" success="True" time="0.000" asserts="0">
                                <results>
                                  <test-case name="NUnit.Framework.Constraints.Tests.ComparerTests.SpecialFloatingPointValues(double.NegativeInfinity)" executed="True" success="True" time="0.000" asserts="1" />
                                  <test-case name="NUnit.Framework.Constraints.Tests.ComparerTests.SpecialFloatingPointValues(float.NegativeInfinity)" executed="True" success="True" time="0.000" asserts="1" />
                                  <test-case name="NUnit.Framework.Constraints.Tests.ComparerTests.SpecialFloatingPointValues(double.PositiveInfinity)" executed="True" success="True" time="0.000" asserts="1" />
                                  <test-case name="NUnit.Framework.Constraints.Tests.ComparerTests.SpecialFloatingPointValues(float.NaN)" executed="True" success="True" time="0.000" asserts="1" />
                                  <test-case name="NUnit.Framework.Constraints.Tests.ComparerTests.SpecialFloatingPointValues(double.NaN)" executed="True" success="True" time="0.000" asserts="1" />
                                  <test-case name="NUnit.Framework.Constraints.Tests.ComparerTests.SpecialFloatingPointValues(float.PositiveInfinity)" executed="True" success="True" time="0.000" asserts="1" />
                                </results>
                              </test-suite>
                              <test-suite name="UnequalItems" executed="True" success="True" time="0.000" asserts="0">
                                <results>
                                  <test-case name="NUnit.Framework.Constraints.Tests.ComparerTests.UnequalItems(4,2)" executed="True" success="True" time="0.000" asserts="4" />
                                  <test-case name="NUnit.Framework.Constraints.Tests.ComparerTests.UnequalItems(4,null)" executed="True" success="True" time="0.000" asserts="4" />
                                  <test-case name="NUnit.Framework.Constraints.Tests.ComparerTests.UnequalItems(4.0d,2.0d)" executed="True" success="True" time="0.000" asserts="4" />
                                  <test-case name="NUnit.Framework.Constraints.Tests.ComparerTests.UnequalItems(4,null)" executed="True" success="True" time="0.000" asserts="4" />
                                  <test-case name="NUnit.Framework.Constraints.Tests.ComparerTests.UnequalItems(4.0f,2.0f)" executed="True" success="True" time="0.000" asserts="4" />
                                  <test-case name="NUnit.Framework.Constraints.Tests.ComparerTests.UnequalItems(4,2.0d)" executed="True" success="True" time="0.000" asserts="4" />
                                  <test-case name="NUnit.Framework.Constraints.Tests.ComparerTests.UnequalItems(4,2.0f)" executed="True" success="True" time="0.000" asserts="4" />
                                  <test-case name="NUnit.Framework.Constraints.Tests.ComparerTests.UnequalItems(4.0d,2)" executed="True" success="True" time="0.000" asserts="4" />
                                  <test-case name="NUnit.Framework.Constraints.Tests.ComparerTests.UnequalItems(4.0d,2.0f)" executed="True" success="True" time="0.000" asserts="4" />
                                  <test-case name="NUnit.Framework.Constraints.Tests.ComparerTests.UnequalItems(4.0f,2)" executed="True" success="True" time="0.000" asserts="4" />
                                  <test-case name="NUnit.Framework.Constraints.Tests.ComparerTests.UnequalItems(4.0f,2.0d)" executed="True" success="True" time="0.000" asserts="4" />
                                </results>
                              </test-suite>
                            </results>
                          </test-suite>
                          <test-suite name="EmptyConstraintTest" executed="True" success="True" time="0.000" asserts="0">
                            <results>
                              <test-suite name="FailsWithBadValues" executed="True" success="True" time="0.000" asserts="0">
                                <results>
                                  <test-case name="NUnit.Framework.Constraints.Tests.EmptyConstraintTest.FailsWithBadValues(&quot;Hello&quot;)" executed="True" success="True" time="0.000" asserts="1" />
                                  <test-case name="NUnit.Framework.Constraints.Tests.EmptyConstraintTest.FailsWithBadValues(System.Object[])" executed="True" success="True" time="0.000" asserts="1" />
                                </results>
                              </test-suite>
                              <test-suite name="InvalidDataThrowsArgumentException" executed="True" success="True" time="0.000" asserts="0">
                                <results>
                                  <test-case name="NUnit.Framework.Constraints.Tests.EmptyConstraintTest.InvalidDataThrowsArgumentException(null)" executed="True" success="True" time="0.000" asserts="0" />
                                  <test-case name="NUnit.Framework.Constraints.Tests.EmptyConstraintTest.InvalidDataThrowsArgumentException(5)" executed="True" success="True" time="0.000" asserts="0" />
                                </results>
                              </test-suite>
                              <test-case name="NUnit.Framework.Constraints.Tests.EmptyConstraintTest.ProvidesProperDescription" executed="True" success="True" time="0.000" asserts="1" />
                              <test-suite name="ProvidesProperFailureMessage" executed="True" success="True" time="0.000" asserts="0">
                                <results>
                                  <test-case name="NUnit.Framework.Constraints.Tests.EmptyConstraintTest.ProvidesProperFailureMessage(&quot;Hello&quot;,&quot;\&quot;Hello\&quot;&quot;)" executed="True" success="True" time="0.000" asserts="1" />
                                  <test-case name="NUnit.Framework.Constraints.Tests.EmptyConstraintTest.ProvidesProperFailureMessage(System.Object[],&quot;&lt; 1, 2, 3 &gt;&quot;)" executed="True" success="True" time="0.000" asserts="1" />
                                </results>
                              </test-suite>
                              <test-case name="NUnit.Framework.Constraints.Tests.EmptyConstraintTest.ProvidesProperStringRepresentation" executed="True" success="True" time="0.000" asserts="1" />
                              <test-suite name="SucceedsWithGoodValues" executed="True" success="True" time="0.000" asserts="0">
                                <results>
                                  <test-case name="NUnit.Framework.Constraints.Tests.EmptyConstraintTest.SucceedsWithGoodValues(&quot;&quot;)" executed="True" success="True" time="0.000" asserts="1" />
                                  <test-case name="NUnit.Framework.Constraints.Tests.EmptyConstraintTest.SucceedsWithGoodValues(System.Object[])" executed="True" success="True" time="0.000" asserts="1" />
                                  <test-case name="NUnit.Framework.Constraints.Tests.EmptyConstraintTest.SucceedsWithGoodValues(System.Collections.ArrayList)" executed="True" success="True" time="0.000" asserts="1" />
                                  <test-case name="NUnit.Framework.Constraints.Tests.EmptyConstraintTest.SucceedsWithGoodValues(System.Collections.Generic.List`1[System.Int32])" executed="True" success="True" time="0.000" asserts="1" />
                                </results>
                              </test-suite>
                            </results>
                          </test-suite>
                          <test-suite name="EndsWithTest" executed="True" success="True" time="0.000" asserts="0">
                            <results>
                              <test-suite name="FailsWithBadValues" executed="True" success="True" time="0.000" asserts="0">
                                <results>
                                  <test-case name="NUnit.Framework.Constraints.Tests.EndsWithTest.FailsWithBadValues(&quot;goodbye&quot;)" executed="True" success="True" time="0.000" asserts="1" />
                                  <test-case name="NUnit.Framework.Constraints.Tests.EndsWithTest.FailsWithBadValues(&quot;What the hell?&quot;)" executed="True" success="True" time="0.000" asserts="1" />
                                  <test-case name="NUnit.Framework.Constraints.Tests.EndsWithTest.FailsWithBadValues(&quot;hello there&quot;)" executed="True" success="True" time="0.000" asserts="1" />
                                  <test-case name="NUnit.Framework.Constraints.Tests.EndsWithTest.FailsWithBadValues(&quot;say hello to fred&quot;)" executed="True" success="True" time="0.000" asserts="1" />
                                  <test-case name="NUnit.Framework.Constraints.Tests.EndsWithTest.FailsWithBadValues(&quot;&quot;)" executed="True" success="True" time="0.000" asserts="1" />
                                  <test-case name="NUnit.Framework.Constraints.Tests.EndsWithTest.FailsWithBadValues(null)" executed="True" success="True" time="0.000" asserts="1" />
                                </results>
                              </test-suite>
                              <test-case name="NUnit.Framework.Constraints.Tests.EndsWithTest.ProvidesProperDescription" executed="True" success="True" time="0.000" asserts="1" />
                              <test-suite name="ProvidesProperFailureMessage" executed="True" success="True" time="0.000" asserts="0">
                                <results>
                                  <test-case name="NUnit.Framework.Constraints.Tests.EndsWithTest.ProvidesProperFailureMessage(&quot;goodbye&quot;,&quot;\&quot;goodbye\&quot;&quot;)" executed="True" success="True" time="0.000" asserts="1" />
                                  <test-case name="NUnit.Framework.Constraints.Tests.EndsWithTest.ProvidesProperFailureMessage(&quot;What the hell?&quot;,&quot;\&quot;What the hell?\&quot;&quot;)" executed="True" success="True" time="0.000" asserts="1" />
                                  <test-case name="NUnit.Framework.Constraints.Tests.EndsWithTest.ProvidesProperFailureMessage(&quot;hello there&quot;,&quot;\&quot;hello there\&quot;&quot;)" executed="True" success="True" time="0.000" asserts="1" />
                                  <test-case name="NUnit.Framework.Constraints.Tests.EndsWithTest.ProvidesProperFailureMessage(&quot;say hello to fred&quot;,&quot;\&quot;say hello to fred\&quot;&quot;)" executed="True" success="True" time="0.000" asserts="1" />
                                  <test-case name="NUnit.Framework.Constraints.Tests.EndsWithTest.ProvidesProperFailureMessage(&quot;&quot;,&quot;&lt;string.Empty&gt;&quot;)" executed="True" success="True" time="0.000" asserts="1" />
                                  <test-case name="NUnit.Framework.Constraints.Tests.EndsWithTest.ProvidesProperFailureMessage(null,&quot;null&quot;)" executed="True" success="True" time="0.000" asserts="1" />
                                </results>
                              </test-suite>
                              <test-case name="NUnit.Framework.Constraints.Tests.EndsWithTest.ProvidesProperStringRepresentation" executed="True" success="True" time="0.000" asserts="1" />
                              <test-suite name="SucceedsWithGoodValues" executed="True" success="True" time="0.000" asserts="0">
                                <results>
                                  <test-case name="NUnit.Framework.Constraints.Tests.EndsWithTest.SucceedsWithGoodValues(&quot;hello&quot;)" executed="True" success="True" time="0.000" asserts="1" />
                                  <test-case name="NUnit.Framework.Constraints.Tests.EndsWithTest.SucceedsWithGoodValues(&quot;I said hello&quot;)" executed="True" success="True" time="0.000" asserts="1" />
                                </results>
                              </test-suite>
                            </results>
                          </test-suite>
                          <test-suite name="EndsWithTestIgnoringCase" executed="True" success="True" time="0.000" asserts="0">
                            <results>
                              <test-suite name="FailsWithBadValues" executed="True" success="True" time="0.000" asserts="0">
                                <results>
                                  <test-case name="NUnit.Framework.Constraints.Tests.EndsWithTestIgnoringCase.FailsWithBadValues(&quot;goodbye&quot;)" executed="True" success="True" time="0.000" asserts="1" />
                                  <test-case name="NUnit.Framework.Constraints.Tests.EndsWithTestIgnoringCase.FailsWithBadValues(&quot;What the hell?&quot;)" executed="True" success="True" time="0.000" asserts="1" />
                                  <test-case name="NUnit.Framework.Constraints.Tests.EndsWithTestIgnoringCase.FailsWithBadValues(&quot;hello there&quot;)" executed="True" success="True" time="0.000" asserts="1" />
                                  <test-case name="NUnit.Framework.Constraints.Tests.EndsWithTestIgnoringCase.FailsWithBadValues(&quot;say hello to fred&quot;)" executed="True" success="True" time="0.000" asserts="1" />
                                  <test-case name="NUnit.Framework.Constraints.Tests.EndsWithTestIgnoringCase.FailsWithBadValues(&quot;&quot;)" executed="True" success="True" time="0.000" asserts="1" />
                                  <test-case name="NUnit.Framework.Constraints.Tests.EndsWithTestIgnoringCase.FailsWithBadValues(null)" executed="True" success="True" time="0.000" asserts="1" />
                                </results>
                              </test-suite>
                              <test-case name="NUnit.Framework.Constraints.Tests.EndsWithTestIgnoringCase.ProvidesProperDescription" executed="True" success="True" time="0.000" asserts="1" />
                              <test-suite name="ProvidesProperFailureMessage" executed="True" success="True" time="0.000" asserts="0">
                                <results>
                                  <test-case name="NUnit.Framework.Constraints.Tests.EndsWithTestIgnoringCase.ProvidesProperFailureMessage(&quot;goodbye&quot;,&quot;\&quot;goodbye\&quot;&quot;)" executed="True" success="True" time="0.000" asserts="1" />
                                  <test-case name="NUnit.Framework.Constraints.Tests.EndsWithTestIgnoringCase.ProvidesProperFailureMessage(&quot;What the hell?&quot;,&quot;\&quot;What the hell?\&quot;&quot;)" executed="True" success="True" time="0.000" asserts="1" />
                                  <test-case name="NUnit.Framework.Constraints.Tests.EndsWithTestIgnoringCase.ProvidesProperFailureMessage(&quot;hello there&quot;,&quot;\&quot;hello there\&quot;&quot;)" executed="True" success="True" time="0.000" asserts="1" />
                                  <test-case name="NUnit.Framework.Constraints.Tests.EndsWithTestIgnoringCase.ProvidesProperFailureMessage(&quot;say hello to fred&quot;,&quot;\&quot;say hello to fred\&quot;&quot;)" executed="True" success="True" time="0.000" asserts="1" />
                                  <test-case name="NUnit.Framework.Constraints.Tests.EndsWithTestIgnoringCase.ProvidesProperFailureMessage(&quot;&quot;,&quot;&lt;string.Empty&gt;&quot;)" executed="True" success="True" time="0.000" asserts="1" />
                                  <test-case name="NUnit.Framework.Constraints.Tests.EndsWithTestIgnoringCase.ProvidesProperFailureMessage(null,&quot;null&quot;)" executed="True" success="True" time="0.000" asserts="1" />
                                </results>
                              </test-suite>
                              <test-case name="NUnit.Framework.Constraints.Tests.EndsWithTestIgnoringCase.ProvidesProperStringRepresentation" executed="True" success="True" time="0.000" asserts="1" />
                              <test-suite name="SucceedsWithGoodValues" executed="True" success="True" time="0.000" asserts="0">
                                <results>
                                  <test-case name="NUnit.Framework.Constraints.Tests.EndsWithTestIgnoringCase.SucceedsWithGoodValues(&quot;HELLO&quot;)" executed="True" success="True" time="0.000" asserts="1" />
                                  <test-case name="NUnit.Framework.Constraints.Tests.EndsWithTestIgnoringCase.SucceedsWithGoodValues(&quot;I said Hello&quot;)" executed="True" success="True" time="0.000" asserts="1" />
                                </results>
                              </test-suite>
                            </results>
                          </test-suite>
                          <test-suite name="EqualConstraintTest" executed="True" success="True" time="0.250" asserts="0">
                            <results>
                              <test-case name="NUnit.Framework.Constraints.Tests.EqualConstraintTest.CanMatchDates" executed="True" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Framework.Constraints.Tests.EqualConstraintTest.CanMatchDatesWithinDays" executed="True" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Framework.Constraints.Tests.EqualConstraintTest.CanMatchDatesWithinHours" executed="True" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Framework.Constraints.Tests.EqualConstraintTest.CanMatchDatesWithinMilliseconds" executed="True" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Framework.Constraints.Tests.EqualConstraintTest.CanMatchDatesWithinMinutes" executed="True" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Framework.Constraints.Tests.EqualConstraintTest.CanMatchDatesWithinSeconds" executed="True" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Framework.Constraints.Tests.EqualConstraintTest.CanMatchDatesWithinTicks" executed="True" success="True" time="0.141" asserts="1" />
                              <test-case name="NUnit.Framework.Constraints.Tests.EqualConstraintTest.CanMatchDatesWithinTimeSpan" executed="True" success="True" time="0.000" asserts="1" />
                              <test-suite name="CanMatchDoublesWithRelativeTolerance" executed="True" success="True" time="0.000" asserts="0">
                                <results>
                                  <test-case name="NUnit.Framework.Constraints.Tests.EqualConstraintTest.CanMatchDoublesWithRelativeTolerance(10500.0d)" executed="True" success="True" time="0.000" asserts="1" />
                                  <test-case name="NUnit.Framework.Constraints.Tests.EqualConstraintTest.CanMatchDoublesWithRelativeTolerance(9500.0d)" executed="True" success="True" time="0.000" asserts="1" />
                                  <test-case name="NUnit.Framework.Constraints.Tests.EqualConstraintTest.CanMatchDoublesWithRelativeTolerance(10000.0d)" executed="True" success="True" time="0.000" asserts="1" />
                                </results>
                              </test-suite>
                              <test-suite name="CanMatchDoublesWithUlpTolerance" executed="True" success="True" time="0.000" asserts="0">
                                <results>
                                  <test-case name="NUnit.Framework.Constraints.Tests.EqualConstraintTest.CanMatchDoublesWithUlpTolerance(2E+16.0d)" executed="True" success="True" time="0.000" asserts="1" />
                                  <test-case name="NUnit.Framework.Constraints.Tests.EqualConstraintTest.CanMatchDoublesWithUlpTolerance(2E+16.0d)" executed="True" success="True" time="0.000" asserts="1" />
                                </results>
                              </test-suite>
                              <test-suite name="CanMatchSinglesWithRelativeTolerance" executed="True" success="True" time="0.000" asserts="0">
                                <results>
                                  <test-case name="NUnit.Framework.Constraints.Tests.EqualConstraintTest.CanMatchSinglesWithRelativeTolerance(10000.0f)" executed="True" success="True" time="0.000" asserts="1" />
                                  <test-case name="NUnit.Framework.Constraints.Tests.EqualConstraintTest.CanMatchSinglesWithRelativeTolerance(9500.0f)" executed="True" success="True" time="0.000" asserts="1" />
                                  <test-case name="NUnit.Framework.Constraints.Tests.EqualConstraintTest.CanMatchSinglesWithRelativeTolerance(10500.0f)" executed="True" success="True" time="0.000" asserts="1" />
                                </results>
                              </test-suite>
                              <test-suite name="CanMatchSinglesWithUlpTolerance" executed="True" success="True" time="0.000" asserts="0">
                                <results>
                                  <test-case name="NUnit.Framework.Constraints.Tests.EqualConstraintTest.CanMatchSinglesWithUlpTolerance(2E+07.0f)" executed="True" success="True" time="0.000" asserts="1" />
                                  <test-case name="NUnit.Framework.Constraints.Tests.EqualConstraintTest.CanMatchSinglesWithUlpTolerance(2E+07.0f)" executed="True" success="True" time="0.000" asserts="1" />
                                </results>
                              </test-suite>
                              <test-suite name="CanMatchSpecialFloatingPointValues" executed="True" success="True" time="0.000" asserts="0">
                                <results>
                                  <test-case name="NUnit.Framework.Constraints.Tests.EqualConstraintTest.CanMatchSpecialFloatingPointValues(double.NaN)" executed="True" success="True" time="0.000" asserts="1" />
                                  <test-case name="NUnit.Framework.Constraints.Tests.EqualConstraintTest.CanMatchSpecialFloatingPointValues(double.NegativeInfinity)" executed="True" success="True" time="0.000" asserts="1" />
                                  <test-case name="NUnit.Framework.Constraints.Tests.EqualConstraintTest.CanMatchSpecialFloatingPointValues(float.NaN)" executed="True" success="True" time="0.000" asserts="1" />
                                  <test-case name="NUnit.Framework.Constraints.Tests.EqualConstraintTest.CanMatchSpecialFloatingPointValues(float.PositiveInfinity)" executed="True" success="True" time="0.000" asserts="1" />
                                  <test-case name="NUnit.Framework.Constraints.Tests.EqualConstraintTest.CanMatchSpecialFloatingPointValues(double.PositiveInfinity)" executed="True" success="True" time="0.000" asserts="1" />
                                  <test-case name="NUnit.Framework.Constraints.Tests.EqualConstraintTest.CanMatchSpecialFloatingPointValues(float.NegativeInfinity)" executed="True" success="True" time="0.000" asserts="1" />
                                </results>
                              </test-suite>
                              <test-case name="NUnit.Framework.Constraints.Tests.EqualConstraintTest.CanMatchTimeSpanWithinMinutes" executed="True" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Framework.Constraints.Tests.EqualConstraintTest.ErrorIfDaysPrecedesWithin" executed="True" success="True" time="0.000" asserts="0" />
                              <test-case name="NUnit.Framework.Constraints.Tests.EqualConstraintTest.ErrorIfHoursPrecedesWithin" executed="True" success="True" time="0.000" asserts="0" />
                              <test-case name="NUnit.Framework.Constraints.Tests.EqualConstraintTest.ErrorIfMillisecondsPrecedesWithin" executed="True" success="True" time="0.000" asserts="0" />
                              <test-case name="NUnit.Framework.Constraints.Tests.EqualConstraintTest.ErrorIfMinutesPrecedesWithin" executed="True" success="True" time="0.000" asserts="0" />
                              <test-case name="NUnit.Framework.Constraints.Tests.EqualConstraintTest.ErrorIfPercentPrecedesWithin" executed="True" success="True" time="0.031" asserts="0" />
                              <test-case name="NUnit.Framework.Constraints.Tests.EqualConstraintTest.ErrorIfSecondsPrecedesWithin" executed="True" success="True" time="0.016" asserts="0" />
                              <test-case name="NUnit.Framework.Constraints.Tests.EqualConstraintTest.ErrorIfTicksPrecedesWithin" executed="True" success="True" time="0.000" asserts="0" />
                              <test-case name="NUnit.Framework.Constraints.Tests.EqualConstraintTest.ErrorIfUlpsIsUsedOnDecimal" executed="True" success="True" time="0.000" asserts="1" />
                              <test-suite name="ErrorIfUlpsIsUsedOnIntegralType" executed="True" success="True" time="0.000" asserts="0">
                                <results>
                                  <test-case name="NUnit.Framework.Constraints.Tests.EqualConstraintTest.ErrorIfUlpsIsUsedOnIntegralType(1000)" executed="True" success="True" time="0.000" asserts="1" />
                                  <test-case name="NUnit.Framework.Constraints.Tests.EqualConstraintTest.ErrorIfUlpsIsUsedOnIntegralType(1000)" executed="True" success="True" time="0.000" asserts="1" />
                                  <test-case name="NUnit.Framework.Constraints.Tests.EqualConstraintTest.ErrorIfUlpsIsUsedOnIntegralType(1000L)" executed="True" success="True" time="0.000" asserts="1" />
                                  <test-case name="NUnit.Framework.Constraints.Tests.EqualConstraintTest.ErrorIfUlpsIsUsedOnIntegralType(1000UL)" executed="True" success="True" time="0.000" asserts="1" />
                                </results>
                              </test-suite>
                              <test-case name="NUnit.Framework.Constraints.Tests.EqualConstraintTest.ErrorIfUlpsPrecedesWithin" executed="True" success="True" time="0.000" asserts="0" />
                              <test-case name="NUnit.Framework.Constraints.Tests.EqualConstraintTest.ErrorWithPercentAndUlpsToleranceModes" executed="True" success="True" time="0.000" asserts="0" />
                              <test-case name="NUnit.Framework.Constraints.Tests.EqualConstraintTest.ErrorWithUlpsAndPercentToleranceModes" executed="True" success="True" time="0.000" asserts="0" />
                              <test-suite name="FailsOnDoublesOutsideOfRelativeTolerance" executed="True" success="True" time="0.000" asserts="0">
                                <results>
                                  <test-case name="NUnit.Framework.Constraints.Tests.EqualConstraintTest.FailsOnDoublesOutsideOfRelativeTolerance(8500.0d)" executed="True" success="True" time="0.000" asserts="1" />
                                  <test-case name="NUnit.Framework.Constraints.Tests.EqualConstraintTest.FailsOnDoublesOutsideOfRelativeTolerance(11500.0d)" executed="True" success="True" time="0.000" asserts="1" />
                                </results>
                              </test-suite>
                              <test-suite name="FailsOnDoublesOutsideOfUlpTolerance" executed="True" success="True" time="0.016" asserts="0">
                                <results>
                                  <test-case name="NUnit.Framework.Constraints.Tests.EqualConstraintTest.FailsOnDoublesOutsideOfUlpTolerance(2E+16.0d)" executed="True" success="True" time="0.000" asserts="1" />
                                  <test-case name="NUnit.Framework.Constraints.Tests.EqualConstraintTest.FailsOnDoublesOutsideOfUlpTolerance(2E+16.0d)" executed="True" success="True" time="0.000" asserts="1" />
                                </results>
                              </test-suite>
                              <test-suite name="FailsOnSinglesOutsideOfRelativeTolerance" executed="True" success="True" time="0.000" asserts="0">
                                <results>
                                  <test-case name="NUnit.Framework.Constraints.Tests.EqualConstraintTest.FailsOnSinglesOutsideOfRelativeTolerance(8500.0f)" executed="True" success="True" time="0.000" asserts="1" />
                                  <test-case name="NUnit.Framework.Constraints.Tests.EqualConstraintTest.FailsOnSinglesOutsideOfRelativeTolerance(11500.0f)" executed="True" success="True" time="0.000" asserts="1" />
                                </results>
                              </test-suite>
                              <test-suite name="FailsOnSinglesOutsideOfUlpTolerance" executed="True" success="True" time="0.000" asserts="0">
                                <results>
                                  <test-case name="NUnit.Framework.Constraints.Tests.EqualConstraintTest.FailsOnSinglesOutsideOfUlpTolerance(2E+07.0f)" executed="True" success="True" time="0.000" asserts="1" />
                                  <test-case name="NUnit.Framework.Constraints.Tests.EqualConstraintTest.FailsOnSinglesOutsideOfUlpTolerance(2E+07.0f)" executed="True" success="True" time="0.000" asserts="1" />
                                </results>
                              </test-suite>
                              <test-suite name="FailsWithBadValues" executed="True" success="True" time="0.016" asserts="0">
                                <results>
                                  <test-case name="NUnit.Framework.Constraints.Tests.EqualConstraintTest.FailsWithBadValues(5)" executed="True" success="True" time="0.000" asserts="1" />
                                  <test-case name="NUnit.Framework.Constraints.Tests.EqualConstraintTest.FailsWithBadValues(null)" executed="True" success="True" time="0.000" asserts="1" />
                                  <test-case name="NUnit.Framework.Constraints.Tests.EqualConstraintTest.FailsWithBadValues(&quot;Hello&quot;)" executed="True" success="True" time="0.000" asserts="1" />
                                  <test-case name="NUnit.Framework.Constraints.Tests.EqualConstraintTest.FailsWithBadValues(double.NaN)" executed="True" success="True" time="0.000" asserts="1" />
                                  <test-case name="NUnit.Framework.Constraints.Tests.EqualConstraintTest.FailsWithBadValues(double.PositiveInfinity)" executed="True" success="True" time="0.000" asserts="1" />
                                </results>
                              </test-suite>
                              <test-case name="NUnit.Framework.Constraints.Tests.EqualConstraintTest.ProvidesProperDescription" executed="True" success="True" time="0.000" asserts="1" />
                              <test-suite name="ProvidesProperFailureMessage" executed="True" success="True" time="0.000" asserts="0">
                                <results>
                                  <test-case name="NUnit.Framework.Constraints.Tests.EqualConstraintTest.ProvidesProperFailureMessage(5,&quot;5&quot;)" executed="True" success="True" time="0.000" asserts="1" />
                                  <test-case name="NUnit.Framework.Constraints.Tests.EqualConstraintTest.ProvidesProperFailureMessage(null,&quot;null&quot;)" executed="True" success="True" time="0.000" asserts="1" />
                                  <test-case name="NUnit.Framework.Constraints.Tests.EqualConstraintTest.ProvidesProperFailureMessage(&quot;Hello&quot;,&quot;\&quot;Hello\&quot;&quot;)" executed="True" success="True" time="0.000" asserts="1" />
                                  <test-case name="NUnit.Framework.Constraints.Tests.EqualConstraintTest.ProvidesProperFailureMessage(double.NaN,&quot;NaN&quot;)" executed="True" success="True" time="0.000" asserts="1" />
                                  <test-case name="NUnit.Framework.Constraints.Tests.EqualConstraintTest.ProvidesProperFailureMessage(double.PositiveInfinity,&quot;Infinity&quot;)" executed="True" success="True" time="0.000" asserts="1" />
                                </results>
                              </test-suite>
                              <test-case name="NUnit.Framework.Constraints.Tests.EqualConstraintTest.ProvidesProperStringRepresentation" executed="True" success="True" time="0.000" asserts="1" />
                              <test-suite name="SucceedsWithGoodValues" executed="True" success="True" time="0.000" asserts="0">
                                <results>
                                  <test-case name="NUnit.Framework.Constraints.Tests.EqualConstraintTest.SucceedsWithGoodValues(4)" executed="True" success="True" time="0.000" asserts="1" />
                                  <test-case name="NUnit.Framework.Constraints.Tests.EqualConstraintTest.SucceedsWithGoodValues(4.0f)" executed="True" success="True" time="0.000" asserts="1" />
                                  <test-case name="NUnit.Framework.Constraints.Tests.EqualConstraintTest.SucceedsWithGoodValues(4.0d)" executed="True" success="True" time="0.000" asserts="1" />
                                  <test-case name="NUnit.Framework.Constraints.Tests.EqualConstraintTest.SucceedsWithGoodValues(4.0000m)" executed="True" success="True" time="0.000" asserts="1" />
                                </results>
                              </test-suite>
                              <test-case name="NUnit.Framework.Constraints.Tests.EqualConstraintTest.UsesProvidedComparerOfT" executed="True" success="True" time="0.000" asserts="2" />
                              <test-case name="NUnit.Framework.Constraints.Tests.EqualConstraintTest.UsesProvidedComparisonOfT" executed="True" success="True" time="0.000" asserts="2" />
                              <test-case name="NUnit.Framework.Constraints.Tests.EqualConstraintTest.UsesProvidedEqualityComparer" executed="True" success="True" time="0.000" asserts="2" />
                              <test-case name="NUnit.Framework.Constraints.Tests.EqualConstraintTest.UsesProvidedEqualityComparerOfT" executed="True" success="True" time="0.000" asserts="2" />
                              <test-case name="NUnit.Framework.Constraints.Tests.EqualConstraintTest.UsesProvidedIComparer" executed="True" success="True" time="0.000" asserts="2" />
                            </results>
                          </test-suite>
                          <test-suite name="EqualTest" executed="True" success="True" time="0.063" asserts="0">
                            <results>
                              <test-case name="NUnit.Framework.Constraints.Tests.EqualTest.FailedStringMatchShowsFailurePosition" executed="True" success="True" time="0.016" asserts="2" />
                              <test-case name="NUnit.Framework.Constraints.Tests.EqualTest.LongStringsAreTruncated" executed="True" success="True" time="0.047" asserts="2" />
                              <test-case name="NUnit.Framework.Constraints.Tests.EqualTest.LongStringsAreTruncatedAtBothEndsIfNecessary" executed="True" success="True" time="0.000" asserts="2" />
                              <test-case name="NUnit.Framework.Constraints.Tests.EqualTest.LongStringsAreTruncatedAtFrontEndIfNecessary" executed="True" success="True" time="0.000" asserts="2" />
                              <test-case name="NUnit.Framework.Constraints.Tests.EqualTest.TestPropertyWithPrivateSetter" executed="True" success="True" time="0.000" asserts="1" />
                            </results>
                          </test-suite>
                          <test-suite name="ExactTypeTest" executed="True" success="True" time="0.016" asserts="0">
                            <results>
                              <test-suite name="FailsWithBadValues" executed="True" success="True" time="0.016" asserts="0">
                                <results>
                                  <test-case name="NUnit.Framework.Constraints.Tests.ExactTypeTest.FailsWithBadValues(NUnit.Framework.Constraints.Tests.B)" executed="True" success="True" time="0.000" asserts="1" />
                                  <test-case name="NUnit.Framework.Constraints.Tests.ExactTypeTest.FailsWithBadValues(NUnit.Framework.Constraints.Tests.D2)" executed="True" success="True" time="0.000" asserts="1" />
                                </results>
                              </test-suite>
                              <test-case name="NUnit.Framework.Constraints.Tests.ExactTypeTest.ProvidesProperDescription" executed="True" success="True" time="0.000" asserts="1" />
                              <test-suite name="ProvidesProperFailureMessage" executed="True" success="True" time="0.000" asserts="0">
                                <results>
                                  <test-case name="NUnit.Framework.Constraints.Tests.ExactTypeTest.ProvidesProperFailureMessage(NUnit.Framework.Constraints.Tests.B,&quot;&lt;NUnit.Framework.Constraints.Tests.B&gt;&quot;)" executed="True" success="True" time="0.000" asserts="1" />
                                  <test-case name="NUnit.Framework.Constraints.Tests.ExactTypeTest.ProvidesProperFailureMessage(NUnit.Framework.Constraints.Tests.D2,&quot;&lt;NUnit.Framework.Constraints.Tests.D2&gt;&quot;)" executed="True" success="True" time="0.000" asserts="1" />
                                </results>
                              </test-suite>
                              <test-case name="NUnit.Framework.Constraints.Tests.ExactTypeTest.ProvidesProperStringRepresentation" executed="True" success="True" time="0.000" asserts="1" />
                              <test-suite name="SucceedsWithGoodValues" executed="True" success="True" time="0.000" asserts="0">
                                <results>
                                  <test-case name="NUnit.Framework.Constraints.Tests.ExactTypeTest.SucceedsWithGoodValues(NUnit.Framework.Constraints.Tests.D1)" executed="True" success="True" time="0.000" asserts="1" />
                                </results>
                              </test-suite>
                            </results>
                          </test-suite>
                          <test-suite name="FalseConstraintTest" executed="True" success="True" time="0.016" asserts="0">
                            <results>
                              <test-suite name="FailsWithBadValues" executed="True" success="True" time="0.016" asserts="0">
                                <results>
                                  <test-case name="NUnit.Framework.Constraints.Tests.FalseConstraintTest.FailsWithBadValues(null)" executed="True" success="True" time="0.000" asserts="1" />
                                  <test-case name="NUnit.Framework.Constraints.Tests.FalseConstraintTest.FailsWithBadValues(&quot;hello&quot;)" executed="True" success="True" time="0.000" asserts="1" />
                                  <test-case name="NUnit.Framework.Constraints.Tests.FalseConstraintTest.FailsWithBadValues(True)" executed="True" success="True" time="0.000" asserts="1" />
                                  <test-case name="NUnit.Framework.Constraints.Tests.FalseConstraintTest.FailsWithBadValues(True)" executed="True" success="True" time="0.000" asserts="1" />
                                </results>
                              </test-suite>
                              <test-case name="NUnit.Framework.Constraints.Tests.FalseConstraintTest.ProvidesProperDescription" executed="True" success="True" time="0.000" asserts="1" />
                              <test-suite name="ProvidesProperFailureMessage" executed="True" success="True" time="0.000" asserts="0">
                                <results>
                                  <test-case name="NUnit.Framework.Constraints.Tests.FalseConstraintTest.ProvidesProperFailureMessage(null,&quot;null&quot;)" executed="True" success="True" time="0.000" asserts="1" />
                                  <test-case name="NUnit.Framework.Constraints.Tests.FalseConstraintTest.ProvidesProperFailureMessage(&quot;hello&quot;,&quot;\&quot;hello\&quot;&quot;)" executed="True" success="True" time="0.000" asserts="1" />
                                  <test-case name="NUnit.Framework.Constraints.Tests.FalseConstraintTest.ProvidesProperFailureMessage(True,&quot;True&quot;)" executed="True" success="True" time="0.000" asserts="1" />
                                  <test-case name="NUnit.Framework.Constraints.Tests.FalseConstraintTest.ProvidesProperFailureMessage(True,&quot;True&quot;)" executed="True" success="True" time="0.000" asserts="1" />
                                </results>
                              </test-suite>
                              <test-case name="NUnit.Framework.Constraints.Tests.FalseConstraintTest.ProvidesProperStringRepresentation" executed="True" success="True" time="0.000" asserts="1" />
                              <test-suite name="SucceedsWithGoodValues" executed="True" success="True" time="0.000" asserts="0">
                                <results>
                                  <test-case name="NUnit.Framework.Constraints.Tests.FalseConstraintTest.SucceedsWithGoodValues(False)" executed="True" success="True" time="0.000" asserts="1" />
                                  <test-case name="NUnit.Framework.Constraints.Tests.FalseConstraintTest.SucceedsWithGoodValues(False)" executed="True" success="True" time="0.000" asserts="1" />
                                </results>
                              </test-suite>
                            </results>
                          </test-suite>
                          <test-suite name="FloatingPointNumericsTest" executed="True" success="True" time="0.000" asserts="0">
                            <results>
                              <test-case name="NUnit.Framework.Constraints.Tests.FloatingPointNumericsTest.DoubleEqualityWithUlps" executed="True" success="True" time="0.000" asserts="4" />
                              <test-case name="NUnit.Framework.Constraints.Tests.FloatingPointNumericsTest.FloatEqualityWithUlps" executed="True" success="True" time="0.000" asserts="4" />
                              <test-case name="NUnit.Framework.Constraints.Tests.FloatingPointNumericsTest.MirroredDoubleReinterpretation" executed="True" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Framework.Constraints.Tests.FloatingPointNumericsTest.MirroredFloatReinterpretation" executed="True" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Framework.Constraints.Tests.FloatingPointNumericsTest.MirroredIntegerReinterpretation" executed="True" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Framework.Constraints.Tests.FloatingPointNumericsTest.MirroredLongReinterpretation" executed="True" success="True" time="0.000" asserts="1" />
                            </results>
                          </test-suite>
                          <test-suite name="GreaterThanOrEqualTest" executed="True" success="True" time="0.000" asserts="0">
                            <results>
                              <test-case name="NUnit.Framework.Constraints.Tests.GreaterThanOrEqualTest.CanCompareIComparables" executed="True" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Framework.Constraints.Tests.GreaterThanOrEqualTest.CanCompareIComparablesOfT" executed="True" success="True" time="0.000" asserts="1" />
                              <test-suite name="FailsWithBadValues" executed="True" success="True" time="0.000" asserts="0">
                                <results>
                                  <test-case name="NUnit.Framework.Constraints.Tests.GreaterThanOrEqualTest.FailsWithBadValues(4)" executed="True" success="True" time="0.000" asserts="1" />
                                </results>
                              </test-suite>
                              <test-suite name="InvalidDataThrowsArgumentException" executed="True" success="True" time="0.000" asserts="0">
                                <results>
                                  <test-case name="NUnit.Framework.Constraints.Tests.GreaterThanOrEqualTest.InvalidDataThrowsArgumentException(null)" executed="True" success="True" time="0.000" asserts="0" />
                                  <test-case name="NUnit.Framework.Constraints.Tests.GreaterThanOrEqualTest.InvalidDataThrowsArgumentException(&quot;xxx&quot;)" executed="True" success="True" time="0.000" asserts="0" />
                                </results>
                              </test-suite>
                              <test-case name="NUnit.Framework.Constraints.Tests.GreaterThanOrEqualTest.ProvidesProperDescription" executed="True" success="True" time="0.000" asserts="1" />
                              <test-suite name="ProvidesProperFailureMessage" executed="True" success="True" time="0.000" asserts="0">
                                <results>
                                  <test-case name="NUnit.Framework.Constraints.Tests.GreaterThanOrEqualTest.ProvidesProperFailureMessage(4,&quot;4&quot;)" executed="True" success="True" time="0.000" asserts="1" />
                                </results>
                              </test-suite>
                              <test-case name="NUnit.Framework.Constraints.Tests.GreaterThanOrEqualTest.ProvidesProperStringRepresentation" executed="True" success="True" time="0.000" asserts="1" />
                              <test-suite name="SucceedsWithGoodValues" executed="True" success="True" time="0.000" asserts="0">
                                <results>
                                  <test-case name="NUnit.Framework.Constraints.Tests.GreaterThanOrEqualTest.SucceedsWithGoodValues(6)" executed="True" success="True" time="0.000" asserts="1" />
                                  <test-case name="NUnit.Framework.Constraints.Tests.GreaterThanOrEqualTest.SucceedsWithGoodValues(5)" executed="True" success="True" time="0.000" asserts="1" />
                                </results>
                              </test-suite>
                              <test-case name="NUnit.Framework.Constraints.Tests.GreaterThanOrEqualTest.UsesProvidedComparerOfT" executed="True" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Framework.Constraints.Tests.GreaterThanOrEqualTest.UsesProvidedComparisonOfT" executed="True" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Framework.Constraints.Tests.GreaterThanOrEqualTest.UsesProvidedIComparer" executed="True" success="True" time="0.000" asserts="1" />
                            </results>
                          </test-suite>
                          <test-suite name="GreaterThanTest" executed="True" success="True" time="0.063" asserts="0">
                            <results>
                              <test-case name="NUnit.Framework.Constraints.Tests.GreaterThanTest.CanCompareIComparables" executed="True" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Framework.Constraints.Tests.GreaterThanTest.CanCompareIComparablesOfT" executed="True" success="True" time="0.000" asserts="1" />
                              <test-suite name="FailsWithBadValues" executed="True" success="True" time="0.000" asserts="0">
                                <results>
                                  <test-case name="NUnit.Framework.Constraints.Tests.GreaterThanTest.FailsWithBadValues(4)" executed="True" success="True" time="0.000" asserts="1" />
                                  <test-case name="NUnit.Framework.Constraints.Tests.GreaterThanTest.FailsWithBadValues(5)" executed="True" success="True" time="0.000" asserts="1" />
                                </results>
                              </test-suite>
                              <test-suite name="InvalidDataThrowsArgumentException" executed="True" success="True" time="0.063" asserts="0">
                                <results>
                                  <test-case name="NUnit.Framework.Constraints.Tests.GreaterThanTest.InvalidDataThrowsArgumentException(null)" executed="True" success="True" time="0.063" asserts="0" />
                                  <test-case name="NUnit.Framework.Constraints.Tests.GreaterThanTest.InvalidDataThrowsArgumentException(&quot;xxx&quot;)" executed="True" success="True" time="0.000" asserts="0" />
                                </results>
                              </test-suite>
                              <test-case name="NUnit.Framework.Constraints.Tests.GreaterThanTest.ProvidesProperDescription" executed="True" success="True" time="0.000" asserts="1" />
                              <test-suite name="ProvidesProperFailureMessage" executed="True" success="True" time="0.000" asserts="0">
                                <results>
                                  <test-case name="NUnit.Framework.Constraints.Tests.GreaterThanTest.ProvidesProperFailureMessage(4,&quot;4&quot;)" executed="True" success="True" time="0.000" asserts="1" />
                                  <test-case name="NUnit.Framework.Constraints.Tests.GreaterThanTest.ProvidesProperFailureMessage(5,&quot;5&quot;)" executed="True" success="True" time="0.000" asserts="1" />
                                </results>
                              </test-suite>
                              <test-case name="NUnit.Framework.Constraints.Tests.GreaterThanTest.ProvidesProperStringRepresentation" executed="True" success="True" time="0.000" asserts="1" />
                              <test-suite name="SucceedsWithGoodValues" executed="True" success="True" time="0.000" asserts="0">
                                <results>
                                  <test-case name="NUnit.Framework.Constraints.Tests.GreaterThanTest.SucceedsWithGoodValues(6)" executed="True" success="True" time="0.000" asserts="1" />
                                  <test-case name="NUnit.Framework.Constraints.Tests.GreaterThanTest.SucceedsWithGoodValues(5.001d)" executed="True" success="True" time="0.000" asserts="1" />
                                </results>
                              </test-suite>
                              <test-case name="NUnit.Framework.Constraints.Tests.GreaterThanTest.UsesProvidedComparerOfT" executed="True" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Framework.Constraints.Tests.GreaterThanTest.UsesProvidedComparisonOfT" executed="True" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Framework.Constraints.Tests.GreaterThanTest.UsesProvidedIComparer" executed="True" success="True" time="0.000" asserts="1" />
                            </results>
                          </test-suite>
                          <test-suite name="InstanceOfTypeTest" executed="True" success="True" time="0.000" asserts="0">
                            <results>
                              <test-suite name="FailsWithBadValues" executed="True" success="True" time="0.000" asserts="0">
                                <results>
                                  <test-case name="NUnit.Framework.Constraints.Tests.InstanceOfTypeTest.FailsWithBadValues(NUnit.Framework.Constraints.Tests.B)" executed="True" success="True" time="0.000" asserts="1" />
                                </results>
                              </test-suite>
                              <test-case name="NUnit.Framework.Constraints.Tests.InstanceOfTypeTest.ProvidesProperDescription" executed="True" success="True" time="0.000" asserts="1" />
                              <test-suite name="ProvidesProperFailureMessage" executed="True" success="True" time="0.000" asserts="0">
                                <results>
                                  <test-case name="NUnit.Framework.Constraints.Tests.InstanceOfTypeTest.ProvidesProperFailureMessage(NUnit.Framework.Constraints.Tests.B,&quot;&lt;NUnit.Framework.Constraints.Tests.B&gt;&quot;)" executed="True" success="True" time="0.000" asserts="1" />
                                </results>
                              </test-suite>
                              <test-case name="NUnit.Framework.Constraints.Tests.InstanceOfTypeTest.ProvidesProperStringRepresentation" executed="True" success="True" time="0.000" asserts="1" />
                              <test-suite name="SucceedsWithGoodValues" executed="True" success="True" time="0.000" asserts="0">
                                <results>
                                  <test-case name="NUnit.Framework.Constraints.Tests.InstanceOfTypeTest.SucceedsWithGoodValues(NUnit.Framework.Constraints.Tests.D1)" executed="True" success="True" time="0.000" asserts="1" />
                                  <test-case name="NUnit.Framework.Constraints.Tests.InstanceOfTypeTest.SucceedsWithGoodValues(NUnit.Framework.Constraints.Tests.D2)" executed="True" success="True" time="0.000" asserts="1" />
                                </results>
                              </test-suite>
                            </results>
                          </test-suite>
                          <test-suite name="LessThanOrEqualTest" executed="True" success="True" time="0.000" asserts="0">
                            <results>
                              <test-case name="NUnit.Framework.Constraints.Tests.LessThanOrEqualTest.CanCompareIComparables" executed="True" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Framework.Constraints.Tests.LessThanOrEqualTest.CanCompareIComparablesOfT" executed="True" success="True" time="0.000" asserts="1" />
                              <test-suite name="FailsWithBadValues" executed="True" success="True" time="0.000" asserts="0">
                                <results>
                                  <test-case name="NUnit.Framework.Constraints.Tests.LessThanOrEqualTest.FailsWithBadValues(6)" executed="True" success="True" time="0.000" asserts="1" />
                                </results>
                              </test-suite>
                              <test-suite name="InvalidDataThrowsArgumentException" executed="True" success="True" time="0.000" asserts="0">
                                <results>
                                  <test-case name="NUnit.Framework.Constraints.Tests.LessThanOrEqualTest.InvalidDataThrowsArgumentException(null)" executed="True" success="True" time="0.000" asserts="0" />
                                  <test-case name="NUnit.Framework.Constraints.Tests.LessThanOrEqualTest.InvalidDataThrowsArgumentException(&quot;xxx&quot;)" executed="True" success="True" time="0.000" asserts="0" />
                                </results>
                              </test-suite>
                              <test-case name="NUnit.Framework.Constraints.Tests.LessThanOrEqualTest.ProvidesProperDescription" executed="True" success="True" time="0.000" asserts="1" />
                              <test-suite name="ProvidesProperFailureMessage" executed="True" success="True" time="0.000" asserts="0">
                                <results>
                                  <test-case name="NUnit.Framework.Constraints.Tests.LessThanOrEqualTest.ProvidesProperFailureMessage(6,&quot;6&quot;)" executed="True" success="True" time="0.000" asserts="1" />
                                </results>
                              </test-suite>
                              <test-case name="NUnit.Framework.Constraints.Tests.LessThanOrEqualTest.ProvidesProperStringRepresentation" executed="True" success="True" time="0.000" asserts="1" />
                              <test-suite name="SucceedsWithGoodValues" executed="True" success="True" time="0.000" asserts="0">
                                <results>
                                  <test-case name="NUnit.Framework.Constraints.Tests.LessThanOrEqualTest.SucceedsWithGoodValues(4)" executed="True" success="True" time="0.000" asserts="1" />
                                  <test-case name="NUnit.Framework.Constraints.Tests.LessThanOrEqualTest.SucceedsWithGoodValues(5)" executed="True" success="True" time="0.000" asserts="1" />
                                </results>
                              </test-suite>
                              <test-case name="NUnit.Framework.Constraints.Tests.LessThanOrEqualTest.UsesProvidedComparerOfT" executed="True" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Framework.Constraints.Tests.LessThanOrEqualTest.UsesProvidedComparisonOfT" executed="True" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Framework.Constraints.Tests.LessThanOrEqualTest.UsesProvidedIComparer" executed="True" success="True" time="0.000" asserts="1" />
                            </results>
                          </test-suite>
                          <test-suite name="LessThanTest" executed="True" success="True" time="0.016" asserts="0">
                            <results>
                              <test-case name="NUnit.Framework.Constraints.Tests.LessThanTest.CanCompareIComparables" executed="True" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Framework.Constraints.Tests.LessThanTest.CanCompareIComparablesOfT" executed="True" success="True" time="0.000" asserts="1" />
                              <test-suite name="FailsWithBadValues" executed="True" success="True" time="0.000" asserts="0">
                                <results>
                                  <test-case name="NUnit.Framework.Constraints.Tests.LessThanTest.FailsWithBadValues(6)" executed="True" success="True" time="0.000" asserts="1" />
                                  <test-case name="NUnit.Framework.Constraints.Tests.LessThanTest.FailsWithBadValues(5)" executed="True" success="True" time="0.000" asserts="1" />
                                </results>
                              </test-suite>
                              <test-suite name="InvalidDataThrowsArgumentException" executed="True" success="True" time="0.000" asserts="0">
                                <results>
                                  <test-case name="NUnit.Framework.Constraints.Tests.LessThanTest.InvalidDataThrowsArgumentException(null)" executed="True" success="True" time="0.000" asserts="0" />
                                  <test-case name="NUnit.Framework.Constraints.Tests.LessThanTest.InvalidDataThrowsArgumentException(&quot;xxx&quot;)" executed="True" success="True" time="0.000" asserts="0" />
                                </results>
                              </test-suite>
                              <test-case name="NUnit.Framework.Constraints.Tests.LessThanTest.ProvidesProperDescription" executed="True" success="True" time="0.000" asserts="1" />
                              <test-suite name="ProvidesProperFailureMessage" executed="True" success="True" time="0.000" asserts="0">
                                <results>
                                  <test-case name="NUnit.Framework.Constraints.Tests.LessThanTest.ProvidesProperFailureMessage(6,&quot;6&quot;)" executed="True" success="True" time="0.000" asserts="1" />
                                  <test-case name="NUnit.Framework.Constraints.Tests.LessThanTest.ProvidesProperFailureMessage(5,&quot;5&quot;)" executed="True" success="True" time="0.000" asserts="1" />
                                </results>
                              </test-suite>
                              <test-case name="NUnit.Framework.Constraints.Tests.LessThanTest.ProvidesProperStringRepresentation" executed="True" success="True" time="0.000" asserts="1" />
                              <test-suite name="SucceedsWithGoodValues" executed="True" success="True" time="0.000" asserts="0">
                                <results>
                                  <test-case name="NUnit.Framework.Constraints.Tests.LessThanTest.SucceedsWithGoodValues(4)" executed="True" success="True" time="0.000" asserts="1" />
                                  <test-case name="NUnit.Framework.Constraints.Tests.LessThanTest.SucceedsWithGoodValues(4.999d)" executed="True" success="True" time="0.000" asserts="1" />
                                </results>
                              </test-suite>
                              <test-case name="NUnit.Framework.Constraints.Tests.LessThanTest.UsesProvidedComparerOfT" executed="True" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Framework.Constraints.Tests.LessThanTest.UsesProvidedComparisonOfT" executed="True" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Framework.Constraints.Tests.LessThanTest.UsesProvidedIComparer" executed="True" success="True" time="0.000" asserts="1" />
                            </results>
                          </test-suite>
                          <test-suite name="MsgUtilTests" executed="True" success="True" time="0.000" asserts="0">
                            <results>
                              <test-case name="NUnit.Framework.Constraints.Tests.MsgUtilTests.ClipExpectedAndActual_StringsDoNotFitInLine" executed="True" success="True" time="0.000" asserts="4" />
                              <test-case name="NUnit.Framework.Constraints.Tests.MsgUtilTests.ClipExpectedAndActual_StringsFitInLine" executed="True" success="True" time="0.000" asserts="4" />
                              <test-case name="NUnit.Framework.Constraints.Tests.MsgUtilTests.ClipExpectedAndActual_StringTailsFitInLine" executed="True" success="True" time="0.000" asserts="1" />
                              <test-suite name="EscapeControlCharsTest" executed="True" success="True" time="0.000" asserts="0">
                                <results>
                                  <test-case name="NUnit.Framework.Constraints.Tests.MsgUtilTests.EscapeControlCharsTest(&quot;\0&quot;,&quot;\\0&quot;)" executed="True" success="True" time="0.000" asserts="1" />
                                  <test-case name="NUnit.Framework.Constraints.Tests.MsgUtilTests.EscapeControlCharsTest(&quot;\\r\\n&quot;,&quot;\\\\r\\\\n&quot;)" executed="True" success="True" time="0.000" asserts="1" />
                                  <test-case name="NUnit.Framework.Constraints.Tests.MsgUtilTests.EscapeControlCharsTest(&quot;\n\n\n&quot;,&quot;\\n\\n\\n&quot;)" executed="True" success="True" time="0.000" asserts="1" />
                                  <test-case name="NUnit.Framework.Constraints.Tests.MsgUtilTests.EscapeControlCharsTest(&quot;\r\r&quot;,&quot;\\r\\r&quot;)" executed="True" success="True" time="0.000" asserts="1" />
                                  <test-case name="NUnit.Framework.Constraints.Tests.MsgUtilTests.EscapeControlCharsTest(&quot;\r\r\r&quot;,&quot;\\r\\r\\r&quot;)" executed="True" success="True" time="0.000" asserts="1" />
                                  <test-case name="NUnit.Framework.Constraints.Tests.MsgUtilTests.EscapeControlCharsTest(&quot;\r\n&quot;,&quot;\\r\\n&quot;)" executed="True" success="True" time="0.000" asserts="1" />
                                  <test-case name="NUnit.Framework.Constraints.Tests.MsgUtilTests.EscapeControlCharsTest(&quot;\n\r&quot;,&quot;\\n\\r&quot;)" executed="True" success="True" time="0.000" asserts="1" />
                                  <test-case name="NUnit.Framework.Constraints.Tests.MsgUtilTests.EscapeControlCharsTest(&quot;This is a\rtest message&quot;,&quot;This is a\\rtest message&quot;)" executed="True" success="True" time="0.000" asserts="1" />
                                  <test-case name="NUnit.Framework.Constraints.Tests.MsgUtilTests.EscapeControlCharsTest(&quot;&quot;,&quot;&quot;)" executed="True" success="True" time="0.000" asserts="1" />
                                  <test-case name="NUnit.Framework.Constraints.Tests.MsgUtilTests.EscapeControlCharsTest(null,null)" executed="True" success="True" time="0.000" asserts="1" />
                                  <test-case name="NUnit.Framework.Constraints.Tests.MsgUtilTests.EscapeControlCharsTest(&quot;\t&quot;,&quot;\\t&quot;)" executed="True" success="True" time="0.000" asserts="1" />
                                  <test-case name="NUnit.Framework.Constraints.Tests.MsgUtilTests.EscapeControlCharsTest(&quot;\t\n&quot;,&quot;\\t\\n&quot;)" executed="True" success="True" time="0.000" asserts="1" />
                                  <test-case name="NUnit.Framework.Constraints.Tests.MsgUtilTests.EscapeControlCharsTest(&quot;\a&quot;,&quot;\\a&quot;)" executed="True" success="True" time="0.000" asserts="1" />
                                  <test-case name="NUnit.Framework.Constraints.Tests.MsgUtilTests.EscapeControlCharsTest(&quot;\n\n&quot;,&quot;\\n\\n&quot;)" executed="True" success="True" time="0.000" asserts="1" />
                                  <test-case name="NUnit.Framework.Constraints.Tests.MsgUtilTests.EscapeControlCharsTest(&quot;\b&quot;,&quot;\\b&quot;)" executed="True" success="True" time="0.000" asserts="1" />
                                  <test-case name="NUnit.Framework.Constraints.Tests.MsgUtilTests.EscapeControlCharsTest(&quot;\f&quot;,&quot;\\f&quot;)" executed="True" success="True" time="0.000" asserts="1" />
                                  <test-case name="NUnit.Framework.Constraints.Tests.MsgUtilTests.EscapeControlCharsTest(&quot;\v&quot;,&quot;\\v&quot;)" executed="True" success="True" time="0.000" asserts="1" />
                                  <test-case name="NUnit.Framework.Constraints.Tests.MsgUtilTests.EscapeControlCharsTest(&quot;\x0085&quot;,&quot;\\x0085&quot;)" description="Next line character" executed="True" success="True" time="0.000" asserts="1" />
                                  <test-case name="NUnit.Framework.Constraints.Tests.MsgUtilTests.EscapeControlCharsTest(&quot;\x2028&quot;,&quot;\\x2028&quot;)" description="Line separator character" executed="True" success="True" time="0.000" asserts="1" />
                                  <test-case name="NUnit.Framework.Constraints.Tests.MsgUtilTests.EscapeControlCharsTest(&quot;\x2029&quot;,&quot;\\x2029&quot;)" description="Paragraph separator character" executed="True" success="True" time="0.000" asserts="1" />
                                  <test-case name="NUnit.Framework.Constraints.Tests.MsgUtilTests.EscapeControlCharsTest(&quot;\r&quot;,&quot;\\r&quot;)" executed="True" success="True" time="0.000" asserts="1" />
                                  <test-case name="NUnit.Framework.Constraints.Tests.MsgUtilTests.EscapeControlCharsTest(&quot;\n&quot;,&quot;\\n&quot;)" executed="True" success="True" time="0.000" asserts="1" />
                                </results>
                              </test-suite>
                              <test-suite name="TestClipString" executed="True" success="True" time="0.000" asserts="0">
                                <results>
                                  <test-case name="NUnit.Framework.Constraints.Tests.MsgUtilTests.NoClippingNeeded" executed="True" success="True" time="0.000" asserts="1" />
                                  <test-case name="NUnit.Framework.Constraints.Tests.MsgUtilTests.ClipAtEnd" executed="True" success="True" time="0.000" asserts="1" />
                                  <test-case name="NUnit.Framework.Constraints.Tests.MsgUtilTests.ClipAtStart" executed="True" success="True" time="0.000" asserts="1" />
                                  <test-case name="NUnit.Framework.Constraints.Tests.MsgUtilTests.ClipAtStartAndEnd" executed="True" success="True" time="0.000" asserts="1" />
                                </results>
                              </test-suite>
                            </results>
                          </test-suite>
                          <test-suite name="NaNConstraintTest" executed="True" success="True" time="0.000" asserts="0">
                            <results>
                              <test-suite name="FailsWithBadValues" executed="True" success="True" time="0.000" asserts="0">
                                <results>
                                  <test-case name="NUnit.Framework.Constraints.Tests.NaNConstraintTest.FailsWithBadValues(null)" executed="True" success="True" time="0.000" asserts="1" />
                                  <test-case name="NUnit.Framework.Constraints.Tests.NaNConstraintTest.FailsWithBadValues(&quot;hello&quot;)" executed="True" success="True" time="0.000" asserts="1" />
                                  <test-case name="NUnit.Framework.Constraints.Tests.NaNConstraintTest.FailsWithBadValues(42)" executed="True" success="True" time="0.000" asserts="1" />
                                  <test-case name="NUnit.Framework.Constraints.Tests.NaNConstraintTest.FailsWithBadValues(double.PositiveInfinity)" executed="True" success="True" time="0.000" asserts="1" />
                                  <test-case name="NUnit.Framework.Constraints.Tests.NaNConstraintTest.FailsWithBadValues(double.NegativeInfinity)" executed="True" success="True" time="0.000" asserts="1" />
                                  <test-case name="NUnit.Framework.Constraints.Tests.NaNConstraintTest.FailsWithBadValues(float.PositiveInfinity)" executed="True" success="True" time="0.000" asserts="1" />
                                  <test-case name="NUnit.Framework.Constraints.Tests.NaNConstraintTest.FailsWithBadValues(float.NegativeInfinity)" executed="True" success="True" time="0.000" asserts="1" />
                                </results>
                              </test-suite>
                              <test-case name="NUnit.Framework.Constraints.Tests.NaNConstraintTest.ProvidesProperDescription" executed="True" success="True" time="0.000" asserts="1" />
                              <test-suite name="ProvidesProperFailureMessage" executed="True" success="True" time="0.000" asserts="0">
                                <results>
                                  <test-case name="NUnit.Framework.Constraints.Tests.NaNConstraintTest.ProvidesProperFailureMessage(null,&quot;null&quot;)" executed="True" success="True" time="0.000" asserts="1" />
                                  <test-case name="NUnit.Framework.Constraints.Tests.NaNConstraintTest.ProvidesProperFailureMessage(&quot;hello&quot;,&quot;\&quot;hello\&quot;&quot;)" executed="True" success="True" time="0.000" asserts="1" />
                                  <test-case name="NUnit.Framework.Constraints.Tests.NaNConstraintTest.ProvidesProperFailureMessage(42,&quot;42&quot;)" executed="True" success="True" time="0.000" asserts="1" />
                                  <test-case name="NUnit.Framework.Constraints.Tests.NaNConstraintTest.ProvidesProperFailureMessage(double.PositiveInfinity,&quot;Infinity&quot;)" executed="True" success="True" time="0.000" asserts="1" />
                                  <test-case name="NUnit.Framework.Constraints.Tests.NaNConstraintTest.ProvidesProperFailureMessage(double.NegativeInfinity,&quot;-Infinity&quot;)" executed="True" success="True" time="0.000" asserts="1" />
                                  <test-case name="NUnit.Framework.Constraints.Tests.NaNConstraintTest.ProvidesProperFailureMessage(float.PositiveInfinity,&quot;Infinity&quot;)" executed="True" success="True" time="0.000" asserts="1" />
                                  <test-case name="NUnit.Framework.Constraints.Tests.NaNConstraintTest.ProvidesProperFailureMessage(float.NegativeInfinity,&quot;-Infinity&quot;)" executed="True" success="True" time="0.000" asserts="1" />
                                </results>
                              </test-suite>
                              <test-case name="NUnit.Framework.Constraints.Tests.NaNConstraintTest.ProvidesProperStringRepresentation" executed="True" success="True" time="0.000" asserts="1" />
                              <test-suite name="SucceedsWithGoodValues" executed="True" success="True" time="0.000" asserts="0">
                                <results>
                                  <test-case name="NUnit.Framework.Constraints.Tests.NaNConstraintTest.SucceedsWithGoodValues(double.NaN)" executed="True" success="True" time="0.000" asserts="1" />
                                  <test-case name="NUnit.Framework.Constraints.Tests.NaNConstraintTest.SucceedsWithGoodValues(float.NaN)" executed="True" success="True" time="0.000" asserts="1" />
                                </results>
                              </test-suite>
                            </results>
                          </test-suite>
                          <test-suite name="NotTest" executed="True" success="True" time="0.125" asserts="0">
                            <results>
                              <test-case name="NUnit.Framework.Constraints.Tests.NotTest.CanUseNotOperator" executed="True" success="True" time="0.000" asserts="1" />
                              <test-suite name="FailsWithBadValues" executed="True" success="True" time="0.000" asserts="0">
                                <results>
                                  <test-case name="NUnit.Framework.Constraints.Tests.NotTest.FailsWithBadValues(null)" executed="True" success="True" time="0.000" asserts="1" />
                                </results>
                              </test-suite>
                              <test-case name="NUnit.Framework.Constraints.Tests.NotTest.NotHonorsIgnoreCaseUsingConstructors" executed="True" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Framework.Constraints.Tests.NotTest.NotHonorsIgnoreCaseUsingPrefixNotation" executed="True" success="True" time="0.109" asserts="1" />
                              <test-case name="NUnit.Framework.Constraints.Tests.NotTest.NotHonorsTolerance" executed="True" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Framework.Constraints.Tests.NotTest.ProvidesProperDescription" executed="True" success="True" time="0.000" asserts="1" />
                              <test-suite name="ProvidesProperFailureMessage" executed="True" success="True" time="0.000" asserts="0">
                                <results>
                                  <test-case name="NUnit.Framework.Constraints.Tests.NotTest.ProvidesProperFailureMessage(null,&quot;null&quot;)" executed="True" success="True" time="0.000" asserts="1" />
                                </results>
                              </test-suite>
                              <test-case name="NUnit.Framework.Constraints.Tests.NotTest.ProvidesProperStringRepresentation" executed="True" success="True" time="0.000" asserts="1" />
                              <test-suite name="SucceedsWithGoodValues" executed="True" success="True" time="0.000" asserts="0">
                                <results>
                                  <test-case name="NUnit.Framework.Constraints.Tests.NotTest.SucceedsWithGoodValues(42)" executed="True" success="True" time="0.000" asserts="1" />
                                  <test-case name="NUnit.Framework.Constraints.Tests.NotTest.SucceedsWithGoodValues(&quot;Hello&quot;)" executed="True" success="True" time="0.000" asserts="1" />
                                </results>
                              </test-suite>
                            </results>
                          </test-suite>
                          <test-suite name="NullConstraintTest" executed="True" success="True" time="0.000" asserts="0">
                            <results>
                              <test-suite name="FailsWithBadValues" executed="True" success="True" time="0.000" asserts="0">
                                <results>
                                  <test-case name="NUnit.Framework.Constraints.Tests.NullConstraintTest.FailsWithBadValues(&quot;hello&quot;)" executed="True" success="True" time="0.000" asserts="1" />
                                </results>
                              </test-suite>
                              <test-case name="NUnit.Framework.Constraints.Tests.NullConstraintTest.ProvidesProperDescription" executed="True" success="True" time="0.000" asserts="1" />
                              <test-suite name="ProvidesProperFailureMessage" executed="True" success="True" time="0.000" asserts="0">
                                <results>
                                  <test-case name="NUnit.Framework.Constraints.Tests.NullConstraintTest.ProvidesProperFailureMessage(&quot;hello&quot;,&quot;\&quot;hello\&quot;&quot;)" executed="True" success="True" time="0.000" asserts="1" />
                                </results>
                              </test-suite>
                              <test-case name="NUnit.Framework.Constraints.Tests.NullConstraintTest.ProvidesProperStringRepresentation" executed="True" success="True" time="0.000" asserts="1" />
                              <test-suite name="SucceedsWithGoodValues" executed="True" success="True" time="0.000" asserts="0">
                                <results>
                                  <test-case name="NUnit.Framework.Constraints.Tests.NullConstraintTest.SucceedsWithGoodValues(null)" executed="True" success="True" time="0.000" asserts="1" />
                                </results>
                              </test-suite>
                            </results>
                          </test-suite>
                          <test-suite name="NullOrEmptyStringConstraintTest" executed="True" success="True" time="0.000" asserts="0">
                            <results>
                              <test-suite name="FailsWithBadValues" executed="True" success="True" time="0.000" asserts="0">
                                <results>
                                  <test-case name="NUnit.Framework.Constraints.Tests.NullOrEmptyStringConstraintTest.FailsWithBadValues(&quot;Hello&quot;)" executed="True" success="True" time="0.000" asserts="1" />
                                </results>
                              </test-suite>
                              <test-suite name="InvalidDataThrowsArgumentException" executed="True" success="True" time="0.000" asserts="0">
                                <results>
                                  <test-case name="NUnit.Framework.Constraints.Tests.NullOrEmptyStringConstraintTest.InvalidDataThrowsArgumentException(5)" executed="True" success="True" time="0.000" asserts="0" />
                                </results>
                              </test-suite>
                              <test-case name="NUnit.Framework.Constraints.Tests.NullOrEmptyStringConstraintTest.ProvidesProperDescription" executed="True" success="True" time="0.000" asserts="1" />
                              <test-suite name="ProvidesProperFailureMessage" executed="True" success="True" time="0.000" asserts="0">
                                <results>
                                  <test-case name="NUnit.Framework.Constraints.Tests.NullOrEmptyStringConstraintTest.ProvidesProperFailureMessage(&quot;Hello&quot;,&quot;\&quot;Hello\&quot;&quot;)" executed="True" success="True" time="0.000" asserts="1" />
                                </results>
                              </test-suite>
                              <test-case name="NUnit.Framework.Constraints.Tests.NullOrEmptyStringConstraintTest.ProvidesProperStringRepresentation" executed="True" success="True" time="0.000" asserts="1" />
                              <test-suite name="SucceedsWithGoodValues" executed="True" success="True" time="0.000" asserts="0">
                                <results>
                                  <test-case name="NUnit.Framework.Constraints.Tests.NullOrEmptyStringConstraintTest.SucceedsWithGoodValues(&quot;&quot;)" executed="True" success="True" time="0.000" asserts="1" />
                                  <test-case name="NUnit.Framework.Constraints.Tests.NullOrEmptyStringConstraintTest.SucceedsWithGoodValues(null)" executed="True" success="True" time="0.000" asserts="1" />
                                </results>
                              </test-suite>
                            </results>
                          </test-suite>
                          <test-suite name="NumericsTest" executed="True" success="True" time="0.078" asserts="0">
                            <results>
                              <test-case name="NUnit.Framework.Constraints.Tests.NumericsTest.CanMatchDecimalWithoutToleranceMode" executed="True" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Framework.Constraints.Tests.NumericsTest.CanMatchDecimalWithPercentage" executed="True" success="True" time="0.000" asserts="3" />
                              <test-suite name="CanMatchIntegralsWithPercentage" executed="True" success="True" time="0.000" asserts="0">
                                <results>
                                  <test-case name="NUnit.Framework.Constraints.Tests.NumericsTest.CanMatchIntegralsWithPercentage(10500L)" executed="True" success="True" time="0.000" asserts="1" />
                                  <test-case name="NUnit.Framework.Constraints.Tests.NumericsTest.CanMatchIntegralsWithPercentage(10000L)" executed="True" success="True" time="0.000" asserts="1" />
                                  <test-case name="NUnit.Framework.Constraints.Tests.NumericsTest.CanMatchIntegralsWithPercentage(9500UL)" executed="True" success="True" time="0.000" asserts="1" />
                                  <test-case name="NUnit.Framework.Constraints.Tests.NumericsTest.CanMatchIntegralsWithPercentage(10500)" executed="True" success="True" time="0.000" asserts="1" />
                                  <test-case name="NUnit.Framework.Constraints.Tests.NumericsTest.CanMatchIntegralsWithPercentage(10000)" executed="True" success="True" time="0.000" asserts="1" />
                                  <test-case name="NUnit.Framework.Constraints.Tests.NumericsTest.CanMatchIntegralsWithPercentage(9500L)" executed="True" success="True" time="0.000" asserts="1" />
                                  <test-case name="NUnit.Framework.Constraints.Tests.NumericsTest.CanMatchIntegralsWithPercentage(10500UL)" executed="True" success="True" time="0.000" asserts="1" />
                                  <test-case name="NUnit.Framework.Constraints.Tests.NumericsTest.CanMatchIntegralsWithPercentage(9500)" executed="True" success="True" time="0.000" asserts="1" />
                                  <test-case name="NUnit.Framework.Constraints.Tests.NumericsTest.CanMatchIntegralsWithPercentage(10000UL)" executed="True" success="True" time="0.000" asserts="1" />
                                  <test-case name="NUnit.Framework.Constraints.Tests.NumericsTest.CanMatchIntegralsWithPercentage(10000)" executed="True" success="True" time="0.000" asserts="1" />
                                  <test-case name="NUnit.Framework.Constraints.Tests.NumericsTest.CanMatchIntegralsWithPercentage(10500)" executed="True" success="True" time="0.000" asserts="1" />
                                  <test-case name="NUnit.Framework.Constraints.Tests.NumericsTest.CanMatchIntegralsWithPercentage(9500)" executed="True" success="True" time="0.000" asserts="1" />
                                </results>
                              </test-suite>
                              <test-suite name="CanMatchWithoutToleranceMode" executed="True" success="True" time="0.000" asserts="0">
                                <results>
                                  <test-case name="NUnit.Framework.Constraints.Tests.NumericsTest.CanMatchWithoutToleranceMode(123456789UL)" executed="True" success="True" time="0.000" asserts="1" />
                                  <test-case name="NUnit.Framework.Constraints.Tests.NumericsTest.CanMatchWithoutToleranceMode(123456789L)" executed="True" success="True" time="0.000" asserts="1" />
                                  <test-case name="NUnit.Framework.Constraints.Tests.NumericsTest.CanMatchWithoutToleranceMode(123456789)" executed="True" success="True" time="0.000" asserts="1" />
                                  <test-case name="NUnit.Framework.Constraints.Tests.NumericsTest.CanMatchWithoutToleranceMode(123456789)" executed="True" success="True" time="0.000" asserts="1" />
                                  <test-case name="NUnit.Framework.Constraints.Tests.NumericsTest.CanMatchWithoutToleranceMode(1234.568f)" executed="True" success="True" time="0.000" asserts="1" />
                                  <test-case name="NUnit.Framework.Constraints.Tests.NumericsTest.CanMatchWithoutToleranceMode(1234.5678d)" executed="True" success="True" time="0.000" asserts="1" />
                                </results>
                              </test-suite>
                              <test-case name="NUnit.Framework.Constraints.Tests.NumericsTest.FailsOnDecimalAbovePercentage" executed="True" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Framework.Constraints.Tests.NumericsTest.FailsOnDecimalBelowPercentage" executed="True" success="True" time="0.063" asserts="1" />
                              <test-suite name="FailsOnIntegralsOutsideOfPercentage" executed="True" success="True" time="0.016" asserts="0">
                                <results>
                                  <test-case name="NUnit.Framework.Constraints.Tests.NumericsTest.FailsOnIntegralsOutsideOfPercentage(8500)" executed="True" success="True" time="0.000" asserts="1" />
                                  <test-case name="NUnit.Framework.Constraints.Tests.NumericsTest.FailsOnIntegralsOutsideOfPercentage(8500)" executed="True" success="True" time="0.000" asserts="1" />
                                  <test-case name="NUnit.Framework.Constraints.Tests.NumericsTest.FailsOnIntegralsOutsideOfPercentage(11500)" executed="True" success="True" time="0.000" asserts="1" />
                                  <test-case name="NUnit.Framework.Constraints.Tests.NumericsTest.FailsOnIntegralsOutsideOfPercentage(11500UL)" executed="True" success="True" time="0.016" asserts="1" />
                                  <test-case name="NUnit.Framework.Constraints.Tests.NumericsTest.FailsOnIntegralsOutsideOfPercentage(11500)" executed="True" success="True" time="0.000" asserts="1" />
                                  <test-case name="NUnit.Framework.Constraints.Tests.NumericsTest.FailsOnIntegralsOutsideOfPercentage(8500L)" executed="True" success="True" time="0.000" asserts="1" />
                                  <test-case name="NUnit.Framework.Constraints.Tests.NumericsTest.FailsOnIntegralsOutsideOfPercentage(11500L)" executed="True" success="True" time="0.000" asserts="1" />
                                  <test-case name="NUnit.Framework.Constraints.Tests.NumericsTest.FailsOnIntegralsOutsideOfPercentage(8500UL)" executed="True" success="True" time="0.000" asserts="1" />
                                </results>
                              </test-suite>
                            </results>
                          </test-suite>
                          <test-suite name="OrTest" executed="True" success="True" time="0.000" asserts="0">
                            <results>
                              <test-case name="NUnit.Framework.Constraints.Tests.OrTest.CanCombineTestsWithOrOperator" executed="True" success="True" time="0.000" asserts="1" />
                              <test-suite name="FailsWithBadValues" executed="True" success="True" time="0.000" asserts="0">
                                <results>
                                  <test-case name="NUnit.Framework.Constraints.Tests.OrTest.FailsWithBadValues(37)" executed="True" success="True" time="0.000" asserts="1" />
                                </results>
                              </test-suite>
                              <test-case name="NUnit.Framework.Constraints.Tests.OrTest.ProvidesProperDescription" executed="True" success="True" time="0.000" asserts="1" />
                              <test-suite name="ProvidesProperFailureMessage" executed="True" success="True" time="0.000" asserts="0">
                                <results>
                                  <test-case name="NUnit.Framework.Constraints.Tests.OrTest.ProvidesProperFailureMessage(37,&quot;37&quot;)" executed="True" success="True" time="0.000" asserts="1" />
                                </results>
                              </test-suite>
                              <test-case name="NUnit.Framework.Constraints.Tests.OrTest.ProvidesProperStringRepresentation" executed="True" success="True" time="0.000" asserts="1" />
                              <test-suite name="SucceedsWithGoodValues" executed="True" success="True" time="0.000" asserts="0">
                                <results>
                                  <test-case name="NUnit.Framework.Constraints.Tests.OrTest.SucceedsWithGoodValues(99)" executed="True" success="True" time="0.000" asserts="1" />
                                  <test-case name="NUnit.Framework.Constraints.Tests.OrTest.SucceedsWithGoodValues(42)" executed="True" success="True" time="0.000" asserts="1" />
                                </results>
                              </test-suite>
                            </results>
                          </test-suite>
                          <test-suite name="PropertyExistsTest" executed="True" success="True" time="0.000" asserts="0">
                            <results>
                              <test-suite name="FailsWithBadValues" executed="True" success="True" time="0.000" asserts="0">
                                <results>
                                  <test-case name="NUnit.Framework.Constraints.Tests.PropertyExistsTest.FailsWithBadValues(42)" executed="True" success="True" time="0.000" asserts="1" />
                                  <test-case name="NUnit.Framework.Constraints.Tests.PropertyExistsTest.FailsWithBadValues(System.Collections.ArrayList)" executed="True" success="True" time="0.000" asserts="1" />
                                  <test-case name="NUnit.Framework.Constraints.Tests.PropertyExistsTest.FailsWithBadValues(System.Int32)" executed="True" success="True" time="0.000" asserts="1" />
                                </results>
                              </test-suite>
                              <test-suite name="InvalidDataThrowsException" executed="True" success="True" time="0.000" asserts="0">
                                <results>
                                  <test-case name="NUnit.Framework.Constraints.Tests.PropertyExistsTest.InvalidDataThrowsException(null)" executed="True" success="True" time="0.000" asserts="0" />
                                </results>
                              </test-suite>
                              <test-case name="NUnit.Framework.Constraints.Tests.PropertyExistsTest.ProvidesProperDescription" executed="True" success="True" time="0.000" asserts="1" />
                              <test-suite name="ProvidesProperFailureMessage" executed="True" success="True" time="0.000" asserts="0">
                                <results>
                                  <test-case name="NUnit.Framework.Constraints.Tests.PropertyExistsTest.ProvidesProperFailureMessage(42,&quot;&lt;System.Int32&gt;&quot;)" executed="True" success="True" time="0.000" asserts="1" />
                                  <test-case name="NUnit.Framework.Constraints.Tests.PropertyExistsTest.ProvidesProperFailureMessage(System.Collections.ArrayList,&quot;&lt;System.Collections.ArrayList&gt;&quot;)" executed="True" success="True" time="0.000" asserts="1" />
                                  <test-case name="NUnit.Framework.Constraints.Tests.PropertyExistsTest.ProvidesProperFailureMessage(System.Int32,&quot;&lt;System.Int32&gt;&quot;)" executed="True" success="True" time="0.000" asserts="1" />
                                </results>
                              </test-suite>
                              <test-case name="NUnit.Framework.Constraints.Tests.PropertyExistsTest.ProvidesProperStringRepresentation" executed="True" success="True" time="0.000" asserts="1" />
                              <test-suite name="SucceedsWithGoodValues" executed="True" success="True" time="0.000" asserts="0">
                                <results>
                                  <test-case name="NUnit.Framework.Constraints.Tests.PropertyExistsTest.SucceedsWithGoodValues(System.Int32[])" executed="True" success="True" time="0.000" asserts="1" />
                                  <test-case name="NUnit.Framework.Constraints.Tests.PropertyExistsTest.SucceedsWithGoodValues(&quot;hello&quot;)" executed="True" success="True" time="0.000" asserts="1" />
                                  <test-case name="NUnit.Framework.Constraints.Tests.PropertyExistsTest.SucceedsWithGoodValues(System.Array)" executed="True" success="True" time="0.000" asserts="1" />
                                </results>
                              </test-suite>
                            </results>
                          </test-suite>
                          <test-suite name="PropertyTest" executed="True" success="True" time="0.047" asserts="0">
                            <results>
                              <test-suite name="FailsWithBadValues" executed="True" success="True" time="0.000" asserts="0">
                                <results>
                                  <test-case name="NUnit.Framework.Constraints.Tests.PropertyTest.FailsWithBadValues(System.Int32[])" executed="True" success="True" time="0.000" asserts="1" />
                                  <test-case name="NUnit.Framework.Constraints.Tests.PropertyTest.FailsWithBadValues(&quot;goodbye&quot;)" executed="True" success="True" time="0.000" asserts="1" />
                                </results>
                              </test-suite>
                              <test-suite name="InvalidDataThrowsException" executed="True" success="True" time="0.047" asserts="0">
                                <results>
                                  <test-case name="NUnit.Framework.Constraints.Tests.PropertyTest.InvalidDataThrowsException(null)" executed="True" success="True" time="0.000" asserts="0" />
                                  <test-case name="NUnit.Framework.Constraints.Tests.PropertyTest.InvalidDataThrowsException(42)" executed="True" success="True" time="0.000" asserts="0" />
                                  <test-case name="NUnit.Framework.Constraints.Tests.PropertyTest.InvalidDataThrowsException(System.Collections.ArrayList)" executed="True" success="True" time="0.031" asserts="0" />
                                </results>
                              </test-suite>
                              <test-case name="NUnit.Framework.Constraints.Tests.PropertyTest.ProvidesProperDescription" executed="True" success="True" time="0.000" asserts="1" />
                              <test-suite name="ProvidesProperFailureMessage" executed="True" success="True" time="0.000" asserts="0">
                                <results>
                                  <test-case name="NUnit.Framework.Constraints.Tests.PropertyTest.ProvidesProperFailureMessage(System.Int32[],&quot;3&quot;)" executed="True" success="True" time="0.000" asserts="1" />
                                  <test-case name="NUnit.Framework.Constraints.Tests.PropertyTest.ProvidesProperFailureMessage(&quot;goodbye&quot;,&quot;7&quot;)" executed="True" success="True" time="0.000" asserts="1" />
                                </results>
                              </test-suite>
                              <test-case name="NUnit.Framework.Constraints.Tests.PropertyTest.ProvidesProperStringRepresentation" executed="True" success="True" time="0.000" asserts="1" />
                              <test-suite name="SucceedsWithGoodValues" executed="True" success="True" time="0.000" asserts="0">
                                <results>
                                  <test-case name="NUnit.Framework.Constraints.Tests.PropertyTest.SucceedsWithGoodValues(System.Int32[])" executed="True" success="True" time="0.000" asserts="1" />
                                  <test-case name="NUnit.Framework.Constraints.Tests.PropertyTest.SucceedsWithGoodValues(&quot;hello&quot;)" executed="True" success="True" time="0.000" asserts="1" />
                                </results>
                              </test-suite>
                            </results>
                          </test-suite>
                          <test-suite name="RangeConstraintTest" executed="True" success="True" time="0.031" asserts="0">
                            <results>
                              <test-suite name="FailsWithBadValues" executed="True" success="True" time="0.016" asserts="0">
                                <results>
                                  <test-case name="NUnit.Framework.Constraints.Tests.RangeConstraintTest.FailsWithBadValues(4)" executed="True" success="True" time="0.000" asserts="1" />
                                  <test-case name="NUnit.Framework.Constraints.Tests.RangeConstraintTest.FailsWithBadValues(43)" executed="True" success="True" time="0.000" asserts="1" />
                                </results>
                              </test-suite>
                              <test-suite name="InvalidDataThrowsArgumentException" executed="True" success="True" time="0.016" asserts="0">
                                <results>
                                  <test-case name="NUnit.Framework.Constraints.Tests.RangeConstraintTest.InvalidDataThrowsArgumentException(null)" executed="True" success="True" time="0.000" asserts="0" />
                                  <test-case name="NUnit.Framework.Constraints.Tests.RangeConstraintTest.InvalidDataThrowsArgumentException(&quot;xxx&quot;)" executed="True" success="True" time="0.000" asserts="0" />
                                </results>
                              </test-suite>
                              <test-case name="NUnit.Framework.Constraints.Tests.RangeConstraintTest.ProvidesProperDescription" executed="True" success="True" time="0.000" asserts="1" />
                              <test-suite name="ProvidesProperFailureMessage" executed="True" success="True" time="0.000" asserts="0">
                                <results>
                                  <test-case name="NUnit.Framework.Constraints.Tests.RangeConstraintTest.ProvidesProperFailureMessage(4,&quot;4&quot;)" executed="True" success="True" time="0.000" asserts="1" />
                                  <test-case name="NUnit.Framework.Constraints.Tests.RangeConstraintTest.ProvidesProperFailureMessage(43,&quot;43&quot;)" executed="True" success="True" time="0.000" asserts="1" />
                                </results>
                              </test-suite>
                              <test-case name="NUnit.Framework.Constraints.Tests.RangeConstraintTest.ProvidesProperStringRepresentation" executed="True" success="True" time="0.000" asserts="1" />
                              <test-suite name="SucceedsWithGoodValues" executed="True" success="True" time="0.000" asserts="0">
                                <results>
                                  <test-case name="NUnit.Framework.Constraints.Tests.RangeConstraintTest.SucceedsWithGoodValues(5)" executed="True" success="True" time="0.000" asserts="1" />
                                  <test-case name="NUnit.Framework.Constraints.Tests.RangeConstraintTest.SucceedsWithGoodValues(23)" executed="True" success="True" time="0.000" asserts="1" />
                                  <test-case name="NUnit.Framework.Constraints.Tests.RangeConstraintTest.SucceedsWithGoodValues(42)" executed="True" success="True" time="0.000" asserts="1" />
                                </results>
                              </test-suite>
                              <test-case name="NUnit.Framework.Constraints.Tests.RangeConstraintTest.UsesProvidedComparerOfT" executed="True" success="True" time="0.000" asserts="2" />
                              <test-case name="NUnit.Framework.Constraints.Tests.RangeConstraintTest.UsesProvidedComparisonOfT" executed="True" success="True" time="0.000" asserts="2" />
                              <test-case name="NUnit.Framework.Constraints.Tests.RangeConstraintTest.UsesProvidedIComparer" executed="True" success="True" time="0.000" asserts="2" />
                            </results>
                          </test-suite>
                          <test-suite name="SameAsTest" executed="True" success="True" time="0.000" asserts="0">
                            <results>
                              <test-suite name="FailsWithBadValues" executed="True" success="True" time="0.000" asserts="0">
                                <results>
                                  <test-case name="NUnit.Framework.Constraints.Tests.SameAsTest.FailsWithBadValues(System.Object)" executed="True" success="True" time="0.000" asserts="1" />
                                  <test-case name="NUnit.Framework.Constraints.Tests.SameAsTest.FailsWithBadValues(3)" executed="True" success="True" time="0.000" asserts="1" />
                                  <test-case name="NUnit.Framework.Constraints.Tests.SameAsTest.FailsWithBadValues(&quot;Hello&quot;)" executed="True" success="True" time="0.000" asserts="1" />
                                </results>
                              </test-suite>
                              <test-case name="NUnit.Framework.Constraints.Tests.SameAsTest.ProvidesProperDescription" executed="True" success="True" time="0.000" asserts="1" />
                              <test-suite name="ProvidesProperFailureMessage" executed="True" success="True" time="0.000" asserts="0">
                                <results>
                                  <test-case name="NUnit.Framework.Constraints.Tests.SameAsTest.ProvidesProperFailureMessage(System.Object,&quot;&lt;System.Object&gt;&quot;)" executed="True" success="True" time="0.000" asserts="1" />
                                  <test-case name="NUnit.Framework.Constraints.Tests.SameAsTest.ProvidesProperFailureMessage(3,&quot;3&quot;)" executed="True" success="True" time="0.000" asserts="1" />
                                  <test-case name="NUnit.Framework.Constraints.Tests.SameAsTest.ProvidesProperFailureMessage(&quot;Hello&quot;,&quot;\&quot;Hello\&quot;&quot;)" executed="True" success="True" time="0.000" asserts="1" />
                                </results>
                              </test-suite>
                              <test-case name="NUnit.Framework.Constraints.Tests.SameAsTest.ProvidesProperStringRepresentation" executed="True" success="True" time="0.000" asserts="1" />
                              <test-suite name="SucceedsWithGoodValues" executed="True" success="True" time="0.000" asserts="0">
                                <results>
                                  <test-case name="NUnit.Framework.Constraints.Tests.SameAsTest.SucceedsWithGoodValues(System.Object)" executed="True" success="True" time="0.000" asserts="1" />
                                </results>
                              </test-suite>
                            </results>
                          </test-suite>
                          <test-suite name="SamePathOrUnderTest_Linux" executed="True" success="True" time="0.000" asserts="0">
                            <results>
                              <test-suite name="FailsWithBadValues" executed="True" success="True" time="0.000" asserts="0">
                                <results>
                                  <test-case name="NUnit.Framework.Constraints.Tests.SamePathOrUnderTest_Linux.FailsWithBadValues(123)" executed="True" success="True" time="0.000" asserts="1" />
                                  <test-case name="NUnit.Framework.Constraints.Tests.SamePathOrUnderTest_Linux.FailsWithBadValues(&quot;/Folder1/Folder2&quot;)" executed="True" success="True" time="0.000" asserts="1" />
                                  <test-case name="NUnit.Framework.Constraints.Tests.SamePathOrUnderTest_Linux.FailsWithBadValues(&quot;/FOLDER1/./junk/../Folder2&quot;)" executed="True" success="True" time="0.000" asserts="1" />
                                  <test-case name="NUnit.Framework.Constraints.Tests.SamePathOrUnderTest_Linux.FailsWithBadValues(&quot;/FOLDER1/./junk/../Folder2/temp/../Folder3&quot;)" executed="True" success="True" time="0.000" asserts="1" />
                                  <test-case name="NUnit.Framework.Constraints.Tests.SamePathOrUnderTest_Linux.FailsWithBadValues(&quot;/folder1/folder3&quot;)" executed="True" success="True" time="0.000" asserts="1" />
                                  <test-case name="NUnit.Framework.Constraints.Tests.SamePathOrUnderTest_Linux.FailsWithBadValues(&quot;/folder1/./folder2/../folder3&quot;)" executed="True" success="True" time="0.000" asserts="1" />
                                  <test-case name="NUnit.Framework.Constraints.Tests.SamePathOrUnderTest_Linux.FailsWithBadValues(&quot;/folder1&quot;)" executed="True" success="True" time="0.000" asserts="1" />
                                </results>
                              </test-suite>
                              <test-case name="NUnit.Framework.Constraints.Tests.SamePathOrUnderTest_Linux.ProvidesProperDescription" executed="True" success="True" time="0.000" asserts="1" />
                              <test-suite name="ProvidesProperFailureMessage" executed="True" success="True" time="0.000" asserts="0">
                                <results>
                                  <test-case name="NUnit.Framework.Constraints.Tests.SamePathOrUnderTest_Linux.ProvidesProperFailureMessage(123,&quot;123&quot;)" executed="True" success="True" time="0.000" asserts="1" />
                                  <test-case name="NUnit.Framework.Constraints.Tests.SamePathOrUnderTest_Linux.ProvidesProperFailureMessage(&quot;/Folder1/Folder2&quot;,&quot;\&quot;/Folder1/Folder2\&quot;&quot;)" executed="True" success="True" time="0.000" asserts="1" />
                                  <test-case name="NUnit.Framework.Constraints.Tests.SamePathOrUnderTest_Linux.ProvidesProperFailureMessage(&quot;/FOLDER1/./junk/../Folder2&quot;,&quot;\&quot;/FOLDER1/./junk/../Folder2\&quot;&quot;)" executed="True" success="True" time="0.000" asserts="1" />
                                  <test-case name="NUnit.Framework.Constraints.Tests.SamePathOrUnderTest_Linux.ProvidesProperFailureMessage(&quot;/FOLDER1/./junk/../Folder2/temp/../Folder3&quot;,&quot;\&quot;/FOLDER1/./junk/../Folder2/temp/../Folder3\&quot;&quot;)" executed="True" success="True" time="0.000" asserts="1" />
                                  <test-case name="NUnit.Framework.Constraints.Tests.SamePathOrUnderTest_Linux.ProvidesProperFailureMessage(&quot;/folder1/folder3&quot;,&quot;\&quot;/folder1/folder3\&quot;&quot;)" executed="True" success="True" time="0.000" asserts="1" />
                                  <test-case name="NUnit.Framework.Constraints.Tests.SamePathOrUnderTest_Linux.ProvidesProperFailureMessage(&quot;/folder1/./folder2/../folder3&quot;,&quot;\&quot;/folder1/./folder2/../folder3\&quot;&quot;)" executed="True" success="True" time="0.000" asserts="1" />
                                  <test-case name="NUnit.Framework.Constraints.Tests.SamePathOrUnderTest_Linux.ProvidesProperFailureMessage(&quot;/folder1&quot;,&quot;\&quot;/folder1\&quot;&quot;)" executed="True" success="True" time="0.000" asserts="1" />
                                </results>
                              </test-suite>
                              <test-case name="NUnit.Framework.Constraints.Tests.SamePathOrUnderTest_Linux.ProvidesProperStringRepresentation" executed="True" success="True" time="0.000" asserts="1" />
                              <test-suite name="SucceedsWithGoodValues" executed="True" success="True" time="0.000" asserts="0">
                                <results>
                                  <test-case name="NUnit.Framework.Constraints.Tests.SamePathOrUnderTest_Linux.SucceedsWithGoodValues(&quot;/folder1/folder2&quot;)" executed="True" success="True" time="0.000" asserts="1" />
                                  <test-case name="NUnit.Framework.Constraints.Tests.SamePathOrUnderTest_Linux.SucceedsWithGoodValues(&quot;/folder1/./folder2&quot;)" executed="True" success="True" time="0.000" asserts="1" />
                                  <test-case name="NUnit.Framework.Constraints.Tests.SamePathOrUnderTest_Linux.SucceedsWithGoodValues(&quot;/folder1/junk/../folder2&quot;)" executed="True" success="True" time="0.000" asserts="1" />
                                  <test-case name="NUnit.Framework.Constraints.Tests.SamePathOrUnderTest_Linux.SucceedsWithGoodValues(&quot;\\folder1\\folder2&quot;)" executed="True" success="True" time="0.000" asserts="1" />
                                  <test-case name="NUnit.Framework.Constraints.Tests.SamePathOrUnderTest_Linux.SucceedsWithGoodValues(&quot;/folder1/folder2/folder3&quot;)" executed="True" success="True" time="0.000" asserts="1" />
                                  <test-case name="NUnit.Framework.Constraints.Tests.SamePathOrUnderTest_Linux.SucceedsWithGoodValues(&quot;/folder1/./folder2/folder3&quot;)" executed="True" success="True" time="0.000" asserts="1" />
                                  <test-case name="NUnit.Framework.Constraints.Tests.SamePathOrUnderTest_Linux.SucceedsWithGoodValues(&quot;/folder1/junk/../folder2/folder3&quot;)" executed="True" success="True" time="0.000" asserts="1" />
                                  <test-case name="NUnit.Framework.Constraints.Tests.SamePathOrUnderTest_Linux.SucceedsWithGoodValues(&quot;\\folder1\\folder2\\folder3&quot;)" executed="True" success="True" time="0.000" asserts="1" />
                                </results>
                              </test-suite>
                            </results>
                          </test-suite>
                          <test-suite name="SamePathOrUnderTest_Windows" executed="True" success="True" time="0.000" asserts="0">
                            <results>
                              <test-suite name="FailsWithBadValues" executed="True" success="True" time="0.000" asserts="0">
                                <results>
                                  <test-case name="NUnit.Framework.Constraints.Tests.SamePathOrUnderTest_Windows.FailsWithBadValues(123)" executed="True" success="True" time="0.000" asserts="1" />
                                  <test-case name="NUnit.Framework.Constraints.Tests.SamePathOrUnderTest_Windows.FailsWithBadValues(&quot;C:\\folder1\\folder3&quot;)" executed="True" success="True" time="0.000" asserts="1" />
                                  <test-case name="NUnit.Framework.Constraints.Tests.SamePathOrUnderTest_Windows.FailsWithBadValues(&quot;C:\\folder1\\.\\folder2\\..\\file.temp&quot;)" executed="True" success="True" time="0.000" asserts="1" />
                                </results>
                              </test-suite>
                              <test-case name="NUnit.Framework.Constraints.Tests.SamePathOrUnderTest_Windows.ProvidesProperDescription" executed="True" success="True" time="0.000" asserts="1" />
                              <test-suite name="ProvidesProperFailureMessage" executed="True" success="True" time="0.000" asserts="0">
                                <results>
                                  <test-case name="NUnit.Framework.Constraints.Tests.SamePathOrUnderTest_Windows.ProvidesProperFailureMessage(123,&quot;123&quot;)" executed="True" success="True" time="0.000" asserts="1" />
                                  <test-case name="NUnit.Framework.Constraints.Tests.SamePathOrUnderTest_Windows.ProvidesProperFailureMessage(&quot;C:\\folder1\\folder3&quot;,&quot;\&quot;C:\\folder1\\folder3\&quot;&quot;)" executed="True" success="True" time="0.000" asserts="1" />
                                  <test-case name="NUnit.Framework.Constraints.Tests.SamePathOrUnderTest_Windows.ProvidesProperFailureMessage(&quot;C:\\folder1\\.\\folder2\\..\\file.temp&quot;,&quot;\&quot;C:\\folder1\\.\\folder2\\..\\file.temp\&quot;&quot;)" executed="True" success="True" time="0.000" asserts="1" />
                                </results>
                              </test-suite>
                              <test-case name="NUnit.Framework.Constraints.Tests.SamePathOrUnderTest_Windows.ProvidesProperStringRepresentation" executed="True" success="True" time="0.000" asserts="1" />
                              <test-suite name="SucceedsWithGoodValues" executed="True" success="True" time="0.000" asserts="0">
                                <results>
                                  <test-case name="NUnit.Framework.Constraints.Tests.SamePathOrUnderTest_Windows.SucceedsWithGoodValues(&quot;C:\\folder1\\folder2&quot;)" executed="True" success="True" time="0.000" asserts="1" />
                                  <test-case name="NUnit.Framework.Constraints.Tests.SamePathOrUnderTest_Windows.SucceedsWithGoodValues(&quot;C:\\Folder1\\Folder2&quot;)" executed="True" success="True" time="0.000" asserts="1" />
                                  <test-case name="NUnit.Framework.Constraints.Tests.SamePathOrUnderTest_Windows.SucceedsWithGoodValues(&quot;C:\\folder1\\.\\folder2&quot;)" executed="True" success="True" time="0.000" asserts="1" />
                                  <test-case name="NUnit.Framework.Constraints.Tests.SamePathOrUnderTest_Windows.SucceedsWithGoodValues(&quot;C:\\folder1\\junk\\..\\folder2&quot;)" executed="True" success="True" time="0.000" asserts="1" />
                                  <test-case name="NUnit.Framework.Constraints.Tests.SamePathOrUnderTest_Windows.SucceedsWithGoodValues(&quot;C:\\FOLDER1\\.\\junk\\..\\Folder2&quot;)" executed="True" success="True" time="0.000" asserts="1" />
                                  <test-case name="NUnit.Framework.Constraints.Tests.SamePathOrUnderTest_Windows.SucceedsWithGoodValues(&quot;C:/folder1/folder2&quot;)" executed="True" success="True" time="0.000" asserts="1" />
                                  <test-case name="NUnit.Framework.Constraints.Tests.SamePathOrUnderTest_Windows.SucceedsWithGoodValues(&quot;C:\\folder1\\folder2\\folder3&quot;)" executed="True" success="True" time="0.000" asserts="1" />
                                  <test-case name="NUnit.Framework.Constraints.Tests.SamePathOrUnderTest_Windows.SucceedsWithGoodValues(&quot;C:\\folder1\\.\\folder2\\folder3&quot;)" executed="True" success="True" time="0.000" asserts="1" />
                                  <test-case name="NUnit.Framework.Constraints.Tests.SamePathOrUnderTest_Windows.SucceedsWithGoodValues(&quot;C:\\folder1\\junk\\..\\folder2\\folder3&quot;)" executed="True" success="True" time="0.000" asserts="1" />
                                  <test-case name="NUnit.Framework.Constraints.Tests.SamePathOrUnderTest_Windows.SucceedsWithGoodValues(&quot;C:\\FOLDER1\\.\\junk\\..\\Folder2\\temp\\..\\Folder3&quot;)" executed="True" success="True" time="0.000" asserts="1" />
                                  <test-case name="NUnit.Framework.Constraints.Tests.SamePathOrUnderTest_Windows.SucceedsWithGoodValues(&quot;C:/folder1/folder2/folder3&quot;)" executed="True" success="True" time="0.000" asserts="1" />
                                </results>
                              </test-suite>
                            </results>
                          </test-suite>
                          <test-suite name="SamePathTest_Linux" executed="True" success="True" time="0.000" asserts="0">
                            <results>
                              <test-suite name="FailsWithBadValues" executed="True" success="True" time="0.000" asserts="0">
                                <results>
                                  <test-case name="NUnit.Framework.Constraints.Tests.SamePathTest_Linux.FailsWithBadValues(123)" executed="True" success="True" time="0.000" asserts="1" />
                                  <test-case name="NUnit.Framework.Constraints.Tests.SamePathTest_Linux.FailsWithBadValues(&quot;/folder2/file.tmp&quot;)" executed="True" success="True" time="0.000" asserts="1" />
                                  <test-case name="NUnit.Framework.Constraints.Tests.SamePathTest_Linux.FailsWithBadValues(&quot;/folder1/./folder2/../file.temp&quot;)" executed="True" success="True" time="0.000" asserts="1" />
                                  <test-case name="NUnit.Framework.Constraints.Tests.SamePathTest_Linux.FailsWithBadValues(&quot;/Folder1/File.TMP&quot;)" executed="True" success="True" time="0.000" asserts="1" />
                                  <test-case name="NUnit.Framework.Constraints.Tests.SamePathTest_Linux.FailsWithBadValues(&quot;/FOLDER1/./folder2/../File.TMP&quot;)" executed="True" success="True" time="0.000" asserts="1" />
                                </results>
                              </test-suite>
                              <test-case name="NUnit.Framework.Constraints.Tests.SamePathTest_Linux.ProvidesProperDescription" executed="True" success="True" time="0.000" asserts="1" />
                              <test-suite name="ProvidesProperFailureMessage" executed="True" success="True" time="0.000" asserts="0">
                                <results>
                                  <test-case name="NUnit.Framework.Constraints.Tests.SamePathTest_Linux.ProvidesProperFailureMessage(123,&quot;123&quot;)" executed="True" success="True" time="0.000" asserts="1" />
                                  <test-case name="NUnit.Framework.Constraints.Tests.SamePathTest_Linux.ProvidesProperFailureMessage(&quot;/folder2/file.tmp&quot;,&quot;\&quot;/folder2/file.tmp\&quot;&quot;)" executed="True" success="True" time="0.000" asserts="1" />
                                  <test-case name="NUnit.Framework.Constraints.Tests.SamePathTest_Linux.ProvidesProperFailureMessage(&quot;/folder1/./folder2/../file.temp&quot;,&quot;\&quot;/folder1/./folder2/../file.temp\&quot;&quot;)" executed="True" success="True" time="0.000" asserts="1" />
                                  <test-case name="NUnit.Framework.Constraints.Tests.SamePathTest_Linux.ProvidesProperFailureMessage(&quot;/Folder1/File.TMP&quot;,&quot;\&quot;/Folder1/File.TMP\&quot;&quot;)" executed="True" success="True" time="0.000" asserts="1" />
                                  <test-case name="NUnit.Framework.Constraints.Tests.SamePathTest_Linux.ProvidesProperFailureMessage(&quot;/FOLDER1/./folder2/../File.TMP&quot;,&quot;\&quot;/FOLDER1/./folder2/../File.TMP\&quot;&quot;)" executed="True" success="True" time="0.000" asserts="1" />
                                </results>
                              </test-suite>
                              <test-case name="NUnit.Framework.Constraints.Tests.SamePathTest_Linux.ProvidesProperStringRepresentation" executed="True" success="True" time="0.000" asserts="1" />
                              <test-suite name="SucceedsWithGoodValues" executed="True" success="True" time="0.000" asserts="0">
                                <results>
                                  <test-case name="NUnit.Framework.Constraints.Tests.SamePathTest_Linux.SucceedsWithGoodValues(&quot;/folder1/file.tmp&quot;)" executed="True" success="True" time="0.000" asserts="1" />
                                  <test-case name="NUnit.Framework.Constraints.Tests.SamePathTest_Linux.SucceedsWithGoodValues(&quot;/folder1/./file.tmp&quot;)" executed="True" success="True" time="0.000" asserts="1" />
                                  <test-case name="NUnit.Framework.Constraints.Tests.SamePathTest_Linux.SucceedsWithGoodValues(&quot;/folder1/folder2/../file.tmp&quot;)" executed="True" success="True" time="0.000" asserts="1" />
                                  <test-case name="NUnit.Framework.Constraints.Tests.SamePathTest_Linux.SucceedsWithGoodValues(&quot;/folder1/./folder2/../file.tmp&quot;)" executed="True" success="True" time="0.000" asserts="1" />
                                  <test-case name="NUnit.Framework.Constraints.Tests.SamePathTest_Linux.SucceedsWithGoodValues(&quot;\\folder1\\file.tmp&quot;)" executed="True" success="True" time="0.000" asserts="1" />
                                </results>
                              </test-suite>
                            </results>
                          </test-suite>
                          <test-suite name="SamePathTest_Windows" executed="True" success="True" time="0.000" asserts="0">
                            <results>
                              <test-suite name="FailsWithBadValues" executed="True" success="True" time="0.000" asserts="0">
                                <results>
                                  <test-case name="NUnit.Framework.Constraints.Tests.SamePathTest_Windows.FailsWithBadValues(123)" executed="True" success="True" time="0.000" asserts="1" />
                                  <test-case name="NUnit.Framework.Constraints.Tests.SamePathTest_Windows.FailsWithBadValues(&quot;C:\\folder2\\file.tmp&quot;)" executed="True" success="True" time="0.000" asserts="1" />
                                  <test-case name="NUnit.Framework.Constraints.Tests.SamePathTest_Windows.FailsWithBadValues(&quot;C:\\folder1\\.\\folder2\\..\\file.temp&quot;)" executed="True" success="True" time="0.000" asserts="1" />
                                </results>
                              </test-suite>
                              <test-case name="NUnit.Framework.Constraints.Tests.SamePathTest_Windows.ProvidesProperDescription" executed="True" success="True" time="0.000" asserts="1" />
                              <test-suite name="ProvidesProperFailureMessage" executed="True" success="True" time="0.000" asserts="0">
                                <results>
                                  <test-case name="NUnit.Framework.Constraints.Tests.SamePathTest_Windows.ProvidesProperFailureMessage(123,&quot;123&quot;)" executed="True" success="True" time="0.000" asserts="1" />
                                  <test-case name="NUnit.Framework.Constraints.Tests.SamePathTest_Windows.ProvidesProperFailureMessage(&quot;C:\\folder2\\file.tmp&quot;,&quot;\&quot;C:\\folder2\\file.tmp\&quot;&quot;)" executed="True" success="True" time="0.000" asserts="1" />
                                  <test-case name="NUnit.Framework.Constraints.Tests.SamePathTest_Windows.ProvidesProperFailureMessage(&quot;C:\\folder1\\.\\folder2\\..\\file.temp&quot;,&quot;\&quot;C:\\folder1\\.\\folder2\\..\\file.temp\&quot;&quot;)" executed="True" success="True" time="0.000" asserts="1" />
                                </results>
                              </test-suite>
                              <test-case name="NUnit.Framework.Constraints.Tests.SamePathTest_Windows.ProvidesProperStringRepresentation" executed="True" success="True" time="0.000" asserts="1" />
                              <test-suite name="SucceedsWithGoodValues" executed="True" success="True" time="0.000" asserts="0">
                                <results>
                                  <test-case name="NUnit.Framework.Constraints.Tests.SamePathTest_Windows.SucceedsWithGoodValues(&quot;C:\\folder1\\file.tmp&quot;)" executed="True" success="True" time="0.000" asserts="1" />
                                  <test-case name="NUnit.Framework.Constraints.Tests.SamePathTest_Windows.SucceedsWithGoodValues(&quot;C:\\Folder1\\File.TMP&quot;)" executed="True" success="True" time="0.000" asserts="1" />
                                  <test-case name="NUnit.Framework.Constraints.Tests.SamePathTest_Windows.SucceedsWithGoodValues(&quot;C:\\folder1\\.\\file.tmp&quot;)" executed="True" success="True" time="0.000" asserts="1" />
                                  <test-case name="NUnit.Framework.Constraints.Tests.SamePathTest_Windows.SucceedsWithGoodValues(&quot;C:\\folder1\\folder2\\..\\file.tmp&quot;)" executed="True" success="True" time="0.000" asserts="1" />
                                  <test-case name="NUnit.Framework.Constraints.Tests.SamePathTest_Windows.SucceedsWithGoodValues(&quot;C:\\FOLDER1\\.\\folder2\\..\\File.TMP&quot;)" executed="True" success="True" time="0.000" asserts="1" />
                                  <test-case name="NUnit.Framework.Constraints.Tests.SamePathTest_Windows.SucceedsWithGoodValues(&quot;C:/folder1/file.tmp&quot;)" executed="True" success="True" time="0.000" asserts="1" />
                                </results>
                              </test-suite>
                            </results>
                          </test-suite>
                          <test-suite name="StartsWithTest" executed="True" success="True" time="0.016" asserts="0">
                            <results>
                              <test-suite name="FailsWithBadValues" executed="True" success="True" time="0.016" asserts="0">
                                <results>
                                  <test-case name="NUnit.Framework.Constraints.Tests.StartsWithTest.FailsWithBadValues(&quot;goodbye&quot;)" executed="True" success="True" time="0.016" asserts="1" />
                                  <test-case name="NUnit.Framework.Constraints.Tests.StartsWithTest.FailsWithBadValues(&quot;HELLO THERE&quot;)" executed="True" success="True" time="0.000" asserts="1" />
                                  <test-case name="NUnit.Framework.Constraints.Tests.StartsWithTest.FailsWithBadValues(&quot;I said hello&quot;)" executed="True" success="True" time="0.000" asserts="1" />
                                  <test-case name="NUnit.Framework.Constraints.Tests.StartsWithTest.FailsWithBadValues(&quot;say hello to fred&quot;)" executed="True" success="True" time="0.000" asserts="1" />
                                  <test-case name="NUnit.Framework.Constraints.Tests.StartsWithTest.FailsWithBadValues(&quot;&quot;)" executed="True" success="True" time="0.000" asserts="1" />
                                  <test-case name="NUnit.Framework.Constraints.Tests.StartsWithTest.FailsWithBadValues(null)" executed="True" success="True" time="0.000" asserts="1" />
                                </results>
                              </test-suite>
                              <test-case name="NUnit.Framework.Constraints.Tests.StartsWithTest.ProvidesProperDescription" executed="True" success="True" time="0.000" asserts="1" />
                              <test-suite name="ProvidesProperFailureMessage" executed="True" success="True" time="0.000" asserts="0">
                                <results>
                                  <test-case name="NUnit.Framework.Constraints.Tests.StartsWithTest.ProvidesProperFailureMessage(&quot;goodbye&quot;,&quot;\&quot;goodbye\&quot;&quot;)" executed="True" success="True" time="0.000" asserts="1" />
                                  <test-case name="NUnit.Framework.Constraints.Tests.StartsWithTest.ProvidesProperFailureMessage(&quot;HELLO THERE&quot;,&quot;\&quot;HELLO THERE\&quot;&quot;)" executed="True" success="True" time="0.000" asserts="1" />
                                  <test-case name="NUnit.Framework.Constraints.Tests.StartsWithTest.ProvidesProperFailureMessage(&quot;I said hello&quot;,&quot;\&quot;I said hello\&quot;&quot;)" executed="True" success="True" time="0.000" asserts="1" />
                                  <test-case name="NUnit.Framework.Constraints.Tests.StartsWithTest.ProvidesProperFailureMessage(&quot;say hello to fred&quot;,&quot;\&quot;say hello to fred\&quot;&quot;)" executed="True" success="True" time="0.000" asserts="1" />
                                  <test-case name="NUnit.Framework.Constraints.Tests.StartsWithTest.ProvidesProperFailureMessage(&quot;&quot;,&quot;&lt;string.Empty&gt;&quot;)" executed="True" success="True" time="0.000" asserts="1" />
                                  <test-case name="NUnit.Framework.Constraints.Tests.StartsWithTest.ProvidesProperFailureMessage(null,&quot;null&quot;)" executed="True" success="True" time="0.000" asserts="1" />
                                </results>
                              </test-suite>
                              <test-case name="NUnit.Framework.Constraints.Tests.StartsWithTest.ProvidesProperStringRepresentation" executed="True" success="True" time="0.000" asserts="1" />
                              <test-suite name="SucceedsWithGoodValues" executed="True" success="True" time="0.000" asserts="0">
                                <results>
                                  <test-case name="NUnit.Framework.Constraints.Tests.StartsWithTest.SucceedsWithGoodValues(&quot;hello&quot;)" executed="True" success="True" time="0.000" asserts="1" />
                                  <test-case name="NUnit.Framework.Constraints.Tests.StartsWithTest.SucceedsWithGoodValues(&quot;hello there&quot;)" executed="True" success="True" time="0.000" asserts="1" />
                                </results>
                              </test-suite>
                            </results>
                          </test-suite>
                          <test-suite name="StartsWithTestIgnoringCase" executed="True" success="True" time="0.000" asserts="0">
                            <results>
                              <test-suite name="FailsWithBadValues" executed="True" success="True" time="0.000" asserts="0">
                                <results>
                                  <test-case name="NUnit.Framework.Constraints.Tests.StartsWithTestIgnoringCase.FailsWithBadValues(&quot;goodbye&quot;)" executed="True" success="True" time="0.000" asserts="1" />
                                  <test-case name="NUnit.Framework.Constraints.Tests.StartsWithTestIgnoringCase.FailsWithBadValues(&quot;What the hell?&quot;)" executed="True" success="True" time="0.000" asserts="1" />
                                  <test-case name="NUnit.Framework.Constraints.Tests.StartsWithTestIgnoringCase.FailsWithBadValues(&quot;I said hello&quot;)" executed="True" success="True" time="0.000" asserts="1" />
                                  <test-case name="NUnit.Framework.Constraints.Tests.StartsWithTestIgnoringCase.FailsWithBadValues(&quot;say Hello to fred&quot;)" executed="True" success="True" time="0.000" asserts="1" />
                                  <test-case name="NUnit.Framework.Constraints.Tests.StartsWithTestIgnoringCase.FailsWithBadValues(&quot;&quot;)" executed="True" success="True" time="0.000" asserts="1" />
                                  <test-case name="NUnit.Framework.Constraints.Tests.StartsWithTestIgnoringCase.FailsWithBadValues(null)" executed="True" success="True" time="0.000" asserts="1" />
                                </results>
                              </test-suite>
                              <test-case name="NUnit.Framework.Constraints.Tests.StartsWithTestIgnoringCase.ProvidesProperDescription" executed="True" success="True" time="0.000" asserts="1" />
                              <test-suite name="ProvidesProperFailureMessage" executed="True" success="True" time="0.000" asserts="0">
                                <results>
                                  <test-case name="NUnit.Framework.Constraints.Tests.StartsWithTestIgnoringCase.ProvidesProperFailureMessage(&quot;goodbye&quot;,&quot;\&quot;goodbye\&quot;&quot;)" executed="True" success="True" time="0.000" asserts="1" />
                                  <test-case name="NUnit.Framework.Constraints.Tests.StartsWithTestIgnoringCase.ProvidesProperFailureMessage(&quot;What the hell?&quot;,&quot;\&quot;What the hell?\&quot;&quot;)" executed="True" success="True" time="0.000" asserts="1" />
                                  <test-case name="NUnit.Framework.Constraints.Tests.StartsWithTestIgnoringCase.ProvidesProperFailureMessage(&quot;I said hello&quot;,&quot;\&quot;I said hello\&quot;&quot;)" executed="True" success="True" time="0.000" asserts="1" />
                                  <test-case name="NUnit.Framework.Constraints.Tests.StartsWithTestIgnoringCase.ProvidesProperFailureMessage(&quot;say Hello to fred&quot;,&quot;\&quot;say Hello to fred\&quot;&quot;)" executed="True" success="True" time="0.000" asserts="1" />
                                  <test-case name="NUnit.Framework.Constraints.Tests.StartsWithTestIgnoringCase.ProvidesProperFailureMessage(&quot;&quot;,&quot;&lt;string.Empty&gt;&quot;)" executed="True" success="True" time="0.000" asserts="1" />
                                  <test-case name="NUnit.Framework.Constraints.Tests.StartsWithTestIgnoringCase.ProvidesProperFailureMessage(null,&quot;null&quot;)" executed="True" success="True" time="0.000" asserts="1" />
                                </results>
                              </test-suite>
                              <test-case name="NUnit.Framework.Constraints.Tests.StartsWithTestIgnoringCase.ProvidesProperStringRepresentation" executed="True" success="True" time="0.000" asserts="1" />
                              <test-suite name="SucceedsWithGoodValues" executed="True" success="True" time="0.000" asserts="0">
                                <results>
                                  <test-case name="NUnit.Framework.Constraints.Tests.StartsWithTestIgnoringCase.SucceedsWithGoodValues(&quot;Hello&quot;)" executed="True" success="True" time="0.000" asserts="1" />
                                  <test-case name="NUnit.Framework.Constraints.Tests.StartsWithTestIgnoringCase.SucceedsWithGoodValues(&quot;HELLO there&quot;)" executed="True" success="True" time="0.000" asserts="1" />
                                </results>
                              </test-suite>
                            </results>
                          </test-suite>
                          <test-suite name="SubstringTest" executed="True" success="True" time="0.016" asserts="0">
                            <results>
                              <test-suite name="FailsWithBadValues" executed="True" success="True" time="0.000" asserts="0">
                                <results>
                                  <test-case name="NUnit.Framework.Constraints.Tests.SubstringTest.FailsWithBadValues(&quot;goodbye&quot;)" executed="True" success="True" time="0.000" asserts="1" />
                                  <test-case name="NUnit.Framework.Constraints.Tests.SubstringTest.FailsWithBadValues(&quot;HELLO&quot;)" executed="True" success="True" time="0.000" asserts="1" />
                                  <test-case name="NUnit.Framework.Constraints.Tests.SubstringTest.FailsWithBadValues(&quot;What the hell?&quot;)" executed="True" success="True" time="0.000" asserts="1" />
                                  <test-case name="NUnit.Framework.Constraints.Tests.SubstringTest.FailsWithBadValues(&quot;&quot;)" executed="True" success="True" time="0.000" asserts="1" />
                                  <test-case name="NUnit.Framework.Constraints.Tests.SubstringTest.FailsWithBadValues(null)" executed="True" success="True" time="0.000" asserts="1" />
                                </results>
                              </test-suite>
                              <test-case name="NUnit.Framework.Constraints.Tests.SubstringTest.ProvidesProperDescription" executed="True" success="True" time="0.000" asserts="1" />
                              <test-suite name="ProvidesProperFailureMessage" executed="True" success="True" time="0.000" asserts="0">
                                <results>
                                  <test-case name="NUnit.Framework.Constraints.Tests.SubstringTest.ProvidesProperFailureMessage(&quot;goodbye&quot;,&quot;\&quot;goodbye\&quot;&quot;)" executed="True" success="True" time="0.000" asserts="1" />
                                  <test-case name="NUnit.Framework.Constraints.Tests.SubstringTest.ProvidesProperFailureMessage(&quot;HELLO&quot;,&quot;\&quot;HELLO\&quot;&quot;)" executed="True" success="True" time="0.000" asserts="1" />
                                  <test-case name="NUnit.Framework.Constraints.Tests.SubstringTest.ProvidesProperFailureMessage(&quot;What the hell?&quot;,&quot;\&quot;What the hell?\&quot;&quot;)" executed="True" success="True" time="0.000" asserts="1" />
                                  <test-case name="NUnit.Framework.Constraints.Tests.SubstringTest.ProvidesProperFailureMessage(&quot;&quot;,&quot;&lt;string.Empty&gt;&quot;)" executed="True" success="True" time="0.000" asserts="1" />
                                  <test-case name="NUnit.Framework.Constraints.Tests.SubstringTest.ProvidesProperFailureMessage(null,&quot;null&quot;)" executed="True" success="True" time="0.000" asserts="1" />
                                </results>
                              </test-suite>
                              <test-case name="NUnit.Framework.Constraints.Tests.SubstringTest.ProvidesProperStringRepresentation" executed="True" success="True" time="0.000" asserts="1" />
                              <test-suite name="SucceedsWithGoodValues" executed="True" success="True" time="0.000" asserts="0">
                                <results>
                                  <test-case name="NUnit.Framework.Constraints.Tests.SubstringTest.SucceedsWithGoodValues(&quot;hello&quot;)" executed="True" success="True" time="0.000" asserts="1" />
                                  <test-case name="NUnit.Framework.Constraints.Tests.SubstringTest.SucceedsWithGoodValues(&quot;hello there&quot;)" executed="True" success="True" time="0.000" asserts="1" />
                                  <test-case name="NUnit.Framework.Constraints.Tests.SubstringTest.SucceedsWithGoodValues(&quot;I said hello&quot;)" executed="True" success="True" time="0.000" asserts="1" />
                                  <test-case name="NUnit.Framework.Constraints.Tests.SubstringTest.SucceedsWithGoodValues(&quot;say hello to fred&quot;)" executed="True" success="True" time="0.000" asserts="1" />
                                </results>
                              </test-suite>
                            </results>
                          </test-suite>
                          <test-suite name="SubstringTestIgnoringCase" executed="True" success="True" time="0.000" asserts="0">
                            <results>
                              <test-suite name="FailsWithBadValues" executed="True" success="True" time="0.000" asserts="0">
                                <results>
                                  <test-case name="NUnit.Framework.Constraints.Tests.SubstringTestIgnoringCase.FailsWithBadValues(&quot;goodbye&quot;)" executed="True" success="True" time="0.000" asserts="1" />
                                  <test-case name="NUnit.Framework.Constraints.Tests.SubstringTestIgnoringCase.FailsWithBadValues(&quot;What the hell?&quot;)" executed="True" success="True" time="0.000" asserts="1" />
                                  <test-case name="NUnit.Framework.Constraints.Tests.SubstringTestIgnoringCase.FailsWithBadValues(&quot;&quot;)" executed="True" success="True" time="0.000" asserts="1" />
                                  <test-case name="NUnit.Framework.Constraints.Tests.SubstringTestIgnoringCase.FailsWithBadValues(null)" executed="True" success="True" time="0.000" asserts="1" />
                                </results>
                              </test-suite>
                              <test-case name="NUnit.Framework.Constraints.Tests.SubstringTestIgnoringCase.ProvidesProperDescription" executed="True" success="True" time="0.000" asserts="1" />
                              <test-suite name="ProvidesProperFailureMessage" executed="True" success="True" time="0.000" asserts="0">
                                <results>
                                  <test-case name="NUnit.Framework.Constraints.Tests.SubstringTestIgnoringCase.ProvidesProperFailureMessage(&quot;goodbye&quot;,&quot;\&quot;goodbye\&quot;&quot;)" executed="True" success="True" time="0.000" asserts="1" />
                                  <test-case name="NUnit.Framework.Constraints.Tests.SubstringTestIgnoringCase.ProvidesProperFailureMessage(&quot;What the hell?&quot;,&quot;\&quot;What the hell?\&quot;&quot;)" executed="True" success="True" time="0.000" asserts="1" />
                                  <test-case name="NUnit.Framework.Constraints.Tests.SubstringTestIgnoringCase.ProvidesProperFailureMessage(&quot;&quot;,&quot;&lt;string.Empty&gt;&quot;)" executed="True" success="True" time="0.000" asserts="1" />
                                  <test-case name="NUnit.Framework.Constraints.Tests.SubstringTestIgnoringCase.ProvidesProperFailureMessage(null,&quot;null&quot;)" executed="True" success="True" time="0.000" asserts="1" />
                                </results>
                              </test-suite>
                              <test-case name="NUnit.Framework.Constraints.Tests.SubstringTestIgnoringCase.ProvidesProperStringRepresentation" executed="True" success="True" time="0.000" asserts="1" />
                              <test-suite name="SucceedsWithGoodValues" executed="True" success="True" time="0.000" asserts="0">
                                <results>
                                  <test-case name="NUnit.Framework.Constraints.Tests.SubstringTestIgnoringCase.SucceedsWithGoodValues(&quot;Hello&quot;)" executed="True" success="True" time="0.000" asserts="1" />
                                  <test-case name="NUnit.Framework.Constraints.Tests.SubstringTestIgnoringCase.SucceedsWithGoodValues(&quot;HellO there&quot;)" executed="True" success="True" time="0.000" asserts="1" />
                                  <test-case name="NUnit.Framework.Constraints.Tests.SubstringTestIgnoringCase.SucceedsWithGoodValues(&quot;I said HELLO&quot;)" executed="True" success="True" time="0.000" asserts="1" />
                                  <test-case name="NUnit.Framework.Constraints.Tests.SubstringTestIgnoringCase.SucceedsWithGoodValues(&quot;say hello to fred&quot;)" executed="True" success="True" time="0.000" asserts="1" />
                                </results>
                              </test-suite>
                            </results>
                          </test-suite>
                          <test-suite name="ThrowsConstraintTest_ExactType" executed="True" success="True" time="0.000" asserts="0">
                            <results>
                              <test-suite name="FailsWithBadValues" executed="True" success="True" time="0.000" asserts="0">
                                <results>
                                  <test-case name="NUnit.Framework.Constraints.Tests.ThrowsConstraintTest_ExactType.FailsWithBadValues(NUnit.Framework.TestDelegate)" executed="True" success="True" time="0.000" asserts="1" />
                                  <test-case name="NUnit.Framework.Constraints.Tests.ThrowsConstraintTest_ExactType.FailsWithBadValues(NUnit.Framework.TestDelegate)" executed="True" success="True" time="0.000" asserts="1" />
                                  <test-case name="NUnit.Framework.Constraints.Tests.ThrowsConstraintTest_ExactType.FailsWithBadValues(NUnit.Framework.TestDelegate)" executed="True" success="True" time="0.000" asserts="1" />
                                </results>
                              </test-suite>
                              <test-case name="NUnit.Framework.Constraints.Tests.ThrowsConstraintTest_ExactType.ProvidesProperDescription" executed="True" success="True" time="0.000" asserts="1" />
                              <test-suite name="ProvidesProperFailureMessage" executed="True" success="True" time="0.000" asserts="0">
                                <results>
                                  <test-case name="NUnit.Framework.Constraints.Tests.ThrowsConstraintTest_ExactType.ProvidesProperFailureMessage(NUnit.Framework.TestDelegate,&quot;&lt;System.ApplicationException&gt;&quot;)" executed="True" success="True" time="0.000" asserts="1" />
                                  <test-case name="NUnit.Framework.Constraints.Tests.ThrowsConstraintTest_ExactType.ProvidesProperFailureMessage(NUnit.Framework.TestDelegate,&quot;no exception thrown&quot;)" executed="True" success="True" time="0.000" asserts="1" />
                                  <test-case name="NUnit.Framework.Constraints.Tests.ThrowsConstraintTest_ExactType.ProvidesProperFailureMessage(NUnit.Framework.TestDelegate,&quot;&lt;System.Exception&gt;&quot;)" executed="True" success="True" time="0.000" asserts="1" />
                                </results>
                              </test-suite>
                              <test-case name="NUnit.Framework.Constraints.Tests.ThrowsConstraintTest_ExactType.ProvidesProperStringRepresentation" executed="True" success="True" time="0.000" asserts="1" />
                              <test-suite name="SucceedsWithGoodValues" executed="True" success="True" time="0.000" asserts="0">
                                <results>
                                  <test-case name="NUnit.Framework.Constraints.Tests.ThrowsConstraintTest_ExactType.SucceedsWithGoodValues(NUnit.Framework.TestDelegate)" executed="True" success="True" time="0.000" asserts="1" />
                                </results>
                              </test-suite>
                            </results>
                          </test-suite>
                          <test-suite name="ThrowsConstraintTest_InstanceOfType" executed="True" success="True" time="0.000" asserts="0">
                            <results>
                              <test-suite name="FailsWithBadValues" executed="True" success="True" time="0.000" asserts="0">
                                <results>
                                  <test-case name="NUnit.Framework.Constraints.Tests.ThrowsConstraintTest_InstanceOfType.FailsWithBadValues(NUnit.Framework.TestDelegate)" executed="True" success="True" time="0.000" asserts="1" />
                                  <test-case name="NUnit.Framework.Constraints.Tests.ThrowsConstraintTest_InstanceOfType.FailsWithBadValues(NUnit.Framework.TestDelegate)" executed="True" success="True" time="0.000" asserts="1" />
                                  <test-case name="NUnit.Framework.Constraints.Tests.ThrowsConstraintTest_InstanceOfType.FailsWithBadValues(NUnit.Framework.TestDelegate)" executed="True" success="True" time="0.000" asserts="1" />
                                </results>
                              </test-suite>
                              <test-case name="NUnit.Framework.Constraints.Tests.ThrowsConstraintTest_InstanceOfType.ProvidesProperDescription" executed="True" success="True" time="0.000" asserts="1" />
                              <test-suite name="ProvidesProperFailureMessage" executed="True" success="True" time="0.000" asserts="0">
                                <results>
                                  <test-case name="NUnit.Framework.Constraints.Tests.ThrowsConstraintTest_InstanceOfType.ProvidesProperFailureMessage(NUnit.Framework.TestDelegate,&quot;&lt;System.ArgumentException&gt;&quot;)" executed="True" success="True" time="0.000" asserts="1" />
                                  <test-case name="NUnit.Framework.Constraints.Tests.ThrowsConstraintTest_InstanceOfType.ProvidesProperFailureMessage(NUnit.Framework.TestDelegate,&quot;no exception thrown&quot;)" executed="True" success="True" time="0.000" asserts="1" />
                                  <test-case name="NUnit.Framework.Constraints.Tests.ThrowsConstraintTest_InstanceOfType.ProvidesProperFailureMessage(NUnit.Framework.TestDelegate,&quot;&lt;System.Exception&gt;&quot;)" executed="True" success="True" time="0.000" asserts="1" />
                                </results>
                              </test-suite>
                              <test-case name="NUnit.Framework.Constraints.Tests.ThrowsConstraintTest_InstanceOfType.ProvidesProperStringRepresentation" executed="True" success="True" time="0.000" asserts="1" />
                              <test-suite name="SucceedsWithGoodValues" executed="True" success="True" time="0.000" asserts="0">
                                <results>
                                  <test-case name="NUnit.Framework.Constraints.Tests.ThrowsConstraintTest_InstanceOfType.SucceedsWithGoodValues(NUnit.Framework.TestDelegate)" executed="True" success="True" time="0.000" asserts="1" />
                                  <test-case name="NUnit.Framework.Constraints.Tests.ThrowsConstraintTest_InstanceOfType.SucceedsWithGoodValues(NUnit.Framework.TestDelegate)" executed="True" success="True" time="0.000" asserts="1" />
                                </results>
                              </test-suite>
                            </results>
                          </test-suite>
                          <test-suite name="ThrowsConstraintTest_WithConstraint" executed="True" success="True" time="0.000" asserts="0">
                            <results>
                              <test-suite name="FailsWithBadValues" executed="True" success="True" time="0.000" asserts="0">
                                <results>
                                  <test-case name="NUnit.Framework.Constraints.Tests.ThrowsConstraintTest_WithConstraint.FailsWithBadValues(NUnit.Framework.TestDelegate)" executed="True" success="True" time="0.000" asserts="1" />
                                  <test-case name="NUnit.Framework.Constraints.Tests.ThrowsConstraintTest_WithConstraint.FailsWithBadValues(NUnit.Framework.TestDelegate)" executed="True" success="True" time="0.000" asserts="1" />
                                  <test-case name="NUnit.Framework.Constraints.Tests.ThrowsConstraintTest_WithConstraint.FailsWithBadValues(NUnit.Framework.TestDelegate)" executed="True" success="True" time="0.000" asserts="1" />
                                </results>
                              </test-suite>
                              <test-case name="NUnit.Framework.Constraints.Tests.ThrowsConstraintTest_WithConstraint.ProvidesProperDescription" executed="True" success="True" time="0.000" asserts="1" />
                              <test-suite name="ProvidesProperFailureMessage" executed="True" success="True" time="0.000" asserts="0">
                                <results>
                                  <test-case name="NUnit.Framework.Constraints.Tests.ThrowsConstraintTest_WithConstraint.ProvidesProperFailureMessage(NUnit.Framework.TestDelegate,&quot;&lt;System.ApplicationException&gt;&quot;)" executed="True" success="True" time="0.000" asserts="1" />
                                  <test-case name="NUnit.Framework.Constraints.Tests.ThrowsConstraintTest_WithConstraint.ProvidesProperFailureMessage(NUnit.Framework.TestDelegate,&quot;no exception thrown&quot;)" executed="True" success="True" time="0.000" asserts="1" />
                                  <test-case name="NUnit.Framework.Constraints.Tests.ThrowsConstraintTest_WithConstraint.ProvidesProperFailureMessage(NUnit.Framework.TestDelegate,&quot;&lt;System.Exception&gt;&quot;)" executed="True" success="True" time="0.000" asserts="1" />
                                </results>
                              </test-suite>
                              <test-case name="NUnit.Framework.Constraints.Tests.ThrowsConstraintTest_WithConstraint.ProvidesProperStringRepresentation" executed="True" success="True" time="0.000" asserts="1" />
                              <test-suite name="SucceedsWithGoodValues" executed="True" success="True" time="0.000" asserts="0">
                                <results>
                                  <test-case name="NUnit.Framework.Constraints.Tests.ThrowsConstraintTest_WithConstraint.SucceedsWithGoodValues(NUnit.Framework.TestDelegate)" executed="True" success="True" time="0.000" asserts="1" />
                                </results>
                              </test-suite>
                            </results>
                          </test-suite>
                          <test-suite name="TrueConstraintTest" executed="True" success="True" time="0.000" asserts="0">
                            <results>
                              <test-suite name="FailsWithBadValues" executed="True" success="True" time="0.000" asserts="0">
                                <results>
                                  <test-case name="NUnit.Framework.Constraints.Tests.TrueConstraintTest.FailsWithBadValues(null)" executed="True" success="True" time="0.000" asserts="1" />
                                  <test-case name="NUnit.Framework.Constraints.Tests.TrueConstraintTest.FailsWithBadValues(&quot;hello&quot;)" executed="True" success="True" time="0.000" asserts="1" />
                                  <test-case name="NUnit.Framework.Constraints.Tests.TrueConstraintTest.FailsWithBadValues(False)" executed="True" success="True" time="0.000" asserts="1" />
                                  <test-case name="NUnit.Framework.Constraints.Tests.TrueConstraintTest.FailsWithBadValues(False)" executed="True" success="True" time="0.000" asserts="1" />
                                </results>
                              </test-suite>
                              <test-case name="NUnit.Framework.Constraints.Tests.TrueConstraintTest.ProvidesProperDescription" executed="True" success="True" time="0.000" asserts="1" />
                              <test-suite name="ProvidesProperFailureMessage" executed="True" success="True" time="0.000" asserts="0">
                                <results>
                                  <test-case name="NUnit.Framework.Constraints.Tests.TrueConstraintTest.ProvidesProperFailureMessage(null,&quot;null&quot;)" executed="True" success="True" time="0.000" asserts="1" />
                                  <test-case name="NUnit.Framework.Constraints.Tests.TrueConstraintTest.ProvidesProperFailureMessage(&quot;hello&quot;,&quot;\&quot;hello\&quot;&quot;)" executed="True" success="True" time="0.000" asserts="1" />
                                  <test-case name="NUnit.Framework.Constraints.Tests.TrueConstraintTest.ProvidesProperFailureMessage(False,&quot;False&quot;)" executed="True" success="True" time="0.000" asserts="1" />
                                  <test-case name="NUnit.Framework.Constraints.Tests.TrueConstraintTest.ProvidesProperFailureMessage(False,&quot;False&quot;)" executed="True" success="True" time="0.000" asserts="1" />
                                </results>
                              </test-suite>
                              <test-case name="NUnit.Framework.Constraints.Tests.TrueConstraintTest.ProvidesProperStringRepresentation" executed="True" success="True" time="0.000" asserts="1" />
                              <test-suite name="SucceedsWithGoodValues" executed="True" success="True" time="0.000" asserts="0">
                                <results>
                                  <test-case name="NUnit.Framework.Constraints.Tests.TrueConstraintTest.SucceedsWithGoodValues(True)" executed="True" success="True" time="0.000" asserts="1" />
                                  <test-case name="NUnit.Framework.Constraints.Tests.TrueConstraintTest.SucceedsWithGoodValues(True)" executed="True" success="True" time="0.000" asserts="1" />
                                </results>
                              </test-suite>
                            </results>
                          </test-suite>
                          <test-suite name="XmlSerializableTest" executed="True" success="True" time="2.875" asserts="0">
                            <results>
                              <test-suite name="FailsWithBadValues" executed="True" success="True" time="1.422" asserts="0">
                                <results>
                                  <test-case name="NUnit.Framework.Constraints.Tests.XmlSerializableTest.FailsWithBadValues(System.Collections.Generic.Dictionary`2[System.String,System.String])" executed="True" success="True" time="0.688" asserts="1" />
                                  <test-case name="NUnit.Framework.Constraints.Tests.XmlSerializableTest.FailsWithBadValues(NUnit.Framework.Constraints.Tests.InternalClass)" executed="True" success="True" time="0.453" asserts="1" />
                                  <test-case name="NUnit.Framework.Constraints.Tests.XmlSerializableTest.FailsWithBadValues(NUnit.Framework.Constraints.Tests.InternalWithSerializableAttributeClass)" executed="True" success="True" time="0.281" asserts="1" />
                                </results>
                              </test-suite>
                              <test-suite name="InvalidDataThrowsArgumentException" executed="True" success="True" time="0.000" asserts="0">
                                <results>
                                  <test-case name="NUnit.Framework.Constraints.Tests.XmlSerializableTest.InvalidDataThrowsArgumentException(null)" executed="True" success="True" time="0.000" asserts="0" />
                                </results>
                              </test-suite>
                              <test-case name="NUnit.Framework.Constraints.Tests.XmlSerializableTest.ProvidesProperDescription" executed="True" success="True" time="0.000" asserts="1" />
                              <test-suite name="ProvidesProperFailureMessage" executed="True" success="True" time="0.750" asserts="0">
                                <results>
                                  <test-case name="NUnit.Framework.Constraints.Tests.XmlSerializableTest.ProvidesProperFailureMessage(System.Collections.Generic.Dictionary`2[System.String,System.String],&quot;&lt;Dictionary`2&gt;&quot;)" executed="True" success="True" time="0.250" asserts="1" />
                                  <test-case name="NUnit.Framework.Constraints.Tests.XmlSerializableTest.ProvidesProperFailureMessage(NUnit.Framework.Constraints.Tests.InternalClass,&quot;&lt;InternalClass&gt;&quot;)" executed="True" success="True" time="0.250" asserts="1" />
                                  <test-case name="NUnit.Framework.Constraints.Tests.XmlSerializableTest.ProvidesProperFailureMessage(NUnit.Framework.Constraints.Tests.InternalWithSerializableAttributeClass,&quot;&lt;InternalWithSerializableAttributeClass&gt;&quot;)" executed="True" success="True" time="0.250" asserts="1" />
                                </results>
                              </test-suite>
                              <test-case name="NUnit.Framework.Constraints.Tests.XmlSerializableTest.ProvidesProperStringRepresentation" executed="True" success="True" time="0.000" asserts="1" />
                              <test-suite name="SucceedsWithGoodValues" executed="True" success="True" time="0.703" asserts="0">
                                <results>
                                  <test-case name="NUnit.Framework.Constraints.Tests.XmlSerializableTest.SucceedsWithGoodValues(1)" executed="True" success="True" time="0.031" asserts="1" />
                                  <test-case name="NUnit.Framework.Constraints.Tests.XmlSerializableTest.SucceedsWithGoodValues(&quot;a&quot;)" executed="True" success="True" time="0.000" asserts="1" />
                                  <test-case name="NUnit.Framework.Constraints.Tests.XmlSerializableTest.SucceedsWithGoodValues(System.Collections.ArrayList)" executed="True" success="True" time="0.672" asserts="1" />
                                </results>
                              </test-suite>
                            </results>
                          </test-suite>
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite name="Syntax" executed="True" success="True" time="5.219" asserts="0">
                    <results>
                      <test-suite name="AfterSyntaxUsingActualPassedByRef" executed="True" success="True" time="1.438" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Syntax.AfterSyntaxUsingActualPassedByRef.EqualToTest" executed="True" success="True" time="0.203" asserts="1" />
                          <test-case name="NUnit.Framework.Syntax.AfterSyntaxUsingActualPassedByRef.GreaterTest" executed="True" success="True" time="0.203" asserts="1" />
                          <test-case name="NUnit.Framework.Syntax.AfterSyntaxUsingActualPassedByRef.HasMemberTest" executed="True" success="True" time="0.203" asserts="1" />
                          <test-case name="NUnit.Framework.Syntax.AfterSyntaxUsingActualPassedByRef.NullTest" executed="True" success="True" time="0.203" asserts="1" />
                          <test-case name="NUnit.Framework.Syntax.AfterSyntaxUsingActualPassedByRef.SameAsTest" executed="True" success="True" time="0.203" asserts="1" />
                          <test-case name="NUnit.Framework.Syntax.AfterSyntaxUsingActualPassedByRef.TextTest" executed="True" success="True" time="0.203" asserts="1" />
                          <test-case name="NUnit.Framework.Syntax.AfterSyntaxUsingActualPassedByRef.TrueTest" executed="True" success="True" time="0.203" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite name="AfterSyntaxUsingAnonymousDelegates" executed="True" success="True" time="1.453" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Syntax.AfterSyntaxUsingAnonymousDelegates.EqualToTest" executed="True" success="True" time="0.203" asserts="1" />
                          <test-case name="NUnit.Framework.Syntax.AfterSyntaxUsingAnonymousDelegates.GreaterTest" executed="True" success="True" time="0.203" asserts="1" />
                          <test-case name="NUnit.Framework.Syntax.AfterSyntaxUsingAnonymousDelegates.HasMemberTest" executed="True" success="True" time="0.203" asserts="1" />
                          <test-case name="NUnit.Framework.Syntax.AfterSyntaxUsingAnonymousDelegates.NullTest" executed="True" success="True" time="0.203" asserts="1" />
                          <test-case name="NUnit.Framework.Syntax.AfterSyntaxUsingAnonymousDelegates.SameAsTest" executed="True" success="True" time="0.203" asserts="1" />
                          <test-case name="NUnit.Framework.Syntax.AfterSyntaxUsingAnonymousDelegates.TextTest" executed="True" success="True" time="0.203" asserts="1" />
                          <test-case name="NUnit.Framework.Syntax.AfterSyntaxUsingAnonymousDelegates.TrueTest" executed="True" success="True" time="0.203" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite name="AfterTest_AndOperator" executed="True" success="True" time="0.016" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Syntax.AfterTest_AndOperator.SupportedByConstraintBuilder" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Syntax.AfterTest_AndOperator.SupportedByInheritedSyntax" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Syntax.AfterTest_AndOperator.SupportedByStaticSyntax" executed="True" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite name="AfterTest_ProperyTest" executed="True" success="True" time="0.000" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Syntax.AfterTest_ProperyTest.SupportedByConstraintBuilder" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Syntax.AfterTest_ProperyTest.SupportedByInheritedSyntax" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Syntax.AfterTest_ProperyTest.SupportedByStaticSyntax" executed="True" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite name="AfterTest_SimpleConstraint" executed="True" success="True" time="0.000" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Syntax.AfterTest_SimpleConstraint.SupportedByConstraintBuilder" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Syntax.AfterTest_SimpleConstraint.SupportedByInheritedSyntax" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Syntax.AfterTest_SimpleConstraint.SupportedByStaticSyntax" executed="True" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite name="AllTest" executed="True" success="True" time="0.016" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Syntax.AllTest.SupportedByConstraintBuilder" executed="True" success="True" time="0.016" asserts="1" />
                          <test-case name="NUnit.Framework.Syntax.AllTest.SupportedByInheritedSyntax" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Syntax.AllTest.SupportedByStaticSyntax" executed="True" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite name="AndIsEvaluatedBeforeFollowingOr" executed="True" success="True" time="0.000" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Syntax.AndIsEvaluatedBeforeFollowingOr.SupportedByConstraintBuilder" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Syntax.AndIsEvaluatedBeforeFollowingOr.SupportedByInheritedSyntax" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Syntax.AndIsEvaluatedBeforeFollowingOr.SupportedByStaticSyntax" executed="True" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite name="AndIsEvaluatedBeforePrecedingOr" executed="True" success="True" time="0.000" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Syntax.AndIsEvaluatedBeforePrecedingOr.SupportedByConstraintBuilder" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Syntax.AndIsEvaluatedBeforePrecedingOr.SupportedByInheritedSyntax" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Syntax.AndIsEvaluatedBeforePrecedingOr.SupportedByStaticSyntax" executed="True" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite name="AndOperatorOverride" executed="True" success="True" time="0.000" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Syntax.AndOperatorOverride.SupportedByConstraintBuilder" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Syntax.AndOperatorOverride.SupportedByInheritedSyntax" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Syntax.AndOperatorOverride.SupportedByStaticSyntax" executed="True" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite name="AndTest" executed="True" success="True" time="0.000" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Syntax.AndTest.SupportedByConstraintBuilder" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Syntax.AndTest.SupportedByInheritedSyntax" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Syntax.AndTest.SupportedByStaticSyntax" executed="True" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite name="AndTest_ThreeAndsWithNot" executed="True" success="True" time="0.031" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Syntax.AndTest_ThreeAndsWithNot.SupportedByConstraintBuilder" executed="True" success="True" time="0.016" asserts="1" />
                          <test-case name="NUnit.Framework.Syntax.AndTest_ThreeAndsWithNot.SupportedByInheritedSyntax" executed="True" success="True" time="0.016" asserts="1" />
                          <test-case name="NUnit.Framework.Syntax.AndTest_ThreeAndsWithNot.SupportedByStaticSyntax" executed="True" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite name="ArbitraryConstraintMatching" executed="True" success="True" time="0.016" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Syntax.ArbitraryConstraintMatching.CanMatchCustomConstraint" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Syntax.ArbitraryConstraintMatching.CanMatchCustomConstraintAfterPrefix" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Syntax.ArbitraryConstraintMatching.CanMatchCustomConstraintsUnderAndOperator" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Syntax.ArbitraryConstraintMatching.CanMatchPredicate" executed="True" success="True" time="0.016" asserts="2" />
                        </results>
                      </test-suite>
                      <test-suite name="AssignableFromTest" executed="True" success="True" time="0.000" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Syntax.AssignableFromTest.SupportedByConstraintBuilder" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Syntax.AssignableFromTest.SupportedByInheritedSyntax" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Syntax.AssignableFromTest.SupportedByStaticSyntax" executed="True" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite name="AssignableFromTest_Generic" executed="True" success="True" time="0.000" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Syntax.AssignableFromTest_Generic.SupportedByConstraintBuilder" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Syntax.AssignableFromTest_Generic.SupportedByInheritedSyntax" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Syntax.AssignableFromTest_Generic.SupportedByStaticSyntax" executed="True" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite name="AssignableToTest" executed="True" success="True" time="0.000" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Syntax.AssignableToTest.SupportedByConstraintBuilder" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Syntax.AssignableToTest.SupportedByInheritedSyntax" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Syntax.AssignableToTest.SupportedByStaticSyntax" executed="True" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite name="AssignableToTest_Generic" executed="True" success="True" time="0.016" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Syntax.AssignableToTest_Generic.SupportedByConstraintBuilder" executed="True" success="True" time="0.016" asserts="1" />
                          <test-case name="NUnit.Framework.Syntax.AssignableToTest_Generic.SupportedByInheritedSyntax" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Syntax.AssignableToTest_Generic.SupportedByStaticSyntax" executed="True" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite name="AtLeastTest" executed="True" success="True" time="0.000" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Syntax.AtLeastTest.SupportedByConstraintBuilder" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Syntax.AtLeastTest.SupportedByInheritedSyntax" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Syntax.AtLeastTest.SupportedByStaticSyntax" executed="True" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite name="AtMostTest" executed="True" success="True" time="0.000" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Syntax.AtMostTest.SupportedByConstraintBuilder" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Syntax.AtMostTest.SupportedByInheritedSyntax" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Syntax.AtMostTest.SupportedByStaticSyntax" executed="True" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite name="AttributeTest" executed="True" success="True" time="0.000" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Syntax.AttributeTest.SupportedByConstraintBuilder" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Syntax.AttributeTest.SupportedByInheritedSyntax" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Syntax.AttributeTest.SupportedByStaticSyntax" executed="True" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite name="AttributeTest_Generic" executed="True" success="True" time="0.016" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Syntax.AttributeTest_Generic.SupportedByConstraintBuilder" executed="True" success="True" time="0.016" asserts="1" />
                          <test-case name="NUnit.Framework.Syntax.AttributeTest_Generic.SupportedByInheritedSyntax" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Syntax.AttributeTest_Generic.SupportedByStaticSyntax" executed="True" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite name="AttributeTestWithFollowingConstraint" executed="True" success="True" time="0.000" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Syntax.AttributeTestWithFollowingConstraint.SupportedByConstraintBuilder" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Syntax.AttributeTestWithFollowingConstraint.SupportedByInheritedSyntax" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Syntax.AttributeTestWithFollowingConstraint.SupportedByStaticSyntax" executed="True" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite name="BinarySerializableTest" executed="True" success="True" time="0.000" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Syntax.BinarySerializableTest.SupportedByConstraintBuilder" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Syntax.BinarySerializableTest.SupportedByInheritedSyntax" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Syntax.BinarySerializableTest.SupportedByStaticSyntax" executed="True" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite name="CollectionContainsTest" executed="True" success="True" time="0.000" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Syntax.CollectionContainsTest.SupportedByConstraintBuilder" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Syntax.CollectionContainsTest.SupportedByInheritedSyntax" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Syntax.CollectionContainsTest.SupportedByStaticSyntax" executed="True" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite name="CollectionEquivalentTest" executed="True" success="True" time="0.000" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Syntax.CollectionEquivalentTest.SupportedByConstraintBuilder" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Syntax.CollectionEquivalentTest.SupportedByInheritedSyntax" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Syntax.CollectionEquivalentTest.SupportedByStaticSyntax" executed="True" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite name="CollectionOrderedByTest" executed="True" success="True" time="0.000" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Syntax.CollectionOrderedByTest.SupportedByConstraintBuilder" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Syntax.CollectionOrderedByTest.SupportedByInheritedSyntax" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Syntax.CollectionOrderedByTest.SupportedByStaticSyntax" executed="True" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite name="CollectionOrderedByTest_Comparer" executed="True" success="True" time="0.016" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Syntax.CollectionOrderedByTest_Comparer.SupportedByConstraintBuilder" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Syntax.CollectionOrderedByTest_Comparer.SupportedByInheritedSyntax" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Syntax.CollectionOrderedByTest_Comparer.SupportedByStaticSyntax" executed="True" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite name="CollectionOrderedByTest_Comparer_Descending" executed="True" success="True" time="0.000" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Syntax.CollectionOrderedByTest_Comparer_Descending.SupportedByConstraintBuilder" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Syntax.CollectionOrderedByTest_Comparer_Descending.SupportedByInheritedSyntax" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Syntax.CollectionOrderedByTest_Comparer_Descending.SupportedByStaticSyntax" executed="True" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite name="CollectionOrderedByTest_Descending" executed="True" success="True" time="0.000" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Syntax.CollectionOrderedByTest_Descending.SupportedByConstraintBuilder" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Syntax.CollectionOrderedByTest_Descending.SupportedByInheritedSyntax" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Syntax.CollectionOrderedByTest_Descending.SupportedByStaticSyntax" executed="True" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite name="CollectionOrderedTest" executed="True" success="True" time="0.000" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Syntax.CollectionOrderedTest.SupportedByConstraintBuilder" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Syntax.CollectionOrderedTest.SupportedByInheritedSyntax" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Syntax.CollectionOrderedTest.SupportedByStaticSyntax" executed="True" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite name="CollectionOrderedTest_Comparer" executed="True" success="True" time="0.000" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Syntax.CollectionOrderedTest_Comparer.SupportedByConstraintBuilder" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Syntax.CollectionOrderedTest_Comparer.SupportedByInheritedSyntax" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Syntax.CollectionOrderedTest_Comparer.SupportedByStaticSyntax" executed="True" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite name="CollectionOrderedTest_Comparer_Descending" executed="True" success="True" time="0.000" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Syntax.CollectionOrderedTest_Comparer_Descending.SupportedByConstraintBuilder" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Syntax.CollectionOrderedTest_Comparer_Descending.SupportedByInheritedSyntax" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Syntax.CollectionOrderedTest_Comparer_Descending.SupportedByStaticSyntax" executed="True" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite name="CollectionOrderedTest_Descending" executed="True" success="True" time="0.000" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Syntax.CollectionOrderedTest_Descending.SupportedByConstraintBuilder" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Syntax.CollectionOrderedTest_Descending.SupportedByInheritedSyntax" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Syntax.CollectionOrderedTest_Descending.SupportedByStaticSyntax" executed="True" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite name="CollectionSubsetTest" executed="True" success="True" time="0.000" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Syntax.CollectionSubsetTest.SupportedByConstraintBuilder" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Syntax.CollectionSubsetTest.SupportedByInheritedSyntax" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Syntax.CollectionSubsetTest.SupportedByStaticSyntax" executed="True" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite name="CountTest" executed="True" success="True" time="0.000" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Syntax.CountTest.SupportedByConstraintBuilder" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Syntax.CountTest.SupportedByInheritedSyntax" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Syntax.CountTest.SupportedByStaticSyntax" executed="True" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite name="EndsWithTest" executed="True" success="True" time="0.000" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Syntax.EndsWithTest.SupportedByConstraintBuilder" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Syntax.EndsWithTest.SupportedByInheritedSyntax" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Syntax.EndsWithTest.SupportedByStaticSyntax" executed="True" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite name="EndsWithTest_IgnoreCase" executed="True" success="True" time="0.000" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Syntax.EndsWithTest_IgnoreCase.SupportedByConstraintBuilder" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Syntax.EndsWithTest_IgnoreCase.SupportedByInheritedSyntax" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Syntax.EndsWithTest_IgnoreCase.SupportedByStaticSyntax" executed="True" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite name="EqualityTests" executed="True" success="True" time="0.016" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Syntax.EqualityTests.EqualityTestsUsingDefaultFloatingPointTolerance" executed="True" success="True" time="0.016" asserts="3" />
                          <test-case name="NUnit.Framework.Syntax.EqualityTests.EqualityTestsWithTolerance" executed="True" success="True" time="0.000" asserts="8" />
                          <test-case name="NUnit.Framework.Syntax.EqualityTests.EqualityTestsWithTolerance_MixedFloatAndDouble" executed="True" success="True" time="0.000" asserts="6" />
                          <test-case name="NUnit.Framework.Syntax.EqualityTests.EqualityTestsWithTolerance_MixingTypesGenerally" executed="True" success="True" time="0.000" asserts="7" />
                          <test-case name="NUnit.Framework.Syntax.EqualityTests.SimpleEqualityTests" executed="True" success="True" time="0.000" asserts="6" />
                        </results>
                      </test-suite>
                      <test-suite name="EqualToTest" executed="True" success="True" time="0.000" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Syntax.EqualToTest.SupportedByConstraintBuilder" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Syntax.EqualToTest.SupportedByInheritedSyntax" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Syntax.EqualToTest.SupportedByStaticSyntax" executed="True" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite name="EqualToTest_IgnoreCase" executed="True" success="True" time="0.000" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Syntax.EqualToTest_IgnoreCase.SupportedByConstraintBuilder" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Syntax.EqualToTest_IgnoreCase.SupportedByInheritedSyntax" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Syntax.EqualToTest_IgnoreCase.SupportedByStaticSyntax" executed="True" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite name="EqualToTest_WithinTolerance" executed="True" success="True" time="0.016" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Syntax.EqualToTest_WithinTolerance.SupportedByConstraintBuilder" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Syntax.EqualToTest_WithinTolerance.SupportedByInheritedSyntax" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Syntax.EqualToTest_WithinTolerance.SupportedByStaticSyntax" executed="True" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite name="ExactTypeTest" executed="True" success="True" time="0.016" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Syntax.ExactTypeTest.SupportedByConstraintBuilder" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Syntax.ExactTypeTest.SupportedByInheritedSyntax" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Syntax.ExactTypeTest.SupportedByStaticSyntax" executed="True" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite name="ExactTypeTest_Generic" executed="True" success="True" time="0.000" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Syntax.ExactTypeTest_Generic.SupportedByConstraintBuilder" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Syntax.ExactTypeTest_Generic.SupportedByInheritedSyntax" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Syntax.ExactTypeTest_Generic.SupportedByStaticSyntax" executed="True" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite name="FalseTest" executed="True" success="True" time="0.000" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Syntax.FalseTest.SupportedByConstraintBuilder" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Syntax.FalseTest.SupportedByInheritedSyntax" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Syntax.FalseTest.SupportedByStaticSyntax" executed="True" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite name="GreaterThanOrEqualTest" executed="True" success="True" time="0.000" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Syntax.GreaterThanOrEqualTest.SupportedByConstraintBuilder" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Syntax.GreaterThanOrEqualTest.SupportedByInheritedSyntax" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Syntax.GreaterThanOrEqualTest.SupportedByStaticSyntax" executed="True" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite name="GreaterThanTest" executed="True" success="True" time="0.000" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Syntax.GreaterThanTest.SupportedByConstraintBuilder" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Syntax.GreaterThanTest.SupportedByInheritedSyntax" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Syntax.GreaterThanTest.SupportedByStaticSyntax" executed="True" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite name="InstanceOfTest" executed="True" success="True" time="0.000" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Syntax.InstanceOfTest.SupportedByConstraintBuilder" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Syntax.InstanceOfTest.SupportedByInheritedSyntax" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Syntax.InstanceOfTest.SupportedByStaticSyntax" executed="True" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite name="InstanceOfTest_Generic" executed="True" success="True" time="0.000" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Syntax.InstanceOfTest_Generic.SupportedByConstraintBuilder" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Syntax.InstanceOfTest_Generic.SupportedByInheritedSyntax" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Syntax.InstanceOfTest_Generic.SupportedByStaticSyntax" executed="True" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite name="InstanceOfTypeTest" executed="True" success="True" time="0.000" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Syntax.InstanceOfTypeTest.SupportedByConstraintBuilder" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Syntax.InstanceOfTypeTest.SupportedByInheritedSyntax" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Syntax.InstanceOfTypeTest.SupportedByStaticSyntax" executed="True" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite name="InstanceOfTypeTest_Generic" executed="True" success="True" time="0.000" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Syntax.InstanceOfTypeTest_Generic.SupportedByConstraintBuilder" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Syntax.InstanceOfTypeTest_Generic.SupportedByInheritedSyntax" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Syntax.InstanceOfTypeTest_Generic.SupportedByStaticSyntax" executed="True" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite name="InvalidCodeTests" executed="True" success="True" time="1.391" asserts="0">
                        <results>
                          <test-suite name="CodeShouldNotCompile" executed="True" success="True" time="0.891" asserts="0">
                            <results>
                              <test-case name="NUnit.Framework.Syntax.InvalidCodeTests.CodeShouldNotCompile(&quot;Is.Null.All&quot;)" executed="True" success="True" time="0.234" asserts="0" />
                              <test-case name="NUnit.Framework.Syntax.InvalidCodeTests.CodeShouldNotCompile(&quot;Is.Not.Null.GreaterThan(10))&quot;)" executed="True" success="True" time="0.109" asserts="0" />
                              <test-case name="NUnit.Framework.Syntax.InvalidCodeTests.CodeShouldNotCompile(&quot;Is.Null.Not&quot;)" executed="True" success="True" time="0.203" asserts="0" />
                              <test-case name="NUnit.Framework.Syntax.InvalidCodeTests.CodeShouldNotCompile(&quot;Is.And&quot;)" executed="True" success="True" time="0.109" asserts="0" />
                              <test-case name="NUnit.Framework.Syntax.InvalidCodeTests.CodeShouldNotCompile(&quot;Is.All.And.And&quot;)" executed="True" success="True" time="0.109" asserts="0" />
                              <test-case name="NUnit.Framework.Syntax.InvalidCodeTests.CodeShouldNotCompile(&quot;Is.Null.And.Throws&quot;)" executed="True" success="True" time="0.109" asserts="0" />
                            </results>
                          </test-suite>
                          <test-suite name="CodeShouldNotCompileAsFinishedConstraint" executed="True" success="True" time="0.500" asserts="0">
                            <results>
                              <test-case name="NUnit.Framework.Syntax.InvalidCodeTests.CodeShouldNotCompileAsFinishedConstraint(&quot;Is.Not.All&quot;)" executed="True" success="True" time="0.125" asserts="0" />
                              <test-case name="NUnit.Framework.Syntax.InvalidCodeTests.CodeShouldNotCompileAsFinishedConstraint(&quot;Is.All&quot;)" executed="True" success="True" time="0.125" asserts="0" />
                              <test-case name="NUnit.Framework.Syntax.InvalidCodeTests.CodeShouldNotCompileAsFinishedConstraint(&quot;Is.Not&quot;)" executed="True" success="True" time="0.109" asserts="0" />
                              <test-case name="NUnit.Framework.Syntax.InvalidCodeTests.CodeShouldNotCompileAsFinishedConstraint(&quot;Is.All.Not&quot;)" executed="True" success="True" time="0.141" asserts="0" />
                            </results>
                          </test-suite>
                        </results>
                      </test-suite>
                      <test-suite name="LengthTest" executed="True" success="True" time="0.000" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Syntax.LengthTest.SupportedByConstraintBuilder" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Syntax.LengthTest.SupportedByInheritedSyntax" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Syntax.LengthTest.SupportedByStaticSyntax" executed="True" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite name="LessThanOrEqualTest" executed="True" success="True" time="0.000" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Syntax.LessThanOrEqualTest.SupportedByConstraintBuilder" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Syntax.LessThanOrEqualTest.SupportedByInheritedSyntax" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Syntax.LessThanOrEqualTest.SupportedByStaticSyntax" executed="True" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite name="LessThanTest" executed="True" success="True" time="0.016" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Syntax.LessThanTest.SupportedByConstraintBuilder" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Syntax.LessThanTest.SupportedByInheritedSyntax" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Syntax.LessThanTest.SupportedByStaticSyntax" executed="True" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite name="MessageTest" executed="True" success="True" time="0.000" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Syntax.MessageTest.SupportedByConstraintBuilder" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Syntax.MessageTest.SupportedByInheritedSyntax" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Syntax.MessageTest.SupportedByStaticSyntax" executed="True" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite name="MixedOperatorOverrides" executed="True" success="True" time="0.000" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Syntax.MixedOperatorOverrides.ComplexTests" executed="True" success="True" time="0.000" asserts="3" />
                        </results>
                      </test-suite>
                      <test-suite name="NaNTest" executed="True" success="True" time="0.000" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Syntax.NaNTest.SupportedByConstraintBuilder" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Syntax.NaNTest.SupportedByInheritedSyntax" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Syntax.NaNTest.SupportedByStaticSyntax" executed="True" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite name="NoneTest" executed="True" success="True" time="0.000" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Syntax.NoneTest.SupportedByConstraintBuilder" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Syntax.NoneTest.SupportedByInheritedSyntax" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Syntax.NoneTest.SupportedByStaticSyntax" executed="True" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite name="NotOperatorOverride" executed="True" success="True" time="0.000" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Syntax.NotOperatorOverride.SupportedByConstraintBuilder" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Syntax.NotOperatorOverride.SupportedByInheritedSyntax" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Syntax.NotOperatorOverride.SupportedByStaticSyntax" executed="True" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite name="NotSamePathOrUnderTest_IgnoreCase" executed="True" success="True" time="0.000" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Syntax.NotSamePathOrUnderTest_IgnoreCase.SupportedByConstraintBuilder" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Syntax.NotSamePathOrUnderTest_IgnoreCase.SupportedByInheritedSyntax" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Syntax.NotSamePathOrUnderTest_IgnoreCase.SupportedByStaticSyntax" executed="True" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite name="NotSamePathOrUnderTest_RespectCase" executed="True" success="True" time="0.000" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Syntax.NotSamePathOrUnderTest_RespectCase.SupportedByConstraintBuilder" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Syntax.NotSamePathOrUnderTest_RespectCase.SupportedByInheritedSyntax" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Syntax.NotSamePathOrUnderTest_RespectCase.SupportedByStaticSyntax" executed="True" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite name="NotSamePathTest_IgnoreCase" executed="True" success="True" time="0.016" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Syntax.NotSamePathTest_IgnoreCase.SupportedByConstraintBuilder" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Syntax.NotSamePathTest_IgnoreCase.SupportedByInheritedSyntax" executed="True" success="True" time="0.016" asserts="1" />
                          <test-case name="NUnit.Framework.Syntax.NotSamePathTest_IgnoreCase.SupportedByStaticSyntax" executed="True" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite name="NotSamePathTest_RespectCase" executed="True" success="True" time="0.000" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Syntax.NotSamePathTest_RespectCase.SupportedByConstraintBuilder" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Syntax.NotSamePathTest_RespectCase.SupportedByInheritedSyntax" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Syntax.NotSamePathTest_RespectCase.SupportedByStaticSyntax" executed="True" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite name="NotTest" executed="True" success="True" time="0.000" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Syntax.NotTest.SupportedByConstraintBuilder" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Syntax.NotTest.SupportedByInheritedSyntax" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Syntax.NotTest.SupportedByStaticSyntax" executed="True" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite name="NotTest_Cascaded" executed="True" success="True" time="0.000" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Syntax.NotTest_Cascaded.SupportedByConstraintBuilder" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Syntax.NotTest_Cascaded.SupportedByInheritedSyntax" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Syntax.NotTest_Cascaded.SupportedByStaticSyntax" executed="True" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite name="NullTest" executed="True" success="True" time="0.000" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Syntax.NullTest.SupportedByConstraintBuilder" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Syntax.NullTest.SupportedByInheritedSyntax" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Syntax.NullTest.SupportedByStaticSyntax" executed="True" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite name="OperatorPrecedenceTests" executed="True" success="True" time="0.000" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Syntax.OperatorPrecedenceTests.SomeTests" executed="True" success="True" time="0.000" asserts="2" />
                          <test-case name="NUnit.Framework.Syntax.OperatorPrecedenceTests.WithTests" executed="True" success="True" time="0.000" asserts="6" />
                        </results>
                      </test-suite>
                      <test-suite name="OrOperatorOverride" executed="True" success="True" time="0.000" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Syntax.OrOperatorOverride.SupportedByConstraintBuilder" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Syntax.OrOperatorOverride.SupportedByInheritedSyntax" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Syntax.OrOperatorOverride.SupportedByStaticSyntax" executed="True" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite name="OrTest" executed="True" success="True" time="0.000" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Syntax.OrTest.SupportedByConstraintBuilder" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Syntax.OrTest.SupportedByInheritedSyntax" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Syntax.OrTest.SupportedByStaticSyntax" executed="True" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite name="OrTest_ThreeOrs" executed="True" success="True" time="0.000" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Syntax.OrTest_ThreeOrs.SupportedByConstraintBuilder" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Syntax.OrTest_ThreeOrs.SupportedByInheritedSyntax" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Syntax.OrTest_ThreeOrs.SupportedByStaticSyntax" executed="True" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite name="PropertyExistsTest" executed="True" success="True" time="0.016" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Syntax.PropertyExistsTest.SupportedByConstraintBuilder" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Syntax.PropertyExistsTest.SupportedByInheritedSyntax" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Syntax.PropertyExistsTest.SupportedByStaticSyntax" executed="True" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite name="PropertyExistsTest_AndFollows" executed="True" success="True" time="0.000" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Syntax.PropertyExistsTest_AndFollows.SupportedByConstraintBuilder" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Syntax.PropertyExistsTest_AndFollows.SupportedByInheritedSyntax" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Syntax.PropertyExistsTest_AndFollows.SupportedByStaticSyntax" executed="True" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite name="PropertySyntaxVariations" executed="True" success="True" time="0.000" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Syntax.PropertySyntaxVariations.ExistenceTest" executed="True" success="True" time="0.000" asserts="2" />
                          <test-case name="NUnit.Framework.Syntax.PropertySyntaxVariations.SeparateConstraintTest" executed="True" success="True" time="0.000" asserts="2" />
                        </results>
                      </test-suite>
                      <test-suite name="PropertyTest_ConstraintFollows" executed="True" success="True" time="0.000" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Syntax.PropertyTest_ConstraintFollows.SupportedByConstraintBuilder" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Syntax.PropertyTest_ConstraintFollows.SupportedByInheritedSyntax" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Syntax.PropertyTest_ConstraintFollows.SupportedByStaticSyntax" executed="True" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite name="PropertyTest_NotFollows" executed="True" success="True" time="0.000" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Syntax.PropertyTest_NotFollows.SupportedByConstraintBuilder" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Syntax.PropertyTest_NotFollows.SupportedByInheritedSyntax" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Syntax.PropertyTest_NotFollows.SupportedByStaticSyntax" executed="True" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite name="RegexTest" executed="True" success="True" time="0.031" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Syntax.RegexTest.SupportedByConstraintBuilder" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Syntax.RegexTest.SupportedByInheritedSyntax" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Syntax.RegexTest.SupportedByStaticSyntax" executed="True" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite name="RegexTest_IgnoreCase" executed="True" success="True" time="0.000" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Syntax.RegexTest_IgnoreCase.SupportedByConstraintBuilder" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Syntax.RegexTest_IgnoreCase.SupportedByInheritedSyntax" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Syntax.RegexTest_IgnoreCase.SupportedByStaticSyntax" executed="True" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite name="SamePathOrUnderTest" executed="True" success="True" time="0.016" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Syntax.SamePathOrUnderTest.SupportedByConstraintBuilder" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Syntax.SamePathOrUnderTest.SupportedByInheritedSyntax" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Syntax.SamePathOrUnderTest.SupportedByStaticSyntax" executed="True" success="True" time="0.016" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite name="SamePathOrUnderTest_IgnoreCase" executed="True" success="True" time="0.000" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Syntax.SamePathOrUnderTest_IgnoreCase.SupportedByConstraintBuilder" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Syntax.SamePathOrUnderTest_IgnoreCase.SupportedByInheritedSyntax" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Syntax.SamePathOrUnderTest_IgnoreCase.SupportedByStaticSyntax" executed="True" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite name="SamePathOrUnderTest_RespectCase" executed="True" success="True" time="0.000" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Syntax.SamePathOrUnderTest_RespectCase.SupportedByConstraintBuilder" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Syntax.SamePathOrUnderTest_RespectCase.SupportedByInheritedSyntax" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Syntax.SamePathOrUnderTest_RespectCase.SupportedByStaticSyntax" executed="True" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite name="SamePathTest" executed="True" success="True" time="0.000" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Syntax.SamePathTest.SupportedByConstraintBuilder" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Syntax.SamePathTest.SupportedByInheritedSyntax" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Syntax.SamePathTest.SupportedByStaticSyntax" executed="True" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite name="SamePathTest_IgnoreCase" executed="True" success="True" time="0.000" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Syntax.SamePathTest_IgnoreCase.SupportedByConstraintBuilder" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Syntax.SamePathTest_IgnoreCase.SupportedByInheritedSyntax" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Syntax.SamePathTest_IgnoreCase.SupportedByStaticSyntax" executed="True" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite name="SamePathTest_RespectCase" executed="True" success="True" time="0.000" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Syntax.SamePathTest_RespectCase.SupportedByConstraintBuilder" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Syntax.SamePathTest_RespectCase.SupportedByInheritedSyntax" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Syntax.SamePathTest_RespectCase.SupportedByStaticSyntax" executed="True" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite name="SomeTest" executed="True" success="True" time="0.000" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Syntax.SomeTest.SupportedByConstraintBuilder" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Syntax.SomeTest.SupportedByInheritedSyntax" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Syntax.SomeTest.SupportedByStaticSyntax" executed="True" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite name="SomeTest_BeforeBinaryOperators" executed="True" success="True" time="0.000" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Syntax.SomeTest_BeforeBinaryOperators.SupportedByConstraintBuilder" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Syntax.SomeTest_BeforeBinaryOperators.SupportedByInheritedSyntax" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Syntax.SomeTest_BeforeBinaryOperators.SupportedByStaticSyntax" executed="True" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite name="SomeTest_NestedSome" executed="True" success="True" time="0.016" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Syntax.SomeTest_NestedSome.SupportedByConstraintBuilder" executed="True" success="True" time="0.016" asserts="1" />
                          <test-case name="NUnit.Framework.Syntax.SomeTest_NestedSome.SupportedByInheritedSyntax" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Syntax.SomeTest_NestedSome.SupportedByStaticSyntax" executed="True" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite name="SomeTest_UseOfAndSome" executed="True" success="True" time="0.000" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Syntax.SomeTest_UseOfAndSome.SupportedByConstraintBuilder" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Syntax.SomeTest_UseOfAndSome.SupportedByInheritedSyntax" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Syntax.SomeTest_UseOfAndSome.SupportedByStaticSyntax" executed="True" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite name="StartsWithTest" executed="True" success="True" time="0.000" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Syntax.StartsWithTest.SupportedByConstraintBuilder" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Syntax.StartsWithTest.SupportedByInheritedSyntax" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Syntax.StartsWithTest.SupportedByStaticSyntax" executed="True" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite name="StartsWithTest_IgnoreCase" executed="True" success="True" time="0.000" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Syntax.StartsWithTest_IgnoreCase.SupportedByConstraintBuilder" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Syntax.StartsWithTest_IgnoreCase.SupportedByInheritedSyntax" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Syntax.StartsWithTest_IgnoreCase.SupportedByStaticSyntax" executed="True" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite name="SubstringTest" executed="True" success="True" time="0.016" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Syntax.SubstringTest.SupportedByConstraintBuilder" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Syntax.SubstringTest.SupportedByInheritedSyntax" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Syntax.SubstringTest.SupportedByStaticSyntax" executed="True" success="True" time="0.016" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite name="SubstringTest_IgnoreCase" executed="True" success="True" time="0.000" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Syntax.SubstringTest_IgnoreCase.SupportedByConstraintBuilder" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Syntax.SubstringTest_IgnoreCase.SupportedByInheritedSyntax" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Syntax.SubstringTest_IgnoreCase.SupportedByStaticSyntax" executed="True" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite name="TextContains" executed="True" success="True" time="0.000" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Syntax.TextContains.SupportedByConstraintBuilder" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Syntax.TextContains.SupportedByInheritedSyntax" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Syntax.TextContains.SupportedByStaticSyntax" executed="True" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite name="TextEndsWithTest" executed="True" success="True" time="0.000" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Syntax.TextEndsWithTest.SupportedByConstraintBuilder" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Syntax.TextEndsWithTest.SupportedByInheritedSyntax" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Syntax.TextEndsWithTest.SupportedByStaticSyntax" executed="True" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite name="TextMatchesTest" executed="True" success="True" time="0.000" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Syntax.TextMatchesTest.SupportedByConstraintBuilder" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Syntax.TextMatchesTest.SupportedByInheritedSyntax" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Syntax.TextMatchesTest.SupportedByStaticSyntax" executed="True" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite name="TextStartsWithTest" executed="True" success="True" time="0.000" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Syntax.TextStartsWithTest.SupportedByConstraintBuilder" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Syntax.TextStartsWithTest.SupportedByInheritedSyntax" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Syntax.TextStartsWithTest.SupportedByStaticSyntax" executed="True" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite name="ThrowsTests" executed="True" success="True" time="0.031" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Syntax.ThrowsTests.DelegateThrowsException" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Syntax.ThrowsTests.ThrowsArgumentException" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Syntax.ThrowsTests.ThrowsException" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Syntax.ThrowsTests.ThrowsExceptionInstanceOf" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Syntax.ThrowsTests.ThrowsExceptionTypeOf" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Syntax.ThrowsTests.ThrowsExceptionTypeOfAndConstraint" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Syntax.ThrowsTests.ThrowsExceptionWithConstraint" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Syntax.ThrowsTests.ThrowsExceptionWithInnerException" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Syntax.ThrowsTests.ThrowsInnerException" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Syntax.ThrowsTests.ThrowsInstanceOf" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Syntax.ThrowsTests.ThrowsInvalidOperationException" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Syntax.ThrowsTests.ThrowsTargetInvocationExceptionWithInnerException" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Syntax.ThrowsTests.ThrowsTypeOf" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Syntax.ThrowsTests.ThrowsTypeOfAndConstraint" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Syntax.ThrowsTests.ThrowsTypeOfWithConstraint" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Syntax.ThrowsTests.ThrowsTypeOfWithInnerException" executed="True" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite name="TrueTest" executed="True" success="True" time="0.000" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Syntax.TrueTest.SupportedByConstraintBuilder" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Syntax.TrueTest.SupportedByInheritedSyntax" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Syntax.TrueTest.SupportedByStaticSyntax" executed="True" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite name="UniqueTest" executed="True" success="True" time="0.000" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Syntax.UniqueTest.SupportedByConstraintBuilder" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Syntax.UniqueTest.SupportedByInheritedSyntax" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Syntax.UniqueTest.SupportedByStaticSyntax" executed="True" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite name="XmlSerializableTest" executed="True" success="True" time="0.000" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Syntax.XmlSerializableTest.SupportedByConstraintBuilder" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Syntax.XmlSerializableTest.SupportedByInheritedSyntax" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Syntax.XmlSerializableTest.SupportedByStaticSyntax" executed="True" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite name="Tests" executed="True" success="True" time="2.141" asserts="0">
                    <results>
                      <test-suite name="ArrayEqualsFailureMessageFixture" executed="True" success="True" time="0.156" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Tests.ArrayEqualsFailureMessageFixture.ActualArrayIsLonger" executed="True" success="True" time="0.000" asserts="2" />
                          <test-case name="NUnit.Framework.Tests.ArrayEqualsFailureMessageFixture.ArrayAndCollection_Failure" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Tests.ArrayEqualsFailureMessageFixture.ArraysDeclaredAsDifferentTypes" executed="True" success="True" time="0.109" asserts="2" />
                          <test-case name="NUnit.Framework.Tests.ArrayEqualsFailureMessageFixture.ArraysHaveDifferentRanks" executed="True" success="True" time="0.016" asserts="2" />
                          <test-case name="NUnit.Framework.Tests.ArrayEqualsFailureMessageFixture.ArraysWithDifferentDimensionsAsCollection" executed="True" success="True" time="0.000" asserts="2" />
                          <test-case name="NUnit.Framework.Tests.ArrayEqualsFailureMessageFixture.ArraysWithDifferentRanksAsCollection" executed="True" success="True" time="0.000" asserts="2" />
                          <test-case name="NUnit.Framework.Tests.ArrayEqualsFailureMessageFixture.DifferentArrayTypesEqualFails" executed="True" success="True" time="0.000" asserts="2" />
                          <test-case name="NUnit.Framework.Tests.ArrayEqualsFailureMessageFixture.DoubleDimensionedArrays" executed="True" success="True" time="0.000" asserts="2" />
                          <test-case name="NUnit.Framework.Tests.ArrayEqualsFailureMessageFixture.ExpectedArrayIsLonger" executed="True" success="True" time="0.000" asserts="2" />
                          <test-case name="NUnit.Framework.Tests.ArrayEqualsFailureMessageFixture.FailureOnSingleDimensionedArrays" executed="True" success="True" time="0.000" asserts="2" />
                          <test-case name="NUnit.Framework.Tests.ArrayEqualsFailureMessageFixture.FiveDimensionedArrays" executed="True" success="True" time="0.000" asserts="2" />
                          <test-case name="NUnit.Framework.Tests.ArrayEqualsFailureMessageFixture.JaggedArrayComparedToSimpleArray" executed="True" success="True" time="0.000" asserts="2" />
                          <test-case name="NUnit.Framework.Tests.ArrayEqualsFailureMessageFixture.JaggedArrays" executed="True" success="True" time="0.016" asserts="2" />
                          <test-case name="NUnit.Framework.Tests.ArrayEqualsFailureMessageFixture.SameLengthDifferentContent" executed="True" success="True" time="0.000" asserts="2" />
                          <test-case name="NUnit.Framework.Tests.ArrayEqualsFailureMessageFixture.TripleDimensionedArrays" executed="True" success="True" time="0.000" asserts="2" />
                        </results>
                      </test-suite>
                      <test-suite name="ArrayEqualsFixture" executed="True" success="True" time="0.016" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Tests.ArrayEqualsFixture.ArrayAndCollection" executed="True" success="True" time="0.000" asserts="4" />
                          <test-case name="NUnit.Framework.Tests.ArrayEqualsFixture.ArrayIsEqualToItself" executed="True" success="True" time="0.000" asserts="3" />
                          <test-case name="NUnit.Framework.Tests.ArrayEqualsFixture.ArrayOfIntAndArrayOfDouble" executed="True" success="True" time="0.000" asserts="4" />
                          <test-case name="NUnit.Framework.Tests.ArrayEqualsFixture.ArraysDeclaredAsDifferentTypes" executed="True" success="True" time="0.000" asserts="4" />
                          <test-case name="NUnit.Framework.Tests.ArrayEqualsFixture.ArraysOfArrays" executed="True" success="True" time="0.000" asserts="4" />
                          <test-case name="NUnit.Framework.Tests.ArrayEqualsFixture.ArraysOfDecimal" executed="True" success="True" time="0.000" asserts="4" />
                          <test-case name="NUnit.Framework.Tests.ArrayEqualsFixture.ArraysOfDouble" executed="True" success="True" time="0.000" asserts="4" />
                          <test-case name="NUnit.Framework.Tests.ArrayEqualsFixture.ArraysOfInt" executed="True" success="True" time="0.000" asserts="4" />
                          <test-case name="NUnit.Framework.Tests.ArrayEqualsFixture.ArraysOfMixedTypes" executed="True" success="True" time="0.000" asserts="4" />
                          <test-case name="NUnit.Framework.Tests.ArrayEqualsFixture.ArraysOfString" executed="True" success="True" time="0.000" asserts="5" />
                          <test-case name="NUnit.Framework.Tests.ArrayEqualsFixture.ArraysPassedAsObjects" executed="True" success="True" time="0.000" asserts="4" />
                          <test-case name="NUnit.Framework.Tests.ArrayEqualsFixture.ArraysWithDifferentDimensionsMatchedAsCollection" executed="True" success="True" time="0.000" asserts="3" />
                          <test-case name="NUnit.Framework.Tests.ArrayEqualsFixture.ArraysWithDifferentRanksComparedAsCollection" executed="True" success="True" time="0.000" asserts="3" />
                          <test-case name="NUnit.Framework.Tests.ArrayEqualsFixture.DoubleDimensionedArrays" executed="True" success="True" time="0.000" asserts="4" />
                          <test-case name="NUnit.Framework.Tests.ArrayEqualsFixture.FiveDimensionedArrays" executed="True" success="True" time="0.000" asserts="2" />
                          <test-case name="NUnit.Framework.Tests.ArrayEqualsFixture.JaggedArrays" executed="True" success="True" time="0.000" asserts="2" />
                          <test-case name="NUnit.Framework.Tests.ArrayEqualsFixture.TripleDimensionedArrays" executed="True" success="True" time="0.000" asserts="2" />
                        </results>
                      </test-suite>
                      <test-suite name="ArrayNotEqualFixture" executed="True" success="True" time="0.000" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Tests.ArrayNotEqualFixture.ArraysDeclaredAsDifferentTypes" executed="True" success="True" time="0.000" asserts="3" />
                          <test-case name="NUnit.Framework.Tests.ArrayNotEqualFixture.DifferentLengthArrays" executed="True" success="True" time="0.000" asserts="4" />
                          <test-case name="NUnit.Framework.Tests.ArrayNotEqualFixture.SameLengthDifferentContent" executed="True" success="True" time="0.000" asserts="4" />
                        </results>
                      </test-suite>
                      <test-suite name="AssertThrowsTests" executed="True" success="True" time="0.063" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Tests.AssertThrowsTests.BaseExceptionThrown" executed="True" success="True" time="0.016" asserts="2" />
                          <test-case name="NUnit.Framework.Tests.AssertThrowsTests.CanCatchExceptionOfDerivedType" executed="True" success="True" time="0.000" asserts="4" />
                          <test-case name="NUnit.Framework.Tests.AssertThrowsTests.CanCatchExceptionOfExactType" executed="True" success="True" time="0.000" asserts="4" />
                          <test-case name="NUnit.Framework.Tests.AssertThrowsTests.CanCatchUnspecifiedException" executed="True" success="True" time="0.000" asserts="4" />
                          <test-case name="NUnit.Framework.Tests.AssertThrowsTests.CorrectExceptionIsReturnedToMethod" executed="True" success="True" time="0.000" asserts="16" />
                          <test-case name="NUnit.Framework.Tests.AssertThrowsTests.CorrectExceptionThrown" executed="True" success="True" time="0.000" asserts="5" />
                          <test-case name="NUnit.Framework.Tests.AssertThrowsTests.DerivedExceptionThrown" executed="True" success="True" time="0.000" asserts="2" />
                          <test-case name="NUnit.Framework.Tests.AssertThrowsTests.DoesNotThrowFails" executed="True" success="True" time="0.031" asserts="0" />
                          <test-case name="NUnit.Framework.Tests.AssertThrowsTests.DoesNotThrowSuceeds" executed="True" success="True" time="0.000" asserts="0" />
                          <test-case name="NUnit.Framework.Tests.AssertThrowsTests.NoExceptionThrown" executed="True" success="True" time="0.000" asserts="2" />
                          <test-case name="NUnit.Framework.Tests.AssertThrowsTests.UnrelatedExceptionThrown" executed="True" success="True" time="0.000" asserts="2" />
                        </results>
                      </test-suite>
                      <test-suite name="AssumeThatTests" executed="True" success="True" time="0.016" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Tests.AssumeThatTests.AssumptionPasses_ActualAndConstraint" executed="True" success="True" time="0.000" asserts="0" />
                          <test-case name="NUnit.Framework.Tests.AssumeThatTests.AssumptionPasses_Boolean" executed="True" success="True" time="0.000" asserts="0" />
                          <test-case name="NUnit.Framework.Tests.AssumeThatTests.AssumptionPasses_DelegateAndConstraint" executed="True" success="True" time="0.000" asserts="0" />
                          <test-case name="NUnit.Framework.Tests.AssumeThatTests.AssumptionPasses_ReferenceAndConstraint" executed="True" success="True" time="0.000" asserts="0" />
                          <test-case name="NUnit.Framework.Tests.AssumeThatTests.FailureThrowsInconclusiveException_ActualAndConstraint" executed="True" success="True" time="0.000" asserts="0" />
                          <test-case name="NUnit.Framework.Tests.AssumeThatTests.FailureThrowsInconclusiveException_Boolean" executed="True" success="True" time="0.000" asserts="0" />
                          <test-case name="NUnit.Framework.Tests.AssumeThatTests.FailureThrowsInconclusiveException_DelegateAndConstraint" executed="True" success="True" time="0.000" asserts="0" />
                          <test-case name="NUnit.Framework.Tests.AssumeThatTests.FailureThrowsInconclusiveException_ReferenceAndConstraint" executed="True" success="True" time="0.000" asserts="0" />
                        </results>
                      </test-suite>
                      <test-suite name="CollectionAssertTest" executed="True" success="True" time="0.109" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Tests.CollectionAssertTest.AreEqual" executed="True" success="True" time="0.000" asserts="3" />
                          <test-case name="NUnit.Framework.Tests.CollectionAssertTest.AreEqual_HandlesNull" executed="True" success="True" time="0.000" asserts="2" />
                          <test-case name="NUnit.Framework.Tests.CollectionAssertTest.AreEqual_UsingIterator" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Tests.CollectionAssertTest.AreEqualFail" executed="True" success="True" time="0.000" asserts="2" />
                          <test-case name="NUnit.Framework.Tests.CollectionAssertTest.AreEqualFailCount" executed="True" success="True" time="0.000" asserts="2" />
                          <test-case name="NUnit.Framework.Tests.CollectionAssertTest.AreEquivalentHandlesNull" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Tests.CollectionAssertTest.AreNotEqual" executed="True" success="True" time="0.000" asserts="6" />
                          <test-case name="NUnit.Framework.Tests.CollectionAssertTest.AreNotEqual_Fails" executed="True" success="True" time="0.000" asserts="2" />
                          <test-case name="NUnit.Framework.Tests.CollectionAssertTest.AreNotEqual_HandlesNull" executed="True" success="True" time="0.000" asserts="2" />
                          <test-case name="NUnit.Framework.Tests.CollectionAssertTest.Contains_ICollection" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Tests.CollectionAssertTest.Contains_IList" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Tests.CollectionAssertTest.ContainsFails_EmptyICollection" executed="True" success="True" time="0.000" asserts="2" />
                          <test-case name="NUnit.Framework.Tests.CollectionAssertTest.ContainsFails_EmptyIList" executed="True" success="True" time="0.016" asserts="2" />
                          <test-case name="NUnit.Framework.Tests.CollectionAssertTest.ContainsFails_ICollection" executed="True" success="True" time="0.000" asserts="2" />
                          <test-case name="NUnit.Framework.Tests.CollectionAssertTest.ContainsFails_ILIst" executed="True" success="True" time="0.000" asserts="2" />
                          <test-case name="NUnit.Framework.Tests.CollectionAssertTest.ContainsNull_ICollection" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Tests.CollectionAssertTest.ContainsNull_IList" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Tests.CollectionAssertTest.DoesNotContain" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Tests.CollectionAssertTest.DoesNotContain_Empty" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Tests.CollectionAssertTest.DoesNotContain_Fails" executed="True" success="True" time="0.000" asserts="2" />
                          <test-case name="NUnit.Framework.Tests.CollectionAssertTest.EnsureComparerIsUsed" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Tests.CollectionAssertTest.Equivalent" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Tests.CollectionAssertTest.EquivalentFailOne" executed="True" success="True" time="0.000" asserts="2" />
                          <test-case name="NUnit.Framework.Tests.CollectionAssertTest.EquivalentFailTwo" executed="True" success="True" time="0.000" asserts="2" />
                          <test-case name="NUnit.Framework.Tests.CollectionAssertTest.IsNotSubsetOf" executed="True" success="True" time="0.000" asserts="2" />
                          <test-case name="NUnit.Framework.Tests.CollectionAssertTest.IsNotSubsetOf_Fails" executed="True" success="True" time="0.000" asserts="2" />
                          <test-case name="NUnit.Framework.Tests.CollectionAssertTest.IsNotSubsetOfHandlesNull" executed="True" success="True" time="0.016" asserts="1" />
                          <test-case name="NUnit.Framework.Tests.CollectionAssertTest.IsOrdered" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Tests.CollectionAssertTest.IsOrdered_Allows_adjacent_equal_values" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Tests.CollectionAssertTest.IsOrdered_ContainedTypesMustBeCompatible" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Tests.CollectionAssertTest.IsOrdered_Fails" executed="True" success="True" time="0.000" asserts="2" />
                          <test-case name="NUnit.Framework.Tests.CollectionAssertTest.IsOrdered_Handles_custom_comparison" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Tests.CollectionAssertTest.IsOrdered_Handles_custom_comparison2" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Tests.CollectionAssertTest.IsOrdered_Handles_null" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Tests.CollectionAssertTest.IsOrdered_TypesMustImplementIComparable" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Tests.CollectionAssertTest.IsSubsetOf" executed="True" success="True" time="0.000" asserts="2" />
                          <test-case name="NUnit.Framework.Tests.CollectionAssertTest.IsSubsetOf_Fails" executed="True" success="True" time="0.000" asserts="2" />
                          <test-case name="NUnit.Framework.Tests.CollectionAssertTest.IsSubsetOfHandlesNull" executed="True" success="True" time="0.000" asserts="2" />
                          <test-case name="NUnit.Framework.Tests.CollectionAssertTest.ItemsNotNull" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Tests.CollectionAssertTest.ItemsNotNullFailure" executed="True" success="True" time="0.000" asserts="2" />
                          <test-case name="NUnit.Framework.Tests.CollectionAssertTest.ItemsOfType" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Tests.CollectionAssertTest.ItemsOfTypeFailure" executed="True" success="True" time="0.016" asserts="2" />
                          <test-case name="NUnit.Framework.Tests.CollectionAssertTest.NotEquivalent" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Tests.CollectionAssertTest.NotEquivalent_Fails" executed="True" success="True" time="0.000" asserts="2" />
                          <test-case name="NUnit.Framework.Tests.CollectionAssertTest.NotEquivalentHandlesNull" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Tests.CollectionAssertTest.Unique_WithNull" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Tests.CollectionAssertTest.Unique_WithObjects" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Tests.CollectionAssertTest.Unique_WithStrings" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Tests.CollectionAssertTest.UniqueFailure" executed="True" success="True" time="0.000" asserts="2" />
                          <test-case name="NUnit.Framework.Tests.CollectionAssertTest.UniqueFailure_WithTwoNulls" executed="True" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite name="ConditionAssertTests" executed="True" success="True" time="0.047" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Tests.ConditionAssertTests.IsEmpty" executed="True" success="True" time="0.000" asserts="4" />
                          <test-case name="NUnit.Framework.Tests.ConditionAssertTests.IsEmptyFailsOnNonEmptyArray" executed="True" success="True" time="0.000" asserts="2" />
                          <test-case name="NUnit.Framework.Tests.ConditionAssertTests.IsEmptyFailsOnNullString" executed="True" success="True" time="0.000" asserts="2" />
                          <test-case name="NUnit.Framework.Tests.ConditionAssertTests.IsEmptyFailsOnString" executed="True" success="True" time="0.000" asserts="2" />
                          <test-case name="NUnit.Framework.Tests.ConditionAssertTests.IsFalse" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Tests.ConditionAssertTests.IsFalseFails" executed="True" success="True" time="0.000" asserts="2" />
                          <test-case name="NUnit.Framework.Tests.ConditionAssertTests.IsNaN" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Tests.ConditionAssertTests.IsNaNFails" executed="True" success="True" time="0.016" asserts="2" />
                          <test-case name="NUnit.Framework.Tests.ConditionAssertTests.IsNotEmpty" executed="True" success="True" time="0.000" asserts="4" />
                          <test-case name="NUnit.Framework.Tests.ConditionAssertTests.IsNotEmptyFailsOnEmptyArray" executed="True" success="True" time="0.000" asserts="2" />
                          <test-case name="NUnit.Framework.Tests.ConditionAssertTests.IsNotEmptyFailsOnEmptyArrayList" executed="True" success="True" time="0.000" asserts="2" />
                          <test-case name="NUnit.Framework.Tests.ConditionAssertTests.IsNotEmptyFailsOnEmptyHashTable" executed="True" success="True" time="0.000" asserts="2" />
                          <test-case name="NUnit.Framework.Tests.ConditionAssertTests.IsNotEmptyFailsOnEmptyString" executed="True" success="True" time="0.000" asserts="2" />
                          <test-case name="NUnit.Framework.Tests.ConditionAssertTests.IsNotNull" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Tests.ConditionAssertTests.IsNotNullFails" executed="True" success="True" time="0.000" asserts="2" />
                          <test-case name="NUnit.Framework.Tests.ConditionAssertTests.IsNull" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Tests.ConditionAssertTests.IsNullFails" executed="True" success="True" time="0.000" asserts="2" />
                          <test-case name="NUnit.Framework.Tests.ConditionAssertTests.IsTrue" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Tests.ConditionAssertTests.IsTrueFails" executed="True" success="True" time="0.000" asserts="2" />
                        </results>
                      </test-suite>
                      <test-suite name="DirectoryAssertTests" executed="True" success="True" time="0.922" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Tests.DirectoryAssertTests.AreEqualFailsWhenOneDoesNotExist" executed="True" success="True" time="0.031" asserts="1" />
                          <test-case name="NUnit.Framework.Tests.DirectoryAssertTests.AreEqualFailsWhenOneIsNull" executed="True" success="True" time="0.031" asserts="1" />
                          <test-case name="NUnit.Framework.Tests.DirectoryAssertTests.AreEqualFailsWithDirectoryInfos" executed="True" success="True" time="0.063" asserts="1" />
                          <test-case name="NUnit.Framework.Tests.DirectoryAssertTests.AreEqualFailsWithStringPath" executed="True" success="True" time="0.109" asserts="1" />
                          <test-case name="NUnit.Framework.Tests.DirectoryAssertTests.AreEqualPassesWhenBothAreNull" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Tests.DirectoryAssertTests.AreEqualPassesWithDirectoryInfos" executed="True" success="True" time="0.031" asserts="1" />
                          <test-case name="NUnit.Framework.Tests.DirectoryAssertTests.AreEqualPassesWithStringPath" executed="True" success="True" time="0.016" asserts="1" />
                          <test-case name="NUnit.Framework.Tests.DirectoryAssertTests.AreNotEqualFailsWhenBothAreNull" executed="True" success="True" time="0.000" asserts="2" />
                          <test-case name="NUnit.Framework.Tests.DirectoryAssertTests.AreNotEqualFailsWithDirectoryInfos" executed="True" success="True" time="0.031" asserts="1" />
                          <test-case name="NUnit.Framework.Tests.DirectoryAssertTests.AreNotEqualFailsWithStringPath" executed="True" success="True" time="0.016" asserts="1" />
                          <test-case name="NUnit.Framework.Tests.DirectoryAssertTests.AreNotEqualPassesIfOneIsNull" executed="True" success="True" time="0.031" asserts="1" />
                          <test-case name="NUnit.Framework.Tests.DirectoryAssertTests.AreNotEqualPassesWhenOneDoesNotExist" executed="True" success="True" time="0.016" asserts="1" />
                          <test-case name="NUnit.Framework.Tests.DirectoryAssertTests.AreNotEqualPassesWithStringPath" executed="True" success="True" time="0.063" asserts="1" />
                          <test-case name="NUnit.Framework.Tests.DirectoryAssertTests.IsEmptyFailsWithInvalidDirectory" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Tests.DirectoryAssertTests.IsEmptyFailsWithNonEmptyDirectoryUsingDirectoryInfo" executed="True" success="True" time="0.031" asserts="1" />
                          <test-case name="NUnit.Framework.Tests.DirectoryAssertTests.IsEmptyFailsWithNonEmptyDirectoryUsingStringPath" executed="True" success="True" time="0.031" asserts="1" />
                          <test-case name="NUnit.Framework.Tests.DirectoryAssertTests.IsEmptyPassesWithEmptyDirectoryUsingDirectoryInfo" executed="True" success="True" time="0.016" asserts="1" />
                          <test-case name="NUnit.Framework.Tests.DirectoryAssertTests.IsEmptyPassesWithEmptyDirectoryUsingStringPath" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Tests.DirectoryAssertTests.IsEmptyThrowsUsingNull" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Tests.DirectoryAssertTests.IsNotEmptyFailsWithEmptyDirectoryUsingDirectoryInfo" executed="True" success="True" time="0.016" asserts="1" />
                          <test-case name="NUnit.Framework.Tests.DirectoryAssertTests.IsNotEmptyFailsWithEmptyDirectoryUsingStringPath" executed="True" success="True" time="0.031" asserts="1" />
                          <test-case name="NUnit.Framework.Tests.DirectoryAssertTests.IsNotEmptyFailsWithInvalidDirectory" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Tests.DirectoryAssertTests.IsNotEmptyPassesWithNonEmptyDirectoryUsingDirectoryInfo" executed="True" success="True" time="0.078" asserts="1" />
                          <test-case name="NUnit.Framework.Tests.DirectoryAssertTests.IsNotEmptyPassesWithNonEmptyDirectoryUsingStringPath" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Tests.DirectoryAssertTests.IsNotEmptyThrowsUsingNull" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Tests.DirectoryAssertTests.IsNotWithinFailsWithDirectoryInfo" executed="True" success="True" time="0.047" asserts="1" />
                          <test-case name="NUnit.Framework.Tests.DirectoryAssertTests.IsNotWithinFailsWithStringPath" executed="True" success="True" time="0.031" asserts="1" />
                          <test-case name="NUnit.Framework.Tests.DirectoryAssertTests.IsNotWithinPassesWhenOutsidePathUsingDirectoryInfo" executed="True" success="True" time="0.031" asserts="1" />
                          <test-case name="NUnit.Framework.Tests.DirectoryAssertTests.IsNotWithinPassesWhenOutsidePathUsingStringPath" executed="True" success="True" time="0.016" asserts="1" />
                          <test-case name="NUnit.Framework.Tests.DirectoryAssertTests.IsNotWithinThrowsWhenBothAreNull" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Tests.DirectoryAssertTests.IsWithinFailsWhenOutsidePathUsingDirectoryInfo" executed="True" success="True" time="0.047" asserts="1" />
                          <test-case name="NUnit.Framework.Tests.DirectoryAssertTests.IsWithinFailsWhenOutsidePathUsingStringPath" executed="True" success="True" time="0.016" asserts="1" />
                          <test-case name="NUnit.Framework.Tests.DirectoryAssertTests.IsWithinPassesWithDirectoryInfo" executed="True" success="True" time="0.016" asserts="1" />
                          <test-case name="NUnit.Framework.Tests.DirectoryAssertTests.IsWithinPassesWithStringPath" executed="True" success="True" time="0.031" asserts="1" />
                          <test-case name="NUnit.Framework.Tests.DirectoryAssertTests.IsWithinThrowsWhenBothAreNull" executed="True" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite name="EqualsFixture" executed="True" success="True" time="0.078" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Tests.EqualsFixture.Bug575936Int32Int64Comparison" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Tests.EqualsFixture.Byte" executed="True" success="True" time="0.000" asserts="2" />
                          <test-case name="NUnit.Framework.Tests.EqualsFixture.DateTimeEqual" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Tests.EqualsFixture.DateTimeNotEqual" executed="True" success="True" time="0.000" asserts="2" />
                          <test-case name="NUnit.Framework.Tests.EqualsFixture.Decimal" executed="True" success="True" time="0.000" asserts="6" />
                          <test-case name="NUnit.Framework.Tests.EqualsFixture.DoubleNotEqualMessageDisplaysAllDigits" executed="True" success="True" time="0.000" asserts="2" />
                          <test-case name="NUnit.Framework.Tests.EqualsFixture.DoubleNotEqualMessageDisplaysDefaultTolerance" executed="True" success="True" time="0.000" asserts="2" />
                          <test-case name="NUnit.Framework.Tests.EqualsFixture.DoubleNotEqualMessageDisplaysTolerance" executed="True" success="True" time="0.016" asserts="2" />
                          <test-case name="NUnit.Framework.Tests.EqualsFixture.DoubleNotEqualWithNanDoesNotDisplayDefaultTolerance" executed="True" success="True" time="0.000" asserts="2" />
                          <test-case name="NUnit.Framework.Tests.EqualsFixture.EnumsEqual" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Tests.EqualsFixture.EnumsNotEqual" executed="True" success="True" time="0.000" asserts="2" />
                          <test-case name="NUnit.Framework.Tests.EqualsFixture.Equals" executed="True" success="True" time="0.000" asserts="2" />
                          <test-case name="NUnit.Framework.Tests.EqualsFixture.EqualsFail" executed="True" success="True" time="0.000" asserts="2" />
                          <test-case name="NUnit.Framework.Tests.EqualsFixture.EqualsNaNFails" executed="True" success="True" time="0.016" asserts="2" />
                          <test-case name="NUnit.Framework.Tests.EqualsFixture.EqualsNull" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Tests.EqualsFixture.EqualsSameTypes" executed="True" success="True" time="0.000" asserts="31" />
                          <test-case name="NUnit.Framework.Tests.EqualsFixture.EqualsThrowsException" executed="True" success="True" time="0.000" asserts="0" />
                          <test-case name="NUnit.Framework.Tests.EqualsFixture.Float" executed="True" success="True" time="0.000" asserts="2" />
                          <test-case name="NUnit.Framework.Tests.EqualsFixture.FloatNotEqualMessageDisplaysAllDigits" executed="True" success="True" time="0.000" asserts="2" />
                          <test-case name="NUnit.Framework.Tests.EqualsFixture.FloatNotEqualMessageDisplaysTolerance" executed="True" success="True" time="0.000" asserts="2" />
                          <test-case name="NUnit.Framework.Tests.EqualsFixture.Int" executed="True" success="True" time="0.000" asserts="2" />
                          <test-case name="NUnit.Framework.Tests.EqualsFixture.IntegerEquals" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Tests.EqualsFixture.IntegerLongComparison" executed="True" success="True" time="0.000" asserts="2" />
                          <test-case name="NUnit.Framework.Tests.EqualsFixture.NanEqualsFails" executed="True" success="True" time="0.000" asserts="2" />
                          <test-case name="NUnit.Framework.Tests.EqualsFixture.NanEqualsNaNSucceeds" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Tests.EqualsFixture.NegInfinityEqualsInfinity" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Tests.EqualsFixture.PosInfinityEqualsInfinity" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Tests.EqualsFixture.PosInfinityNotEquals" executed="True" success="True" time="0.000" asserts="2" />
                          <test-case name="NUnit.Framework.Tests.EqualsFixture.PosInfinityNotEqualsNegInfinity" executed="True" success="True" time="0.000" asserts="2" />
                          <test-case name="NUnit.Framework.Tests.EqualsFixture.ReferenceEqualsThrowsException" executed="True" success="True" time="0.000" asserts="0" />
                          <test-case name="NUnit.Framework.Tests.EqualsFixture.Short" executed="True" success="True" time="0.000" asserts="2" />
                          <test-case name="NUnit.Framework.Tests.EqualsFixture.SinglePosInfinityNotEqualsNegInfinity" executed="True" success="True" time="0.016" asserts="2" />
                          <test-case name="NUnit.Framework.Tests.EqualsFixture.String" executed="True" success="True" time="0.000" asserts="2" />
                          <test-case name="NUnit.Framework.Tests.EqualsFixture.UInt" executed="True" success="True" time="0.000" asserts="2" />
                        </results>
                      </test-suite>
                      <test-suite name="FileAssertTests" executed="True" success="True" time="0.266" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Tests.FileAssertTests.AreEqualFailsWhenOneIsNull" executed="True" success="True" time="0.016" asserts="2" />
                          <test-case name="NUnit.Framework.Tests.FileAssertTests.AreEqualFailsWithFileInfos" executed="True" success="True" time="0.016" asserts="2" />
                          <test-case name="NUnit.Framework.Tests.FileAssertTests.AreEqualFailsWithFiles" executed="True" success="True" time="0.016" asserts="2" />
                          <test-case name="NUnit.Framework.Tests.FileAssertTests.AreEqualFailsWithStreams" executed="True" success="True" time="0.016" asserts="2" />
                          <test-case name="NUnit.Framework.Tests.FileAssertTests.AreEqualFailsWithTextFilesAfterReadingBothFiles" executed="True" success="True" time="0.016" asserts="2" />
                          <test-case name="NUnit.Framework.Tests.FileAssertTests.AreEqualPassesUsingSameFileTwice" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Tests.FileAssertTests.AreEqualPassesWhenBothAreNull" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Tests.FileAssertTests.AreEqualPassesWithEqualStreams" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Tests.FileAssertTests.AreEqualPassesWithFileInfos" executed="True" success="True" time="0.016" asserts="2" />
                          <test-case name="NUnit.Framework.Tests.FileAssertTests.AreEqualPassesWithFiles" executed="True" success="True" time="0.016" asserts="1" />
                          <test-case name="NUnit.Framework.Tests.FileAssertTests.AreEqualPassesWithSameStream" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Tests.FileAssertTests.AreEqualPassesWithTextFiles" executed="True" success="True" time="0.016" asserts="1" />
                          <test-case name="NUnit.Framework.Tests.FileAssertTests.AreNotEqualFailsWhenBothAreNull" executed="True" success="True" time="0.000" asserts="2" />
                          <test-case name="NUnit.Framework.Tests.FileAssertTests.AreNotEqualFailsWithFileInfos" executed="True" success="True" time="0.016" asserts="2" />
                          <test-case name="NUnit.Framework.Tests.FileAssertTests.AreNotEqualFailsWithFiles" executed="True" success="True" time="0.000" asserts="2" />
                          <test-case name="NUnit.Framework.Tests.FileAssertTests.AreNotEqualFailsWithStreams" executed="True" success="True" time="0.016" asserts="2" />
                          <test-case name="NUnit.Framework.Tests.FileAssertTests.AreNotEqualIteratesOverTheEntireFile" executed="True" success="True" time="0.016" asserts="1" />
                          <test-case name="NUnit.Framework.Tests.FileAssertTests.AreNotEqualIteratesOverTheEntireFileAndFails" executed="True" success="True" time="0.016" asserts="2" />
                          <test-case name="NUnit.Framework.Tests.FileAssertTests.AreNotEqualPassesIfOneIsNull" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Tests.FileAssertTests.AreNotEqualPassesWithFileInfos" executed="True" success="True" time="0.016" asserts="1" />
                          <test-case name="NUnit.Framework.Tests.FileAssertTests.AreNotEqualPassesWithFiles" executed="True" success="True" time="0.016" asserts="1" />
                          <test-case name="NUnit.Framework.Tests.FileAssertTests.AreNotEqualPassesWithStreams" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Tests.FileAssertTests.NonReadableStreamGivesException" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Tests.FileAssertTests.NonSeekableStreamGivesException" executed="True" success="True" time="0.016" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite name="GreaterEqualFixture" executed="True" success="True" time="0.094" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Tests.GreaterEqualFixture.FailureMessage" executed="True" success="True" time="0.000" asserts="3" />
                          <test-case name="NUnit.Framework.Tests.GreaterEqualFixture.GreaterOrEqual_Decimal" executed="True" success="True" time="0.000" asserts="2" />
                          <test-case name="NUnit.Framework.Tests.GreaterEqualFixture.GreaterOrEqual_Double" executed="True" success="True" time="0.000" asserts="2" />
                          <test-case name="NUnit.Framework.Tests.GreaterEqualFixture.GreaterOrEqual_Float" executed="True" success="True" time="0.000" asserts="2" />
                          <test-case name="NUnit.Framework.Tests.GreaterEqualFixture.GreaterOrEqual_Int32" executed="True" success="True" time="0.000" asserts="2" />
                          <test-case name="NUnit.Framework.Tests.GreaterEqualFixture.GreaterOrEqual_Long" executed="True" success="True" time="0.000" asserts="2" />
                          <test-case name="NUnit.Framework.Tests.GreaterEqualFixture.GreaterOrEqual_UInt32" executed="True" success="True" time="0.000" asserts="2" />
                          <test-case name="NUnit.Framework.Tests.GreaterEqualFixture.GreaterOrEqual_ULong" executed="True" success="True" time="0.000" asserts="2" />
                          <test-case name="NUnit.Framework.Tests.GreaterEqualFixture.MixedTypes" executed="True" success="True" time="0.000" asserts="42" />
                          <test-case name="NUnit.Framework.Tests.GreaterEqualFixture.NotGreaterEqualIComparable" executed="True" success="True" time="0.000" asserts="2" />
                          <test-case name="NUnit.Framework.Tests.GreaterEqualFixture.NotGreaterOrEqual" executed="True" success="True" time="0.000" asserts="2" />
                        </results>
                      </test-suite>
                      <test-suite name="GreaterFixture" executed="True" success="True" time="0.016" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Tests.GreaterFixture.FailureMessage" executed="True" success="True" time="0.000" asserts="2" />
                          <test-case name="NUnit.Framework.Tests.GreaterFixture.Greater" executed="True" success="True" time="0.000" asserts="7" />
                          <test-case name="NUnit.Framework.Tests.GreaterFixture.MixedTypes" executed="True" success="True" time="0.016" asserts="42" />
                          <test-case name="NUnit.Framework.Tests.GreaterFixture.NotGreater" executed="True" success="True" time="0.000" asserts="2" />
                          <test-case name="NUnit.Framework.Tests.GreaterFixture.NotGreaterIComparable" executed="True" success="True" time="0.000" asserts="2" />
                          <test-case name="NUnit.Framework.Tests.GreaterFixture.NotGreaterWhenEqual" executed="True" success="True" time="0.000" asserts="2" />
                        </results>
                      </test-suite>
                      <test-suite name="LessEqualFixture" executed="True" success="True" time="0.031" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Tests.LessEqualFixture.FailureMessage" executed="True" success="True" time="0.016" asserts="2" />
                          <test-case name="NUnit.Framework.Tests.LessEqualFixture.LessOrEqual" executed="True" success="True" time="0.000" asserts="42" />
                          <test-case name="NUnit.Framework.Tests.LessEqualFixture.MixedTypes" executed="True" success="True" time="0.000" asserts="42" />
                          <test-case name="NUnit.Framework.Tests.LessEqualFixture.NotLessEqualIComparable" executed="True" success="True" time="0.016" asserts="2" />
                          <test-case name="NUnit.Framework.Tests.LessEqualFixture.NotLessOrEqual" executed="True" success="True" time="0.000" asserts="2" />
                        </results>
                      </test-suite>
                      <test-suite name="LessFixture" executed="True" success="True" time="0.016" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Tests.LessFixture.FailureMessage" executed="True" success="True" time="0.000" asserts="3" />
                          <test-case name="NUnit.Framework.Tests.LessFixture.Less" executed="True" success="True" time="0.000" asserts="18" />
                          <test-case name="NUnit.Framework.Tests.LessFixture.MixedTypes" executed="True" success="True" time="0.016" asserts="42" />
                          <test-case name="NUnit.Framework.Tests.LessFixture.NotLess" executed="True" success="True" time="0.000" asserts="2" />
                          <test-case name="NUnit.Framework.Tests.LessFixture.NotLessIComparable" executed="True" success="True" time="0.000" asserts="2" />
                          <test-case name="NUnit.Framework.Tests.LessFixture.NotLessWhenEqual" executed="True" success="True" time="0.000" asserts="2" />
                        </results>
                      </test-suite>
                      <test-suite name="ListContentsTests" executed="True" success="True" time="0.016" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Tests.ListContentsTests.ArrayFails" executed="True" success="True" time="0.000" asserts="2" />
                          <test-case name="NUnit.Framework.Tests.ListContentsTests.ArrayListFails" executed="True" success="True" time="0.000" asserts="2" />
                          <test-case name="NUnit.Framework.Tests.ListContentsTests.ArrayListSucceeds" executed="True" success="True" time="0.000" asserts="3" />
                          <test-case name="NUnit.Framework.Tests.ListContentsTests.ArraySucceeds" executed="True" success="True" time="0.000" asserts="3" />
                          <test-case name="NUnit.Framework.Tests.ListContentsTests.DifferentTypesMayBeEqual" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Tests.ListContentsTests.EmptyArrayFails" executed="True" success="True" time="0.000" asserts="2" />
                          <test-case name="NUnit.Framework.Tests.ListContentsTests.NullArrayIsError" executed="True" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite name="NotEqualFixture" executed="True" success="True" time="0.016" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Tests.NotEqualFixture.ArraysNotEqual" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Tests.NotEqualFixture.ArraysNotEqualFails" executed="True" success="True" time="0.000" asserts="2" />
                          <test-case name="NUnit.Framework.Tests.NotEqualFixture.NotEqual" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Tests.NotEqualFixture.NotEqualFails" executed="True" success="True" time="0.000" asserts="2" />
                          <test-case name="NUnit.Framework.Tests.NotEqualFixture.NotEqualSameTypes" executed="True" success="True" time="0.000" asserts="21" />
                          <test-case name="NUnit.Framework.Tests.NotEqualFixture.NullEqualsNull" executed="True" success="True" time="0.000" asserts="2" />
                          <test-case name="NUnit.Framework.Tests.NotEqualFixture.NullNotEqualToNonNull" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Tests.NotEqualFixture.UInt" executed="True" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite name="NotSameFixture" executed="True" success="True" time="0.000" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Tests.NotSameFixture.NotSame" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Tests.NotSameFixture.NotSameFails" executed="True" success="True" time="0.000" asserts="2" />
                        </results>
                      </test-suite>
                      <test-suite name="NullableTypesTests" executed="True" success="True" time="0.016" asserts="0">
                        <categories>
                          <category name="Generics" />
                        </categories>
                        <results>
                          <test-case name="NUnit.Framework.Tests.NullableTypesTests.CanCompareNullableDecimals" executed="True" success="True" time="0.000" asserts="12" />
                          <test-case name="NUnit.Framework.Tests.NullableTypesTests.CanCompareNullableDoubles" executed="True" success="True" time="0.000" asserts="12" />
                          <test-case name="NUnit.Framework.Tests.NullableTypesTests.CanCompareNullableEnums" executed="True" success="True" time="0.000" asserts="3" />
                          <test-case name="NUnit.Framework.Tests.NullableTypesTests.CanCompareNullableInts" executed="True" success="True" time="0.000" asserts="12" />
                          <test-case name="NUnit.Framework.Tests.NullableTypesTests.CanCompareNullableMixedNumerics" executed="True" success="True" time="0.016" asserts="54" />
                          <test-case name="NUnit.Framework.Tests.NullableTypesTests.CanCompareNullableStructs" executed="True" success="True" time="0.000" asserts="4" />
                          <test-case name="NUnit.Framework.Tests.NullableTypesTests.CanCompareWithTolerance" executed="True" success="True" time="0.000" asserts="4" />
                          <test-case name="NUnit.Framework.Tests.NullableTypesTests.CanTestForNaN" executed="True" success="True" time="0.000" asserts="2" />
                          <test-case name="NUnit.Framework.Tests.NullableTypesTests.CanTestForNull" executed="True" success="True" time="0.000" asserts="4" />
                        </results>
                      </test-suite>
                      <test-suite name="RandomizerTests" executed="True" success="True" time="0.000" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Tests.RandomizerTests.RandomDoublesAreUnique" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Tests.RandomizerTests.RandomIntsAreUnique" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Tests.RandomizerTests.RandomizersWithDifferentSeedsReturnDifferentValues" executed="True" success="True" time="0.000" asserts="10" />
                          <test-case name="NUnit.Framework.Tests.RandomizerTests.RandomizersWithSameSeedsReturnSameValues" executed="True" success="True" time="0.000" asserts="10" />
                          <test-case name="NUnit.Framework.Tests.RandomizerTests.RandomSeedsAreUnique" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Tests.RandomizerTests.ReturnsDifferentRandomizersForDifferentMethods" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Tests.RandomizerTests.ReturnsSameRandomizerForDifferentParametersOfSameMethod" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Tests.RandomizerTests.ReturnsSameRandomizerForSameMethod" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Tests.RandomizerTests.ReturnsSameRandomizerForSameParameter" executed="True" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite name="RangeTests" executed="True" success="True" time="0.016" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Tests.RangeTests.InRangeFails" executed="True" success="True" time="0.000" asserts="2" />
                          <test-case name="NUnit.Framework.Tests.RangeTests.InRangeSucceeds" executed="True" success="True" time="0.000" asserts="3" />
                          <test-case name="NUnit.Framework.Tests.RangeTests.NotInRangeFails" executed="True" success="True" time="0.016" asserts="2" />
                          <test-case name="NUnit.Framework.Tests.RangeTests.NotInRangeSucceeds" executed="True" success="True" time="0.000" asserts="2" />
                        </results>
                      </test-suite>
                      <test-suite name="SameFixture" executed="True" success="True" time="0.016" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Tests.SameFixture.Same" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Tests.SameFixture.SameFails" executed="True" success="True" time="0.000" asserts="2" />
                          <test-case name="NUnit.Framework.Tests.SameFixture.SameValueTypes" executed="True" success="True" time="0.000" asserts="2" />
                        </results>
                      </test-suite>
                      <test-suite name="StringAssertTests" executed="True" success="True" time="0.031" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Tests.StringAssertTests.CaseInsensitiveCompare" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Tests.StringAssertTests.CaseInsensitiveCompareFails" executed="True" success="True" time="0.000" asserts="2" />
                          <test-case name="NUnit.Framework.Tests.StringAssertTests.Contains" executed="True" success="True" time="0.000" asserts="3" />
                          <test-case name="NUnit.Framework.Tests.StringAssertTests.ContainsFails" executed="True" success="True" time="0.000" asserts="2" />
                          <test-case name="NUnit.Framework.Tests.StringAssertTests.DifferentEncodingsOfSameStringAreNotEqual" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Tests.StringAssertTests.DoesNotContain" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Tests.StringAssertTests.DoesNotContainFails" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Tests.StringAssertTests.DoesNotEndWith" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Tests.StringAssertTests.DoesNotEndWithFails" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Tests.StringAssertTests.DoesNotStartWith" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Tests.StringAssertTests.DoesNotStartWithFails" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Tests.StringAssertTests.EndsWith" executed="True" success="True" time="0.000" asserts="2" />
                          <test-case name="NUnit.Framework.Tests.StringAssertTests.EndsWithFails" executed="True" success="True" time="0.016" asserts="2" />
                          <test-case name="NUnit.Framework.Tests.StringAssertTests.IsMatch" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Tests.StringAssertTests.IsMatchFails" executed="True" success="True" time="0.000" asserts="2" />
                          <test-case name="NUnit.Framework.Tests.StringAssertTests.StartsWith" executed="True" success="True" time="0.000" asserts="2" />
                          <test-case name="NUnit.Framework.Tests.StringAssertTests.StartsWithFails" executed="True" success="True" time="0.000" asserts="2" />
                        </results>
                      </test-suite>
                      <test-suite name="TestFixtureAttributeTests" executed="True" success="True" time="0.000" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Tests.TestFixtureAttributeTests.ConstructWithCombinedArgs" executed="True" success="True" time="0.000" asserts="2">
                            <categories>
                              <category name="Generics" />
                            </categories>
                          </test-case>
                          <test-case name="NUnit.Framework.Tests.TestFixtureAttributeTests.ConstructWithFixtureArgs" executed="True" success="True" time="0.000" asserts="2" />
                          <test-case name="NUnit.Framework.Tests.TestFixtureAttributeTests.ConstructWithFixtureArgsAndSetTypeArgs" executed="True" success="True" time="0.000" asserts="2">
                            <categories>
                              <category name="Generics" />
                            </categories>
                          </test-case>
                          <test-case name="NUnit.Framework.Tests.TestFixtureAttributeTests.ConstructWithJustTypeArgs" executed="True" success="True" time="0.000" asserts="2">
                            <categories>
                              <category name="Generics" />
                            </categories>
                          </test-case>
                          <test-case name="NUnit.Framework.Tests.TestFixtureAttributeTests.ConstructWithNoArgumentsAndSetTypeArgs" executed="True" success="True" time="0.000" asserts="2">
                            <categories>
                              <category name="Generics" />
                            </categories>
                          </test-case>
                          <test-case name="NUnit.Framework.Tests.TestFixtureAttributeTests.ConstructWithoutArguments" executed="True" success="True" time="0.000" asserts="2" />
                        </results>
                      </test-suite>
                      <test-suite name="TextMessageWriterTests" executed="True" success="True" time="0.000" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Tests.TextMessageWriterTests.ConnectorIsWrittenWithSurroundingSpaces" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Tests.TextMessageWriterTests.DateTimeTest" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Tests.TextMessageWriterTests.DecimalIsWrittenToTwentyNineDigits" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Tests.TextMessageWriterTests.DecimalIsWrittenWithTrailingM" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Tests.TextMessageWriterTests.DisplayStringDifferences" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Tests.TextMessageWriterTests.DisplayStringDifferences_NoClipping" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Tests.TextMessageWriterTests.DoubleIsWrittenToSeventeenDigits" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Tests.TextMessageWriterTests.DoubleIsWrittenWithTrailingD" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Tests.TextMessageWriterTests.FloatIsWrittenToNineDigits" executed="True" success="True" time="0.000" asserts="2" />
                          <test-case name="NUnit.Framework.Tests.TextMessageWriterTests.FloatIsWrittenWithTrailingF" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Tests.TextMessageWriterTests.IntegerIsWrittenAsIs" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Tests.TextMessageWriterTests.PredicateIsWrittenWithTrailingSpace" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Tests.TextMessageWriterTests.StringIsWrittenWithQuotes" executed="True" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite name="TypeAssertTests" executed="True" success="True" time="0.047" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Tests.TypeAssertTests.ExactType" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Tests.TypeAssertTests.ExactTypeFails" executed="True" success="True" time="0.000" asserts="2" />
                          <test-case name="NUnit.Framework.Tests.TypeAssertTests.IsAssignableFrom" executed="True" success="True" time="0.000" asserts="3" />
                          <test-case name="NUnit.Framework.Tests.TypeAssertTests.IsAssignableFromFails" executed="True" success="True" time="0.000" asserts="2" />
                          <test-case name="NUnit.Framework.Tests.TypeAssertTests.IsInstanceOf" executed="True" success="True" time="0.000" asserts="3" />
                          <test-case name="NUnit.Framework.Tests.TypeAssertTests.IsInstanceOfFails" executed="True" success="True" time="0.000" asserts="2" />
                          <test-case name="NUnit.Framework.Tests.TypeAssertTests.IsNotAssignableFrom" executed="True" success="True" time="0.000" asserts="3" />
                          <test-case name="NUnit.Framework.Tests.TypeAssertTests.IsNotAssignableFromFails" executed="True" success="True" time="0.047" asserts="2" />
                          <test-case name="NUnit.Framework.Tests.TypeAssertTests.IsNotInstanceOf" executed="True" success="True" time="0.000" asserts="3" />
                          <test-case name="NUnit.Framework.Tests.TypeAssertTests.IsNotInstanceOfFails" executed="True" success="True" time="0.000" asserts="2" />
                        </results>
                      </test-suite>
                      <test-suite name="ValuesAttributeTests" executed="True" success="True" time="0.000" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Tests.ValuesAttributeTests.RangeAttributeWithDoubleRangeAndStep" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Tests.ValuesAttributeTests.RangeAttributeWithFloatRangeAndStep" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Tests.ValuesAttributeTests.RangeAttributeWithIntRange" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Tests.ValuesAttributeTests.RangeAttributeWithIntRangeAndStep" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Tests.ValuesAttributeTests.RangeAttributeWithLongRangeAndStep" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Tests.ValuesAttributeTests.ValuesAttributeProvidesSpecifiedValues" executed="True" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                </results>
              </test-suite>
            </results>
          </test-suite>
        </results>
      </test-suite>
      <test-suite name="C:\Program Files\NUnit 2.5.2\bin\net-2.0\tests/nunit.core.tests.dll" executed="True" success="True" time="15.563" asserts="0">
        <results>
          <test-suite name="NUnit" executed="True" success="True" time="15.469" asserts="0">
            <results>
              <test-suite name="Core" executed="True" success="True" time="15.219" asserts="0">
                <results>
                  <test-suite name="Tests" executed="True" success="True" time="15.172" asserts="0">
                    <results>
                      <test-suite name="AssemblyReaderTests" executed="True" success="True" time="1.156" asserts="0">
                        <results>
                          <test-case name="NUnit.Core.Tests.AssemblyReaderTests.CreateFromAssembly" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Core.Tests.AssemblyReaderTests.CreateFromPath" executed="True" success="True" time="0.094" asserts="1" />
                          <test-case name="NUnit.Core.Tests.AssemblyReaderTests.ImageRuntimeVersion" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Core.Tests.AssemblyReaderTests.IsDotNetFile" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Core.Tests.AssemblyReaderTests.IsValidPeFile" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Core.Tests.AssemblyReaderTests.IsValidPeFile_Fails" executed="True" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite name="AssemblyResolverTests" executed="True" success="True" time="0.188" asserts="0">
                        <results>
                          <test-case name="NUnit.Core.Tests.AssemblyResolverTests.AddFile" executed="True" success="True" time="0.156" asserts="0" />
                        </results>
                      </test-suite>
                      <test-suite name="AssemblyTests" executed="True" success="True" time="0.391" asserts="0">
                        <results>
                          <test-case name="NUnit.Core.Tests.AssemblyTests.AppSettingsLoaded" executed="True" success="True" time="0.000" asserts="3" />
                          <test-case name="NUnit.Core.Tests.AssemblyTests.LoadAssembly" executed="True" success="True" time="0.266" asserts="2" />
                          <test-case name="NUnit.Core.Tests.AssemblyTests.LoadAssemblyNotFound" executed="True" success="True" time="0.000" asserts="0" />
                          <test-case name="NUnit.Core.Tests.AssemblyTests.LoadAssemblyWithoutTestFixtures" executed="True" success="True" time="0.078" asserts="4" />
                          <test-case name="NUnit.Core.Tests.AssemblyTests.LoadTestFixtureFromAssembly" executed="True" success="True" time="0.016" asserts="1" />
                          <test-case name="NUnit.Core.Tests.AssemblyTests.NUnitTraceIsEnabled" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Core.Tests.AssemblyTests.RunSetsCurrentDirectory" executed="True" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite name="AssemblyVersionFixture" executed="True" success="True" time="0.016" asserts="0">
                        <results>
                          <test-case name="NUnit.Core.Tests.AssemblyVersionFixture.Version" executed="True" success="True" time="0.016" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite name="AssertInconclusiveFixture" executed="True" success="True" time="0.000" asserts="0">
                        <results>
                          <test-case name="NUnit.Core.Tests.AssertInconclusiveFixture.AssertInconclusiveThrowsException" executed="True" success="True" time="0.000" asserts="2" />
                        </results>
                      </test-suite>
                      <test-suite name="AssertPassFixture" executed="True" success="True" time="0.016" asserts="0">
                        <results>
                          <test-case name="NUnit.Core.Tests.AssertPassFixture.AssertPassReturnsSuccess" executed="True" success="True" time="0.016" asserts="0" />
                          <test-case name="NUnit.Core.Tests.AssertPassFixture.SubsequentFailureIsIrrelevant" executed="True" success="True" time="0.000" asserts="0" />
                        </results>
                      </test-suite>
                      <test-suite name="AttributeInheritance" executed="True" success="True" time="0.016" asserts="0">
                        <results>
                          <test-case name="NUnit.Core.Tests.AttributeInheritance.InheritedFixtureAttributeIsRecognized" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Core.Tests.AttributeInheritance.InheritedTestAttributeIsRecognized" executed="True" success="True" time="0.016" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite name="CallContextTests" executed="True" success="True" time="0.016" asserts="0">
                        <results>
                          <test-case name="NUnit.Core.Tests.CallContextTests.GenericPrincipalTest" executed="True" success="True" time="0.000" asserts="0" />
                          <test-case name="NUnit.Core.Tests.CallContextTests.ILogicalThreadAffinativeTest" executed="True" success="True" time="0.000" asserts="0" />
                          <test-case name="NUnit.Core.Tests.CallContextTests.ILogicalThreadAffinativeTestConsole" executed="True" success="True" time="0.000" asserts="0" />
                          <test-case name="NUnit.Core.Tests.CallContextTests.SetCustomPrincipalOnThread" executed="True" success="True" time="0.000" asserts="0" />
                          <test-case name="NUnit.Core.Tests.CallContextTests.SetGenericPrincipalOnThread" executed="True" success="True" time="0.000" asserts="0" />
                          <test-case name="NUnit.Core.Tests.CallContextTests.UseCustomIdentity" executed="True" success="True" time="0.000" asserts="0" />
                        </results>
                      </test-suite>
                      <test-suite name="CategoryAttributeTests" executed="True" success="True" time="0.016" asserts="0">
                        <results>
                          <test-case name="NUnit.Core.Tests.CategoryAttributeTests.CanDeriveFromCategoryAttribute" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Core.Tests.CategoryAttributeTests.CategoryOnFixture" executed="True" success="True" time="0.016" asserts="1" />
                          <test-case name="NUnit.Core.Tests.CategoryAttributeTests.CategoryOnTestCase" executed="True" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite name="CombinatorialTests" executed="True" success="True" time="0.000" asserts="0">
                        <results>
                          <test-suite name="RandomArgsAreIndependent" executed="True" success="True" time="0.000" asserts="0">
                            <results>
                              <test-case name="NUnit.Core.Tests.CombinatorialTests.RandomArgsAreIndependent(0.55076334837394d,0.857465667583731d)" executed="True" success="True" time="0.000" asserts="1" />
                            </results>
                          </test-suite>
                          <test-suite name="RandomTest" executed="True" success="True" time="0.000" asserts="0">
                            <results>
                              <test-case name="NUnit.Core.Tests.CombinatorialTests.RandomTest(98,0.182266548360822d)" executed="True" success="True" time="0.000" asserts="2" />
                              <test-case name="NUnit.Core.Tests.CombinatorialTests.RandomTest(168,0.443459582255902d)" executed="True" success="True" time="0.000" asserts="2" />
                              <test-case name="NUnit.Core.Tests.CombinatorialTests.RandomTest(193,0.634647673291456d)" executed="True" success="True" time="0.000" asserts="2" />
                              <test-case name="NUnit.Core.Tests.CombinatorialTests.RandomTest(48,0.670450251861685d)" executed="True" success="True" time="0.000" asserts="2" />
                              <test-case name="NUnit.Core.Tests.CombinatorialTests.RandomTest(88,0.35110911603603d)" executed="True" success="True" time="0.000" asserts="2" />
                            </results>
                          </test-suite>
                          <test-suite name="RangeTest" executed="True" success="True" time="0.000" asserts="0">
                            <results>
                              <test-case name="NUnit.Core.Tests.CombinatorialTests.RangeTest(0.2d,10)" executed="True" success="True" time="0.000" asserts="0" />
                              <test-case name="NUnit.Core.Tests.CombinatorialTests.RangeTest(0.2d,15)" executed="True" success="True" time="0.000" asserts="0" />
                              <test-case name="NUnit.Core.Tests.CombinatorialTests.RangeTest(0.2d,20)" executed="True" success="True" time="0.000" asserts="0" />
                              <test-case name="NUnit.Core.Tests.CombinatorialTests.RangeTest(0.4d,10)" executed="True" success="True" time="0.000" asserts="0" />
                              <test-case name="NUnit.Core.Tests.CombinatorialTests.RangeTest(0.4d,15)" executed="True" success="True" time="0.000" asserts="0" />
                              <test-case name="NUnit.Core.Tests.CombinatorialTests.RangeTest(0.4d,20)" executed="True" success="True" time="0.000" asserts="0" />
                              <test-case name="NUnit.Core.Tests.CombinatorialTests.RangeTest(0.6d,10)" executed="True" success="True" time="0.000" asserts="0" />
                              <test-case name="NUnit.Core.Tests.CombinatorialTests.RangeTest(0.6d,15)" executed="True" success="True" time="0.000" asserts="0" />
                              <test-case name="NUnit.Core.Tests.CombinatorialTests.RangeTest(0.6d,20)" executed="True" success="True" time="0.000" asserts="0" />
                            </results>
                          </test-suite>
                          <test-suite name="SingleArgument" executed="True" success="True" time="0.000" asserts="0">
                            <results>
                              <test-case name="NUnit.Core.Tests.CombinatorialTests.SingleArgument(1.3d)" executed="True" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Core.Tests.CombinatorialTests.SingleArgument(1.7d)" executed="True" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Core.Tests.CombinatorialTests.SingleArgument(1.5d)" executed="True" success="True" time="0.000" asserts="1" />
                            </results>
                          </test-suite>
                          <test-suite name="ThreeArguments_Combinatorial" executed="True" success="True" time="0.000" asserts="0">
                            <results>
                              <test-case name="NUnit.Core.Tests.CombinatorialTests.ThreeArguments_Combinatorial(1,10,&quot;Charlie&quot;)" executed="True" success="True" time="0.000" asserts="2" />
                              <test-case name="NUnit.Core.Tests.CombinatorialTests.ThreeArguments_Combinatorial(1,10,&quot;Joe&quot;)" executed="True" success="True" time="0.000" asserts="2" />
                              <test-case name="NUnit.Core.Tests.CombinatorialTests.ThreeArguments_Combinatorial(1,10,&quot;Frank&quot;)" executed="True" success="True" time="0.000" asserts="2" />
                              <test-case name="NUnit.Core.Tests.CombinatorialTests.ThreeArguments_Combinatorial(1,20,&quot;Charlie&quot;)" executed="True" success="True" time="0.000" asserts="2" />
                              <test-case name="NUnit.Core.Tests.CombinatorialTests.ThreeArguments_Combinatorial(1,20,&quot;Joe&quot;)" executed="True" success="True" time="0.000" asserts="2" />
                              <test-case name="NUnit.Core.Tests.CombinatorialTests.ThreeArguments_Combinatorial(1,20,&quot;Frank&quot;)" executed="True" success="True" time="0.000" asserts="2" />
                              <test-case name="NUnit.Core.Tests.CombinatorialTests.ThreeArguments_Combinatorial(2,10,&quot;Charlie&quot;)" executed="True" success="True" time="0.000" asserts="2" />
                              <test-case name="NUnit.Core.Tests.CombinatorialTests.ThreeArguments_Combinatorial(2,10,&quot;Joe&quot;)" executed="True" success="True" time="0.000" asserts="2" />
                              <test-case name="NUnit.Core.Tests.CombinatorialTests.ThreeArguments_Combinatorial(2,10,&quot;Frank&quot;)" executed="True" success="True" time="0.000" asserts="2" />
                              <test-case name="NUnit.Core.Tests.CombinatorialTests.ThreeArguments_Combinatorial(2,20,&quot;Charlie&quot;)" executed="True" success="True" time="0.000" asserts="2" />
                              <test-case name="NUnit.Core.Tests.CombinatorialTests.ThreeArguments_Combinatorial(2,20,&quot;Joe&quot;)" executed="True" success="True" time="0.000" asserts="2" />
                              <test-case name="NUnit.Core.Tests.CombinatorialTests.ThreeArguments_Combinatorial(2,20,&quot;Frank&quot;)" executed="True" success="True" time="0.000" asserts="2" />
                              <test-case name="NUnit.Core.Tests.CombinatorialTests.ThreeArguments_Combinatorial(3,10,&quot;Charlie&quot;)" executed="True" success="True" time="0.000" asserts="2" />
                              <test-case name="NUnit.Core.Tests.CombinatorialTests.ThreeArguments_Combinatorial(3,10,&quot;Joe&quot;)" executed="True" success="True" time="0.000" asserts="2" />
                              <test-case name="NUnit.Core.Tests.CombinatorialTests.ThreeArguments_Combinatorial(3,10,&quot;Frank&quot;)" executed="True" success="True" time="0.000" asserts="2" />
                              <test-case name="NUnit.Core.Tests.CombinatorialTests.ThreeArguments_Combinatorial(3,20,&quot;Charlie&quot;)" executed="True" success="True" time="0.000" asserts="2" />
                              <test-case name="NUnit.Core.Tests.CombinatorialTests.ThreeArguments_Combinatorial(3,20,&quot;Joe&quot;)" executed="True" success="True" time="0.000" asserts="2" />
                              <test-case name="NUnit.Core.Tests.CombinatorialTests.ThreeArguments_Combinatorial(3,20,&quot;Frank&quot;)" executed="True" success="True" time="0.000" asserts="2" />
                            </results>
                          </test-suite>
                          <test-suite name="ThreeArguments_Sequential" executed="True" success="True" time="0.000" asserts="0">
                            <results>
                              <test-case name="NUnit.Core.Tests.CombinatorialTests.ThreeArguments_Sequential(1,10,&quot;Charlie&quot;)" executed="True" success="True" time="0.000" asserts="2" />
                              <test-case name="NUnit.Core.Tests.CombinatorialTests.ThreeArguments_Sequential(2,20,&quot;Joe&quot;)" executed="True" success="True" time="0.000" asserts="2" />
                              <test-case name="NUnit.Core.Tests.CombinatorialTests.ThreeArguments_Sequential(3,null,&quot;Frank&quot;)" executed="True" success="True" time="0.000" asserts="2" />
                            </results>
                          </test-suite>
                          <test-suite name="TwoArguments_Combinatorial" executed="True" success="True" time="0.000" asserts="0">
                            <results>
                              <test-case name="NUnit.Core.Tests.CombinatorialTests.TwoArguments_Combinatorial(1,10)" executed="True" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Core.Tests.CombinatorialTests.TwoArguments_Combinatorial(1,20)" executed="True" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Core.Tests.CombinatorialTests.TwoArguments_Combinatorial(2,10)" executed="True" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Core.Tests.CombinatorialTests.TwoArguments_Combinatorial(2,20)" executed="True" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Core.Tests.CombinatorialTests.TwoArguments_Combinatorial(3,10)" executed="True" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Core.Tests.CombinatorialTests.TwoArguments_Combinatorial(3,20)" executed="True" success="True" time="0.000" asserts="1" />
                            </results>
                          </test-suite>
                          <test-suite name="TwoArguments_Sequential" executed="True" success="True" time="0.000" asserts="0">
                            <results>
                              <test-case name="NUnit.Core.Tests.CombinatorialTests.TwoArguments_Sequential(1,10)" executed="True" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Core.Tests.CombinatorialTests.TwoArguments_Sequential(2,20)" executed="True" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Core.Tests.CombinatorialTests.TwoArguments_Sequential(3,null)" executed="True" success="True" time="0.000" asserts="1" />
                            </results>
                          </test-suite>
                        </results>
                      </test-suite>
                      <test-suite name="CoreExtensionsTests" executed="True" success="True" time="0.016" asserts="0">
                        <results>
                          <test-case name="NUnit.Core.Tests.CoreExtensionsTests.CanAddDecorator" executed="True" success="True" time="0.016" asserts="2" />
                          <test-case name="NUnit.Core.Tests.CoreExtensionsTests.CanAddEventListener" executed="True" success="True" time="0.000" asserts="4" />
                          <test-case name="NUnit.Core.Tests.CoreExtensionsTests.CanAddSuiteBuilder" executed="True" success="True" time="0.000" asserts="4" />
                          <test-case name="NUnit.Core.Tests.CoreExtensionsTests.CanAddTestCaseBuilder" executed="True" success="True" time="0.000" asserts="4" />
                          <test-case name="NUnit.Core.Tests.CoreExtensionsTests.CanAddTestCaseBuilder2" executed="True" success="True" time="0.000" asserts="4" />
                          <test-case name="NUnit.Core.Tests.CoreExtensionsTests.DecoratorsRunInOrderOfPriorities" executed="True" success="True" time="0.000" asserts="2" />
                          <test-case name="NUnit.Core.Tests.CoreExtensionsTests.HasEventListenerExtensionPoint" executed="True" success="True" time="0.000" asserts="3" />
                          <test-case name="NUnit.Core.Tests.CoreExtensionsTests.HasSuiteBuildersExtensionPoint" executed="True" success="True" time="0.000" asserts="3" />
                          <test-case name="NUnit.Core.Tests.CoreExtensionsTests.HasTestCaseBuildersExtensionPoint" executed="True" success="True" time="0.000" asserts="3" />
                          <test-case name="NUnit.Core.Tests.CoreExtensionsTests.HasTestDecoratorsExtensionPoint" executed="True" success="True" time="0.000" asserts="3" />
                          <test-case name="NUnit.Core.Tests.CoreExtensionsTests.HasTestFrameworkRegistry" executed="True" success="True" time="0.000" asserts="3" />
                        </results>
                      </test-suite>
                      <test-suite name="CultureSettingAndDetectionTests" executed="True" success="True" time="0.156" asserts="0">
                        <results>
                          <test-case name="NUnit.Core.Tests.CultureSettingAndDetectionTests.CanMatchAttributeWithExclude" executed="True" success="True" time="0.000" asserts="2" />
                          <test-case name="NUnit.Core.Tests.CultureSettingAndDetectionTests.CanMatchAttributeWithInclude" executed="True" success="True" time="0.109" asserts="2" />
                          <test-case name="NUnit.Core.Tests.CultureSettingAndDetectionTests.CanMatchAttributeWithIncludeAndExclude" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Core.Tests.CultureSettingAndDetectionTests.CanMatchStrings" executed="True" success="True" time="0.000" asserts="5" />
                          <test-case name="NUnit.Core.Tests.CultureSettingAndDetectionTests.LoadWithFrenchCanadianCulture" executed="True" success="True" time="0.000" asserts="5" />
                          <test-case name="NUnit.Core.Tests.CultureSettingAndDetectionTests.LoadWithFrenchCulture" executed="True" success="True" time="0.016" asserts="5" />
                          <test-case name="NUnit.Core.Tests.CultureSettingAndDetectionTests.LoadWithRussianCulture" executed="True" success="True" time="0.016" asserts="5" />
                          <test-case name="NUnit.Core.Tests.CultureSettingAndDetectionTests.SettingInvalidCultureGivesError" executed="True" success="True" time="0.000" asserts="3" />
                        </results>
                      </test-suite>
                      <test-suite name="CultureSettingAndDetectionTests+NestedFixture" executed="True" success="True" time="0.000" asserts="0">
                        <results>
                          <test-case name="NUnit.Core.Tests.CultureSettingAndDetectionTests+NestedFixture.CanSetCultureOnFixture" executed="True" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite name="DirectorySwapperTests" executed="True" success="True" time="0.000" asserts="0">
                        <results>
                          <test-case name="NUnit.Core.Tests.DirectorySwapperTests.ChangeAndRestore" executed="True" success="True" time="0.000" asserts="3" />
                          <test-case name="NUnit.Core.Tests.DirectorySwapperTests.SwapAndRestore" executed="True" success="True" time="0.000" asserts="2" />
                        </results>
                      </test-suite>
                      <test-suite name="EventQueueTests" executed="True" success="True" time="0.016" asserts="0">
                        <results>
                          <test-case name="NUnit.Core.Tests.EventQueueTests.PumpAutoStopsOnRunFinished" executed="True" success="True" time="0.000" asserts="3" />
                          <test-case name="NUnit.Core.Tests.EventQueueTests.PumpEvents" executed="True" success="True" time="0.016" asserts="9" />
                          <test-case name="NUnit.Core.Tests.EventQueueTests.PumpEventsWithAutoStop" executed="True" success="True" time="0.000" asserts="2" />
                          <test-case name="NUnit.Core.Tests.EventQueueTests.QueueEvents" executed="True" success="True" time="0.000" asserts="6" />
                          <test-case name="NUnit.Core.Tests.EventQueueTests.SendEvents" executed="True" success="True" time="0.000" asserts="6" />
                          <test-case name="NUnit.Core.Tests.EventQueueTests.StartAndStopPumpOnEmptyQueue" executed="True" success="True" time="0.000" asserts="2" />
                        </results>
                      </test-suite>
                      <test-suite name="EventTestFixture" description="Tests that proper events are generated when running  test" executed="True" success="True" time="0.266" asserts="0">
                        <results>
                          <test-case name="NUnit.Core.Tests.EventTestFixture.CheckEventListening" executed="True" success="True" time="0.266" asserts="4" />
                        </results>
                      </test-suite>
                      <test-suite name="ExpectExceptionTest" executed="True" success="True" time="0.203" asserts="0">
                        <results>
                          <test-case name="NUnit.Core.Tests.ExpectExceptionTest.AssertFailBeforeException" executed="True" success="True" time="0.016" asserts="2" />
                          <test-case name="NUnit.Core.Tests.ExpectExceptionTest.CanExpectUnspecifiedException" executed="True" success="True" time="0.000" asserts="0" />
                          <test-case name="NUnit.Core.Tests.ExpectExceptionTest.ExceptionHandlerIsCalledWhenExceptionMatches" executed="True" success="True" time="0.000" asserts="2" />
                          <test-case name="NUnit.Core.Tests.ExpectExceptionTest.ExceptionHandlerIsCalledWhenExceptionMatches_AlternateHandler" executed="True" success="True" time="0.000" asserts="2" />
                          <test-case name="NUnit.Core.Tests.ExpectExceptionTest.ExceptionHandlerIsNotCalledWhenExceptionDoesNotMatch" executed="True" success="True" time="0.000" asserts="2" />
                          <test-case name="NUnit.Core.Tests.ExpectExceptionTest.ExceptionHandlerIsNotCalledWhenExceptionDoesNotMatch_AlternateHandler" executed="True" success="True" time="0.016" asserts="2" />
                          <test-case name="NUnit.Core.Tests.ExpectExceptionTest.MethodThrowsArgumentOutOfRange" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Core.Tests.ExpectExceptionTest.MethodThrowsException" executed="True" success="True" time="0.016" asserts="1" />
                          <test-case name="NUnit.Core.Tests.ExpectExceptionTest.MethodThrowsRightExceptionMessage" executed="True" success="True" time="0.016" asserts="1" />
                          <test-case name="NUnit.Core.Tests.ExpectExceptionTest.MethodThrowsWrongExceptionMessage" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Core.Tests.ExpectExceptionTest.SetUpThrowsSameException" executed="True" success="True" time="0.016" asserts="1" />
                          <test-case name="NUnit.Core.Tests.ExpectExceptionTest.TearDownThrowsSameException" executed="True" success="True" time="0.016" asserts="1" />
                          <test-case name="NUnit.Core.Tests.ExpectExceptionTest.TestExceptionNameNotThrown" executed="True" success="True" time="0.000" asserts="2" />
                          <test-case name="NUnit.Core.Tests.ExpectExceptionTest.TestExceptionNameNotThrownWithUserMessage" executed="True" success="True" time="0.000" asserts="2" />
                          <test-case name="NUnit.Core.Tests.ExpectExceptionTest.TestExceptionTypeNotThrown" executed="True" success="True" time="0.000" asserts="2" />
                          <test-case name="NUnit.Core.Tests.ExpectExceptionTest.TestExceptionTypeNotThrownWithUserMessage" executed="True" success="True" time="0.000" asserts="2" />
                          <test-case name="NUnit.Core.Tests.ExpectExceptionTest.TestFailsWhenBaseExceptionIsThrown" executed="True" success="True" time="0.016" asserts="2" />
                          <test-case name="NUnit.Core.Tests.ExpectExceptionTest.TestFailsWhenDerivedExceptionIsThrown" executed="True" success="True" time="0.000" asserts="2" />
                          <test-case name="NUnit.Core.Tests.ExpectExceptionTest.TestIsNotRunnableWhenAlternateHandlerIsNotFound" executed="True" success="True" time="0.000" asserts="2" />
                          <test-case name="NUnit.Core.Tests.ExpectExceptionTest.TestMismatchedExceptionMessage" executed="True" success="True" time="0.000" asserts="2" />
                          <test-case name="NUnit.Core.Tests.ExpectExceptionTest.TestMismatchedExceptionMessageWithUserMessage" executed="True" success="True" time="0.000" asserts="2" />
                          <test-case name="NUnit.Core.Tests.ExpectExceptionTest.TestMismatchedExceptionName" executed="True" success="True" time="0.016" asserts="2" />
                          <test-case name="NUnit.Core.Tests.ExpectExceptionTest.TestMismatchedExceptionNameWithUserMessage" executed="True" success="True" time="0.000" asserts="2" />
                          <test-case name="NUnit.Core.Tests.ExpectExceptionTest.TestMismatchedExceptionType" executed="True" success="True" time="0.000" asserts="2" />
                          <test-case name="NUnit.Core.Tests.ExpectExceptionTest.TestMismatchedExceptionTypeAsNamedParameter" executed="True" success="True" time="0.000" asserts="2" />
                          <test-case name="NUnit.Core.Tests.ExpectExceptionTest.TestMismatchedExceptionTypeWithUserMessage" executed="True" success="True" time="0.000" asserts="2" />
                          <test-case name="NUnit.Core.Tests.ExpectExceptionTest.TestSucceedsWhenSpecifiedExceptionNameAndContainsMatch" executed="True" success="True" time="0.000" asserts="0" />
                          <test-case name="NUnit.Core.Tests.ExpectExceptionTest.TestSucceedsWhenSpecifiedExceptionNameAndRegexMatch" executed="True" success="True" time="0.000" asserts="0" />
                          <test-case name="NUnit.Core.Tests.ExpectExceptionTest.TestSucceedsWithSpecifiedExceptionName" executed="True" success="True" time="0.000" asserts="0" />
                          <test-case name="NUnit.Core.Tests.ExpectExceptionTest.TestSucceedsWithSpecifiedExceptionNameAndExactMatch" executed="True" success="True" time="0.000" asserts="0" />
                          <test-case name="NUnit.Core.Tests.ExpectExceptionTest.TestSucceedsWithSpecifiedExceptionNameAndMessage_NewFormat" executed="True" success="True" time="0.000" asserts="0" />
                          <test-case name="NUnit.Core.Tests.ExpectExceptionTest.TestSucceedsWithSpecifiedExceptionNameAsNamedParameter" executed="True" success="True" time="0.000" asserts="0" />
                          <test-case name="NUnit.Core.Tests.ExpectExceptionTest.TestSucceedsWithSpecifiedExceptionType" executed="True" success="True" time="0.000" asserts="0" />
                          <test-case name="NUnit.Core.Tests.ExpectExceptionTest.TestSucceedsWithSpecifiedExceptionTypeAndContainsMatch" executed="True" success="True" time="0.000" asserts="0" />
                          <test-case name="NUnit.Core.Tests.ExpectExceptionTest.TestSucceedsWithSpecifiedExceptionTypeAndExactMatch" executed="True" success="True" time="0.000" asserts="0" />
                          <test-case name="NUnit.Core.Tests.ExpectExceptionTest.TestSucceedsWithSpecifiedExceptionTypeAndMessage" executed="True" success="True" time="0.000" asserts="0" />
                          <test-case name="NUnit.Core.Tests.ExpectExceptionTest.TestSucceedsWithSpecifiedExceptionTypeAndRegexMatch" executed="True" success="True" time="0.000" asserts="0" />
                          <test-case name="NUnit.Core.Tests.ExpectExceptionTest.TestSucceedsWithSpecifiedExceptionTypeAndStartsWithMatch" executed="True" success="True" time="0.016" asserts="0" />
                          <test-case name="NUnit.Core.Tests.ExpectExceptionTest.TestSucceedsWithSpecifiedExceptionTypeAsNamedParameter" executed="True" success="True" time="0.000" asserts="0" />
                          <test-case name="NUnit.Core.Tests.ExpectExceptionTest.TestUnspecifiedExceptionNotThrown" executed="True" success="True" time="0.000" asserts="2" />
                          <test-case name="NUnit.Core.Tests.ExpectExceptionTest.TestUnspecifiedExceptionNotThrownWithUserMessage" executed="True" success="True" time="0.000" asserts="2" />
                          <test-case name="NUnit.Core.Tests.ExpectExceptionTest.ThrowingMyAppException" executed="True" success="True" time="0.000" asserts="0" />
                          <test-case name="NUnit.Core.Tests.ExpectExceptionTest.ThrowingMyAppExceptionWithMessage" executed="True" success="True" time="0.000" asserts="0" />
                          <test-case name="NUnit.Core.Tests.ExpectExceptionTest.ThrowNUnitException" executed="True" success="True" time="0.000" asserts="0" />
                        </results>
                      </test-suite>
                      <test-suite name="FailFixture" executed="True" success="True" time="0.016" asserts="0">
                        <results>
                          <test-case name="NUnit.Core.Tests.FailFixture.BadStackTraceIsHandled" executed="True" success="True" time="0.000" asserts="3" />
                          <test-case name="NUnit.Core.Tests.FailFixture.CustomExceptionIsHandled" executed="True" success="True" time="0.000" asserts="2" />
                          <test-case name="NUnit.Core.Tests.FailFixture.FailInheritsFromSystemException" executed="True" success="True" time="0.000" asserts="0" />
                          <test-case name="NUnit.Core.Tests.FailFixture.FailRecordsInnerException" executed="True" success="True" time="0.016" asserts="2" />
                          <test-case name="NUnit.Core.Tests.FailFixture.FailThrowsAssertionException" executed="True" success="True" time="0.000" asserts="0" />
                          <test-case name="NUnit.Core.Tests.FailFixture.VerifyFailWorks" executed="True" success="True" time="0.000" asserts="2" />
                        </results>
                      </test-suite>
                      <test-suite name="FixtureSetupTearDownTest" executed="True" success="True" time="0.203" asserts="0">
                        <results>
                          <test-case name="NUnit.Core.Tests.FixtureSetupTearDownTest.BaseSetUpCalledFirstAndTearDownCalledLast" executed="True" success="True" time="0.016" asserts="6" />
                          <test-case name="NUnit.Core.Tests.FixtureSetupTearDownTest.CheckInheritedSetUpAndTearDownAreCalled" executed="True" success="True" time="0.016" asserts="2" />
                          <test-case name="NUnit.Core.Tests.FixtureSetupTearDownTest.DisposeCalledWhenFixtureImplementsIDisposable" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Core.Tests.FixtureSetupTearDownTest.FixtureWithNoTestsShouldNotCallFixtureSetUpOrTearDown" executed="True" success="True" time="0.016" asserts="2" />
                          <test-case name="NUnit.Core.Tests.FixtureSetupTearDownTest.HandleErrorInFixtureSetup" executed="True" success="True" time="0.016" asserts="11" />
                          <test-case name="NUnit.Core.Tests.FixtureSetupTearDownTest.HandleErrorInFixtureTearDown" executed="True" success="True" time="0.016" asserts="9" />
                          <test-case name="NUnit.Core.Tests.FixtureSetupTearDownTest.HandleExceptionInFixtureConstructor" executed="True" success="True" time="0.000" asserts="9" />
                          <test-case name="NUnit.Core.Tests.FixtureSetupTearDownTest.HandleIgnoreInFixtureSetup" executed="True" success="True" time="0.016" asserts="7" />
                          <test-case name="NUnit.Core.Tests.FixtureSetupTearDownTest.HandleSetUpAndTearDownWithTestInName" executed="True" success="True" time="0.016" asserts="2" />
                          <test-case name="NUnit.Core.Tests.FixtureSetupTearDownTest.IgnoredFixtureShouldNotCallFixtureSetUpOrTearDown" executed="True" success="True" time="0.000" asserts="2" />
                          <test-case name="NUnit.Core.Tests.FixtureSetupTearDownTest.MakeSureSetUpAndTearDownAreCalled" executed="True" success="True" time="0.016" asserts="2" />
                          <test-case name="NUnit.Core.Tests.FixtureSetupTearDownTest.MakeSureSetUpAndTearDownAreCalledOnExplicitFixture" executed="True" success="True" time="0.000" asserts="2" />
                          <test-case name="NUnit.Core.Tests.FixtureSetupTearDownTest.OverriddenSetUpAndTearDownAreNotCalled" executed="True" success="True" time="0.016" asserts="4" />
                          <test-case name="NUnit.Core.Tests.FixtureSetupTearDownTest.RerunFixtureAfterSetUpFixed" executed="True" success="True" time="0.016" asserts="4" />
                          <test-case name="NUnit.Core.Tests.FixtureSetupTearDownTest.RerunFixtureAfterTearDownFixed" executed="True" success="True" time="0.016" asserts="4" />
                          <test-case name="NUnit.Core.Tests.FixtureSetupTearDownTest.RunningSingleMethodCallsSetUpAndTearDown" executed="True" success="True" time="0.016" asserts="2" />
                        </results>
                      </test-suite>
                      <test-suite name="Generic" executed="True" success="True" time="0.031" asserts="0">
                        <results>
                          <test-suite name="DeduceTypeArgsFromArgs&lt;T1,T2&gt;" executed="True" success="True" time="0.016" asserts="0">
                            <results>
                              <test-suite name="DeduceTypeArgsFromArgs&lt;Double,Int32&gt;(100.0d,42)" executed="True" success="True" time="0.016" asserts="0">
                                <categories>
                                  <category name="Generics" />
                                </categories>
                                <results>
                                  <test-suite name="TestMyArgTypes" executed="True" success="True" time="0.016" asserts="0">
                                    <results>
                                      <test-case name="NUnit.Core.Tests.Generic.DeduceTypeArgsFromArgs`2[[System.Double, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089],[System.Int32, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].TestMyArgTypes(5,7)" executed="True" success="True" time="0.000" asserts="2" />
                                    </results>
                                  </test-suite>
                                </results>
                              </test-suite>
                              <test-suite name="DeduceTypeArgsFromArgs&lt;Int32,Double&gt;(42,100.0d)" executed="True" success="True" time="0.000" asserts="0">
                                <categories>
                                  <category name="Generics" />
                                </categories>
                                <results>
                                  <test-suite name="TestMyArgTypes" executed="True" success="True" time="0.000" asserts="0">
                                    <results>
                                      <test-case name="NUnit.Core.Tests.Generic.DeduceTypeArgsFromArgs`2[[System.Int32, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089],[System.Double, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].TestMyArgTypes(5,7)" executed="True" success="True" time="0.000" asserts="2" />
                                    </results>
                                  </test-suite>
                                </results>
                              </test-suite>
                            </results>
                          </test-suite>
                          <test-suite name="SimpleGenericFixture&lt;TList&gt;" executed="True" success="True" time="0.016" asserts="0">
                            <results>
                              <test-suite name="SimpleGenericFixture&lt;ArrayList&gt;" executed="True" success="True" time="0.016" asserts="0">
                                <categories>
                                  <category name="Generics" />
                                </categories>
                                <results>
                                  <test-case name="NUnit.Core.Tests.Generic.SimpleGenericFixture`1[[System.Collections.ArrayList, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].TestCollectionCount" executed="True" success="True" time="0.016" asserts="1" />
                                </results>
                              </test-suite>
                              <test-suite name="SimpleGenericFixture&lt;List&lt;Int32&gt;&gt;" executed="True" success="True" time="0.000" asserts="0">
                                <categories>
                                  <category name="Generics" />
                                </categories>
                                <results>
                                  <test-case name="NUnit.Core.Tests.Generic.SimpleGenericFixture`1[[System.Collections.Generic.List`1[[System.Int32, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]], mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].TestCollectionCount" executed="True" success="True" time="0.000" asserts="1" />
                                </results>
                              </test-suite>
                            </results>
                          </test-suite>
                          <test-suite name="SimpleGenericMethods" executed="True" success="True" time="0.000" asserts="0">
                            <categories>
                              <category name="Generics" />
                            </categories>
                            <results>
                              <test-suite name="GenericTestMethodWithOneTypeParameter" executed="True" success="True" time="0.000" asserts="0">
                                <results>
                                  <test-case name="NUnit.Core.Tests.Generic.SimpleGenericMethods.GenericTestMethodWithOneTypeParameter&lt;Double&gt;(5.0d,2.0d,&quot;ABC&quot;)" executed="True" success="True" time="0.000" asserts="3" />
                                  <test-case name="NUnit.Core.Tests.Generic.SimpleGenericMethods.GenericTestMethodWithOneTypeParameter&lt;Double&gt;(5.0d,2.0d,&quot;ABC&quot;)" executed="True" success="True" time="0.000" asserts="3" />
                                  <test-case name="NUnit.Core.Tests.Generic.SimpleGenericMethods.GenericTestMethodWithOneTypeParameter&lt;Double&gt;(5.0d,2.0d,&quot;ABC&quot;)" executed="True" success="True" time="0.000" asserts="3" />
                                  <test-case name="NUnit.Core.Tests.Generic.SimpleGenericMethods.GenericTestMethodWithOneTypeParameter&lt;Int32&gt;(5,2,&quot;ABC&quot;)" executed="True" success="True" time="0.000" asserts="3" />
                                </results>
                              </test-suite>
                              <test-suite name="GenericTestMethodWithTwoTypeParameters" executed="True" success="True" time="0.000" asserts="0">
                                <results>
                                  <test-case name="NUnit.Core.Tests.Generic.SimpleGenericMethods.GenericTestMethodWithTwoTypeParameters&lt;Int32,Double&gt;(5,2.0d,&quot;ABC&quot;)" executed="True" success="True" time="0.000" asserts="3" />
                                  <test-case name="NUnit.Core.Tests.Generic.SimpleGenericMethods.GenericTestMethodWithTwoTypeParameters&lt;Int32,Int32&gt;(5,2,&quot;ABC&quot;)" executed="True" success="True" time="0.000" asserts="3" />
                                  <test-case name="NUnit.Core.Tests.Generic.SimpleGenericMethods.GenericTestMethodWithTwoTypeParameters&lt;Double,Double&gt;(5.0d,2.0d,&quot;ABC&quot;)" executed="True" success="True" time="0.000" asserts="3" />
                                  <test-case name="NUnit.Core.Tests.Generic.SimpleGenericMethods.GenericTestMethodWithTwoTypeParameters&lt;Double,Int64&gt;(5.0d,2L,&quot;ABC&quot;)" executed="True" success="True" time="0.000" asserts="3" />
                                </results>
                              </test-suite>
                              <test-suite name="GenericTestMethodWithTwoTypeParameters_Reversed" executed="True" success="True" time="0.000" asserts="0">
                                <results>
                                  <test-case name="NUnit.Core.Tests.Generic.SimpleGenericMethods.GenericTestMethodWithTwoTypeParameters_Reversed&lt;Int32,Int32&gt;(5,2,&quot;ABC&quot;)" executed="True" success="True" time="0.000" asserts="3" />
                                  <test-case name="NUnit.Core.Tests.Generic.SimpleGenericMethods.GenericTestMethodWithTwoTypeParameters_Reversed&lt;Int64,Double&gt;(5.0d,2L,&quot;ABC&quot;)" executed="True" success="True" time="0.000" asserts="3" />
                                  <test-case name="NUnit.Core.Tests.Generic.SimpleGenericMethods.GenericTestMethodWithTwoTypeParameters_Reversed&lt;Double,Double&gt;(5.0d,2.0d,&quot;ABC&quot;)" executed="True" success="True" time="0.000" asserts="3" />
                                  <test-case name="NUnit.Core.Tests.Generic.SimpleGenericMethods.GenericTestMethodWithTwoTypeParameters_Reversed&lt;Double,Int32&gt;(5,2.0d,&quot;ABC&quot;)" executed="True" success="True" time="0.000" asserts="3" />
                                </results>
                              </test-suite>
                            </results>
                          </test-suite>
                          <test-suite name="TypeParameterUsedWithTestMethod&lt;T&gt;" executed="True" success="True" time="0.000" asserts="0">
                            <results>
                              <test-suite name="TypeParameterUsedWithTestMethod&lt;Double&gt;" executed="True" success="True" time="0.000" asserts="0">
                                <categories>
                                  <category name="Generics" />
                                </categories>
                                <results>
                                  <test-suite name="TestMyArgType" executed="True" success="True" time="0.000" asserts="0">
                                    <results>
                                      <test-case name="NUnit.Core.Tests.Generic.TypeParameterUsedWithTestMethod`1[[System.Double, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].TestMyArgType(1.23d)" executed="True" success="True" time="0.000" asserts="1" />
                                      <test-case name="NUnit.Core.Tests.Generic.TypeParameterUsedWithTestMethod`1[[System.Double, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].TestMyArgType(5)" executed="True" success="True" time="0.000" asserts="1" />
                                    </results>
                                  </test-suite>
                                </results>
                              </test-suite>
                            </results>
                          </test-suite>
                        </results>
                      </test-suite>
                      <test-suite name="IgnoreFixture" executed="True" success="True" time="0.094" asserts="0">
                        <results>
                          <test-case name="NUnit.Core.Tests.IgnoreFixture.IgnoreTakesPrecedenceOverExpectedException" executed="True" success="True" time="0.016" asserts="2" />
                          <test-case name="NUnit.Core.Tests.IgnoreFixture.IgnoreThrowsIgnoreException" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Core.Tests.IgnoreFixture.IgnoreWithUserMessage" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Core.Tests.IgnoreFixture.IgnoreWithUserMessage_ArrayOfArgs" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Core.Tests.IgnoreFixture.IgnoreWithUserMessage_OneArg" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Core.Tests.IgnoreFixture.IgnoreWithUserMessage_ThreeArgs" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Core.Tests.IgnoreFixture.IgnoreWorksForTestCase" executed="True" success="True" time="0.047" asserts="2" />
                          <test-case name="NUnit.Core.Tests.IgnoreFixture.IgnoreWorksForTestSuite" executed="True" success="True" time="0.000" asserts="3" />
                          <test-case name="NUnit.Core.Tests.IgnoreFixture.IgnoreWorksFromSetUp" executed="True" success="True" time="0.016" asserts="3" />
                        </results>
                      </test-suite>
                      <test-suite name="LegacySuiteTests" executed="True" success="True" time="0.172" asserts="0">
                        <results>
                          <test-case name="NUnit.Core.Tests.LegacySuiteTests.SetUpAndTearDownAreCalled" executed="True" success="True" time="0.016" asserts="3" />
                          <test-case name="NUnit.Core.Tests.LegacySuiteTests.SuitePropertyWithInvalidType" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Core.Tests.LegacySuiteTests.SuiteReturningFixtures" executed="True" success="True" time="0.094" asserts="3" />
                          <test-case name="NUnit.Core.Tests.LegacySuiteTests.SuiteReturningTestSuite" executed="True" success="True" time="0.016" asserts="3" />
                          <test-case name="NUnit.Core.Tests.LegacySuiteTests.SuiteReturningTypes" executed="True" success="True" time="0.031" asserts="3" />
                        </results>
                      </test-suite>
                      <test-suite name="MaxTimeTests" executed="True" success="True" time="0.109" asserts="0">
                        <results>
                          <test-case name="NUnit.Core.Tests.MaxTimeTests.ErrorReport" executed="True" success="True" time="0.000" asserts="0">
                            <properties>
                              <property name="MaxTime" value="1000" />
                            </properties>
                          </test-case>
                          <test-case name="NUnit.Core.Tests.MaxTimeTests.ErrorReportHasPriorityOverMaxTime" executed="True" success="True" time="0.047" asserts="3" />
                          <test-case name="NUnit.Core.Tests.MaxTimeTests.FailureReport" executed="True" success="True" time="0.000" asserts="0">
                            <properties>
                              <property name="MaxTime" value="1000" />
                            </properties>
                          </test-case>
                          <test-case name="NUnit.Core.Tests.MaxTimeTests.FailureReportHasPriorityOverMaxTime" executed="True" success="True" time="0.031" asserts="3" />
                          <test-case name="NUnit.Core.Tests.MaxTimeTests.MaxTimeExceeded" executed="True" success="True" time="0.031" asserts="2" />
                          <test-case name="NUnit.Core.Tests.MaxTimeTests.MaxTimeNotExceeded" executed="True" success="True" time="0.000" asserts="0">
                            <properties>
                              <property name="MaxTime" value="1000" />
                            </properties>
                          </test-case>
                        </results>
                      </test-suite>
                      <test-suite name="NameFilterTest" executed="True" success="True" time="0.063" asserts="0">
                        <results>
                          <test-case name="NUnit.Core.Tests.NameFilterTest.ExplicitTestCaseDoesNotMatchWhenNotSelectedDirectly" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Core.Tests.NameFilterTest.ExplicitTestCaseMatchesWhenSelectedDirectly" executed="True" success="True" time="0.016" asserts="2" />
                          <test-case name="NUnit.Core.Tests.NameFilterTest.ExplicitTestSuiteDoesNotMatchWhenNotSelectedDirectly" executed="True" success="True" time="0.000" asserts="2" />
                          <test-case name="NUnit.Core.Tests.NameFilterTest.ExplicitTestSuiteMatchesWhenSelectedDirectly" executed="True" success="True" time="0.016" asserts="3" />
                          <test-case name="NUnit.Core.Tests.NameFilterTest.HighLevelSuite" executed="True" success="True" time="0.000" asserts="3" />
                          <test-case name="NUnit.Core.Tests.NameFilterTest.MultipleNameMatch" executed="True" success="True" time="0.016" asserts="3" />
                          <test-case name="NUnit.Core.Tests.NameFilterTest.SingleNameMatch" executed="True" success="True" time="0.000" asserts="4" />
                          <test-case name="NUnit.Core.Tests.NameFilterTest.SuiteNameMatch" executed="True" success="True" time="0.000" asserts="3" />
                          <test-case name="NUnit.Core.Tests.NameFilterTest.TestDoesNotMatch" executed="True" success="True" time="0.016" asserts="2" />
                        </results>
                      </test-suite>
                      <test-suite name="NamespaceAssemblyTests" executed="True" success="True" time="0.219" asserts="0">
                        <results>
                          <test-case name="NUnit.Core.Tests.NamespaceAssemblyTests.Hierarchy" executed="True" success="True" time="0.078" asserts="16" />
                          <test-case name="NUnit.Core.Tests.NamespaceAssemblyTests.LoadTestFixtureFromAssembly" executed="True" success="True" time="0.031" asserts="1" />
                          <test-case name="NUnit.Core.Tests.NamespaceAssemblyTests.NoNamespaceInAssembly" executed="True" success="True" time="0.047" asserts="5" />
                          <test-case name="NUnit.Core.Tests.NamespaceAssemblyTests.TestRoot" executed="True" success="True" time="0.063" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite name="PairwiseTest" executed="True" success="True" time="0.016" asserts="0">
                        <results>
                          <test-suite name="Test" executed="True" success="True" time="0.016" asserts="0">
                            <results>
                              <test-case name="NUnit.Core.Tests.PairwiseTest.Test 2x4" executed="True" success="True" time="0.000" asserts="2" />
                              <test-case name="NUnit.Core.Tests.PairwiseTest.Test 2x2x2" executed="True" success="True" time="0.000" asserts="2" />
                              <test-case name="NUnit.Core.Tests.PairwiseTest.Test 3x2x2" executed="True" success="True" time="0.000" asserts="2" />
                              <test-case name="NUnit.Core.Tests.PairwiseTest.Test 3x2x2x2" executed="True" success="True" time="0.000" asserts="2" />
                              <test-case name="NUnit.Core.Tests.PairwiseTest.Test 3x2x2x2x2" executed="True" success="True" time="0.000" asserts="2" />
                              <test-case name="NUnit.Core.Tests.PairwiseTest.Test 3x2x2x2x2x2" executed="True" success="True" time="0.016" asserts="2" />
                              <test-case name="NUnit.Core.Tests.PairwiseTest.Test 3x3x3" executed="True" success="True" time="0.000" asserts="2" />
                              <test-case name="NUnit.Core.Tests.PairwiseTest.Test 4x4x4" executed="True" success="True" time="0.000" asserts="2" />
                              <test-case name="NUnit.Core.Tests.PairwiseTest.Test 5x5x5" executed="True" success="True" time="0.000" asserts="2" />
                            </results>
                          </test-suite>
                        </results>
                      </test-suite>
                      <test-suite name="PairwiseTest+LiveTest" executed="True" success="True" time="0.000" asserts="1">
                        <results>
                          <test-suite name="Test" executed="True" success="True" time="0.000" asserts="0">
                            <results>
                              <test-case name="NUnit.Core.Tests.PairwiseTest+LiveTest.Test(&quot;a&quot;,&quot;-&quot;,&quot;x&quot;)" executed="True" success="True" time="0.000" asserts="0" />
                              <test-case name="NUnit.Core.Tests.PairwiseTest+LiveTest.Test(&quot;b&quot;,&quot;+&quot;,&quot;y&quot;)" executed="True" success="True" time="0.000" asserts="0" />
                              <test-case name="NUnit.Core.Tests.PairwiseTest+LiveTest.Test(&quot;c&quot;,&quot;+&quot;,&quot;x&quot;)" executed="True" success="True" time="0.000" asserts="0" />
                              <test-case name="NUnit.Core.Tests.PairwiseTest+LiveTest.Test(&quot;b&quot;,&quot;-&quot;,&quot;x&quot;)" executed="True" success="True" time="0.000" asserts="0" />
                              <test-case name="NUnit.Core.Tests.PairwiseTest+LiveTest.Test(&quot;a&quot;,&quot;-&quot;,&quot;y&quot;)" executed="True" success="True" time="0.000" asserts="0" />
                              <test-case name="NUnit.Core.Tests.PairwiseTest+LiveTest.Test(&quot;c&quot;,&quot;-&quot;,&quot;y&quot;)" executed="True" success="True" time="0.000" asserts="0" />
                              <test-case name="NUnit.Core.Tests.PairwiseTest+LiveTest.Test(&quot;a&quot;,&quot;+&quot;,&quot;x&quot;)" executed="True" success="True" time="0.000" asserts="0" />
                            </results>
                          </test-suite>
                        </results>
                      </test-suite>
                      <test-suite name="ParameterizedTestFixture" executed="True" success="True" time="0.000" asserts="0">
                        <results>
                          <test-suite name="ParameterizedTestFixture(&quot;hello&quot;,&quot;hello&quot;,&quot;goodbye&quot;)" executed="True" success="True" time="0.000" asserts="0">
                            <results>
                              <test-case name="NUnit.Core.Tests.ParameterizedTestFixture.TestEquality" executed="True" success="True" time="0.000" asserts="2" />
                              <test-case name="NUnit.Core.Tests.ParameterizedTestFixture.TestInequality" executed="True" success="True" time="0.000" asserts="2" />
                            </results>
                          </test-suite>
                          <test-suite name="ParameterizedTestFixture(&quot;zip&quot;,&quot;zip&quot;)" executed="True" success="True" time="0.000" asserts="0">
                            <results>
                              <test-case name="NUnit.Core.Tests.ParameterizedTestFixture.TestEquality" executed="True" success="True" time="0.000" asserts="2" />
                              <test-case name="NUnit.Core.Tests.ParameterizedTestFixture.TestInequality" executed="True" success="True" time="0.000" asserts="1" />
                            </results>
                          </test-suite>
                          <test-suite name="ParameterizedTestFixture(42,42,99)" executed="True" success="True" time="0.000" asserts="0">
                            <results>
                              <test-case name="NUnit.Core.Tests.ParameterizedTestFixture.TestEquality" executed="True" success="True" time="0.000" asserts="2" />
                              <test-case name="NUnit.Core.Tests.ParameterizedTestFixture.TestInequality" executed="True" success="True" time="0.000" asserts="2" />
                            </results>
                          </test-suite>
                        </results>
                      </test-suite>
                      <test-suite name="ParameterizedTestFixtureWithDataSources" executed="True" success="True" time="0.063" asserts="0">
                        <results>
                          <test-suite name="ParameterizedTestFixtureWithDataSources(42)" executed="True" success="True" time="0.016" asserts="0">
                            <results>
                              <test-suite name="CanAccessTestCaseSource" executed="True" success="True" time="0.016" asserts="0">
                                <results>
                                  <test-case name="NUnit.Core.Tests.ParameterizedTestFixtureWithDataSources.CanAccessTestCaseSource(6,7)" executed="True" success="True" time="0.000" asserts="1" />
                                  <test-case name="NUnit.Core.Tests.ParameterizedTestFixtureWithDataSources.CanAccessTestCaseSource(3,14)" executed="True" success="True" time="0.000" asserts="1" />
                                </results>
                              </test-suite>
                              <test-suite name="CanAccessValueSource" executed="True" success="True" time="0.000" asserts="0">
                                <results>
                                  <test-case name="NUnit.Core.Tests.ParameterizedTestFixtureWithDataSources.CanAccessValueSource(1)" executed="True" success="True" time="0.000" asserts="1" />
                                  <test-case name="NUnit.Core.Tests.ParameterizedTestFixtureWithDataSources.CanAccessValueSource(2)" executed="True" success="True" time="0.000" asserts="1" />
                                  <test-case name="NUnit.Core.Tests.ParameterizedTestFixtureWithDataSources.CanAccessValueSource(3)" executed="True" success="True" time="0.000" asserts="1" />
                                </results>
                              </test-suite>
                              <test-suite name="CanGenerateDataFromParameter" executed="True" success="True" time="0.000" asserts="0">
                                <results>
                                  <test-case name="NUnit.Core.Tests.ParameterizedTestFixtureWithDataSources.CanGenerateDataFromParameter(1,42)" executed="True" success="True" time="0.000" asserts="1" />
                                  <test-case name="NUnit.Core.Tests.ParameterizedTestFixtureWithDataSources.CanGenerateDataFromParameter(2,21)" executed="True" success="True" time="0.000" asserts="1" />
                                  <test-case name="NUnit.Core.Tests.ParameterizedTestFixtureWithDataSources.CanGenerateDataFromParameter(3,14)" executed="True" success="True" time="0.000" asserts="1" />
                                  <test-case name="NUnit.Core.Tests.ParameterizedTestFixtureWithDataSources.CanGenerateDataFromParameter(6,7)" executed="True" success="True" time="0.000" asserts="1" />
                                  <test-case name="NUnit.Core.Tests.ParameterizedTestFixtureWithDataSources.CanGenerateDataFromParameter(7,6)" executed="True" success="True" time="0.000" asserts="1" />
                                  <test-case name="NUnit.Core.Tests.ParameterizedTestFixtureWithDataSources.CanGenerateDataFromParameter(14,3)" executed="True" success="True" time="0.000" asserts="1" />
                                  <test-case name="NUnit.Core.Tests.ParameterizedTestFixtureWithDataSources.CanGenerateDataFromParameter(21,2)" executed="True" success="True" time="0.000" asserts="1" />
                                  <test-case name="NUnit.Core.Tests.ParameterizedTestFixtureWithDataSources.CanGenerateDataFromParameter(42,1)" executed="True" success="True" time="0.000" asserts="1" />
                                </results>
                              </test-suite>
                            </results>
                          </test-suite>
                        </results>
                      </test-suite>
                      <test-suite name="PlatformDetectionTests" executed="True" success="True" time="0.016" asserts="0">
                        <results>
                          <test-case name="NUnit.Core.Tests.PlatformDetectionTests.ArrayOfPlatforms" executed="True" success="True" time="0.000" asserts="2" />
                          <test-case name="NUnit.Core.Tests.PlatformDetectionTests.DetectExactVersion" executed="True" success="True" time="0.000" asserts="4" />
                          <test-case name="NUnit.Core.Tests.PlatformDetectionTests.DetectMono10" executed="True" success="True" time="0.000" asserts="8" />
                          <test-case name="NUnit.Core.Tests.PlatformDetectionTests.DetectMono20" executed="True" success="True" time="0.000" asserts="8" />
                          <test-case name="NUnit.Core.Tests.PlatformDetectionTests.DetectNet10" executed="True" success="True" time="0.000" asserts="8" />
                          <test-case name="NUnit.Core.Tests.PlatformDetectionTests.DetectNet11" executed="True" success="True" time="0.000" asserts="8" />
                          <test-case name="NUnit.Core.Tests.PlatformDetectionTests.DetectNet20" executed="True" success="True" time="0.000" asserts="8" />
                          <test-case name="NUnit.Core.Tests.PlatformDetectionTests.DetectNetCF" executed="True" success="True" time="0.000" asserts="9" />
                          <test-case name="NUnit.Core.Tests.PlatformDetectionTests.DetectNT3" executed="True" success="True" time="0.000" asserts="16" />
                          <test-case name="NUnit.Core.Tests.PlatformDetectionTests.DetectNT4" executed="True" success="True" time="0.000" asserts="16" />
                          <test-case name="NUnit.Core.Tests.PlatformDetectionTests.DetectSSCLI" executed="True" success="True" time="0.000" asserts="8" />
                          <test-case name="NUnit.Core.Tests.PlatformDetectionTests.DetectUnixUnderMicrosoftDotNet" executed="True" success="True" time="0.000" asserts="18" />
                          <test-case name="NUnit.Core.Tests.PlatformDetectionTests.DetectUnixUnderMono" executed="False">
                            <reason>
                              <message><![CDATA[Not supported on Net]]></message>
                            </reason>
                          </test-case>
                          <test-case name="NUnit.Core.Tests.PlatformDetectionTests.DetectVista" executed="True" success="True" time="0.000" asserts="15" />
                          <test-case name="NUnit.Core.Tests.PlatformDetectionTests.DetectWin2003Server" executed="True" success="True" time="0.000" asserts="15" />
                          <test-case name="NUnit.Core.Tests.PlatformDetectionTests.DetectWin2008Server" executed="True" success="True" time="0.000" asserts="15" />
                          <test-case name="NUnit.Core.Tests.PlatformDetectionTests.DetectWin2K" executed="True" success="True" time="0.000" asserts="15" />
                          <test-case name="NUnit.Core.Tests.PlatformDetectionTests.DetectWin95" executed="True" success="True" time="0.000" asserts="16" />
                          <test-case name="NUnit.Core.Tests.PlatformDetectionTests.DetectWin98" executed="True" success="True" time="0.000" asserts="16" />
                          <test-case name="NUnit.Core.Tests.PlatformDetectionTests.DetectWinCE" executed="True" success="True" time="0.000" asserts="17" />
                          <test-case name="NUnit.Core.Tests.PlatformDetectionTests.DetectWinMe" executed="True" success="True" time="0.000" asserts="16" />
                          <test-case name="NUnit.Core.Tests.PlatformDetectionTests.DetectWinXP" executed="True" success="True" time="0.000" asserts="15" />
                          <test-case name="NUnit.Core.Tests.PlatformDetectionTests.PlatformAttribute_Exclude" executed="True" success="True" time="0.000" asserts="3" />
                          <test-case name="NUnit.Core.Tests.PlatformDetectionTests.PlatformAttribute_Include" executed="True" success="True" time="0.016" asserts="3" />
                          <test-case name="NUnit.Core.Tests.PlatformDetectionTests.PlatformAttribute_IncludeAndExclude" executed="True" success="True" time="0.000" asserts="7" />
                          <test-case name="NUnit.Core.Tests.PlatformDetectionTests.PlatformAttribute_InvalidPlatform" executed="True" success="True" time="0.000" asserts="2" />
                        </results>
                      </test-suite>
                      <test-suite name="PropertyAttributeTests" executed="True" success="True" time="0.031" asserts="0">
                        <results>
                          <test-case name="NUnit.Core.Tests.PropertyAttributeTests.CanDeriveFromPropertyAttribute" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Core.Tests.PropertyAttributeTests.PropertiesWithNumericValues" executed="True" success="True" time="0.016" asserts="2" />
                          <test-case name="NUnit.Core.Tests.PropertyAttributeTests.PropertyWithStringValue" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Core.Tests.PropertyAttributeTests.PropertyWorksOnFixtures" executed="True" success="True" time="0.016" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite name="ReflectTests" executed="True" success="True" time="0.000" asserts="0">
                        <results>
                          <test-case name="NUnit.Core.Tests.ReflectTests.CanDetectAttributes" executed="True" success="True" time="0.000" asserts="3" />
                          <test-case name="NUnit.Core.Tests.ReflectTests.CanDetectInheritedAttributes" executed="True" success="True" time="0.000" asserts="3" />
                          <test-case name="NUnit.Core.Tests.ReflectTests.Construct" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Core.Tests.ReflectTests.GetAttribute" executed="True" success="True" time="0.000" asserts="3" />
                          <test-case name="NUnit.Core.Tests.ReflectTests.GetAttributes" executed="True" success="True" time="0.000" asserts="4" />
                          <test-case name="NUnit.Core.Tests.ReflectTests.GetConstructor" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Core.Tests.ReflectTests.GetInheritedAttribute" executed="True" success="True" time="0.000" asserts="3" />
                          <test-case name="NUnit.Core.Tests.ReflectTests.GetInheritedAttributes" executed="True" success="True" time="0.000" asserts="4" />
                          <test-case name="NUnit.Core.Tests.ReflectTests.GetMethodsWithAttribute" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Core.Tests.ReflectTests.GetNamedMethod" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Core.Tests.ReflectTests.GetNamedMethodWithArgs" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Core.Tests.ReflectTests.GetNamedProperty" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Core.Tests.ReflectTests.GetPropertyValue" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Core.Tests.ReflectTests.GetPropertyWithAttribute" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Core.Tests.ReflectTests.HasInterface" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Core.Tests.ReflectTests.InheritsFrom" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Core.Tests.ReflectTests.InvokeMethod" executed="True" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite name="RemoteRunnerTests" executed="True" success="True" time="1.281" asserts="1">
                        <results>
                          <test-case name="NUnit.Core.Tests.RemoteRunnerTests.CheckRunnerID" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Core.Tests.RemoteRunnerTests.CountTestCases" executed="True" success="True" time="0.188" asserts="1" />
                          <test-case name="NUnit.Core.Tests.RemoteRunnerTests.CountTestCasesAcrossMultipleAssemblies" executed="True" success="True" time="0.156" asserts="1" />
                          <test-case name="NUnit.Core.Tests.RemoteRunnerTests.LoadAssembly" executed="True" success="True" time="0.078" asserts="1" />
                          <test-case name="NUnit.Core.Tests.RemoteRunnerTests.LoadAssemblyWithFixture" executed="True" success="True" time="0.063" asserts="1" />
                          <test-case name="NUnit.Core.Tests.RemoteRunnerTests.LoadAssemblyWithoutNamespaces" executed="True" success="True" time="0.078" asserts="4" />
                          <test-case name="NUnit.Core.Tests.RemoteRunnerTests.LoadAssemblyWithSuite" executed="True" success="True" time="0.047" asserts="1" />
                          <test-case name="NUnit.Core.Tests.RemoteRunnerTests.LoadMultipleAssemblies" executed="True" success="True" time="0.109" asserts="1" />
                          <test-case name="NUnit.Core.Tests.RemoteRunnerTests.LoadMultipleAssembliesWithFixture" executed="True" success="True" time="0.078" asserts="1" />
                          <test-case name="NUnit.Core.Tests.RemoteRunnerTests.LoadMultipleAssembliesWithSuite" executed="True" success="True" time="0.094" asserts="1" />
                          <test-case name="NUnit.Core.Tests.RemoteRunnerTests.RunAssembly" executed="True" success="True" time="0.109" asserts="1" />
                          <test-case name="NUnit.Core.Tests.RemoteRunnerTests.RunAssemblyUsingBeginAndEndRun" executed="True" success="True" time="0.078" asserts="2" />
                          <test-case name="NUnit.Core.Tests.RemoteRunnerTests.RunMultipleAssemblies" executed="True" success="True" time="0.094" asserts="1" />
                          <test-case name="NUnit.Core.Tests.RemoteRunnerTests.RunMultipleAssembliesUsingBeginAndEndRun" executed="True" success="True" time="0.094" asserts="2" />
                        </results>
                      </test-suite>
                      <test-suite name="RepeatedTestFixture" executed="True" success="True" time="0.063" asserts="0">
                        <results>
                          <test-case name="NUnit.Core.Tests.RepeatedTestFixture.CategoryWorksWithRepeatedTest" executed="True" success="True" time="0.016" asserts="3" />
                          <test-case name="NUnit.Core.Tests.RepeatedTestFixture.IgnoreWorksWithRepeatedTest" executed="True" success="True" time="0.000" asserts="3" />
                          <test-case name="NUnit.Core.Tests.RepeatedTestFixture.RepeatFailOnFirst" executed="True" success="True" time="0.016" asserts="4" />
                          <test-case name="NUnit.Core.Tests.RepeatedTestFixture.RepeatFailOnThird" executed="True" success="True" time="0.016" asserts="4" />
                          <test-case name="NUnit.Core.Tests.RepeatedTestFixture.RepeatSuccess" executed="True" success="True" time="0.016" asserts="6" />
                        </results>
                      </test-suite>
                      <test-suite name="RuntimeFrameworkTests" executed="True" success="True" time="0.016" asserts="0">
                        <results>
                          <test-case name="NUnit.Core.Tests.RuntimeFrameworkTests.CanGetCurrentFramework" executed="True" success="True" time="0.000" asserts="2" />
                          <test-case name="NUnit.Core.Tests.RuntimeFrameworkTests.CanListAvailableFrameworks" executed="True" success="True" time="0.016" asserts="2" />
                          <test-case name="NUnit.Core.Tests.RuntimeFrameworkTests.CurrentFrameworkMustBeAvailable" executed="True" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite name="SerializationBug" executed="True" success="True" time="0.000" asserts="0">
                        <results>
                          <test-case name="NUnit.Core.Tests.SerializationBug.SaveAndLoad" executed="True" success="True" time="0.000" asserts="3" />
                        </results>
                      </test-suite>
                      <test-suite name="SetCultureAttributeTests" executed="True" success="True" time="0.016" asserts="0">
                        <results>
                          <test-case name="NUnit.Core.Tests.SetCultureAttributeTests.SetBothCulturesToFrench" executed="True" success="True" time="0.000" asserts="2" />
                          <test-case name="NUnit.Core.Tests.SetCultureAttributeTests.SetBothCulturesToFrenchCanadian" executed="True" success="True" time="0.000" asserts="2" />
                          <test-case name="NUnit.Core.Tests.SetCultureAttributeTests.SetBothCulturesToRussian" executed="True" success="True" time="0.000" asserts="2" />
                          <test-case name="NUnit.Core.Tests.SetCultureAttributeTests.SetMixedCulturesToFrenchAndUIFrenchCanadian" executed="True" success="True" time="0.000" asserts="2" />
                          <test-case name="NUnit.Core.Tests.SetCultureAttributeTests.SetMixedCulturesToRussianAndUIEnglishUS" executed="True" success="True" time="0.000" asserts="2" />
                          <test-case name="NUnit.Core.Tests.SetCultureAttributeTests.SetUICultureOnlyToFrench" executed="True" success="True" time="0.000" asserts="2" />
                          <test-case name="NUnit.Core.Tests.SetCultureAttributeTests.SetUICultureOnlyToFrenchCanadian" executed="True" success="True" time="0.000" asserts="2" />
                          <test-case name="NUnit.Core.Tests.SetCultureAttributeTests.SetUICultureOnlyToRussian" executed="True" success="True" time="0.000" asserts="2" />
                        </results>
                      </test-suite>
                      <test-suite name="SetCultureAttributeTests+NestedBehavior" executed="True" success="True" time="0.000" asserts="0">
                        <results>
                          <test-case name="NUnit.Core.Tests.SetCultureAttributeTests+NestedBehavior.InheritedRussian" executed="True" success="True" time="0.000" asserts="2" />
                          <test-case name="NUnit.Core.Tests.SetCultureAttributeTests+NestedBehavior.InheritedRussianWithUIFrench" executed="True" success="True" time="0.000" asserts="2" />
                        </results>
                      </test-suite>
                      <test-suite name="SetUpFixtureTests" executed="True" success="True" time="2.719" asserts="0">
                        <results>
                          <test-case name="NUnit.Core.Tests.SetUpFixtureTests.AssemblySetUpFixtureReplacesAssemblyNodeInTree" executed="True" success="True" time="1.172" asserts="4" />
                          <test-case name="NUnit.Core.Tests.SetUpFixtureTests.AssemblySetupFixtureWrapsExecutionOfTest" executed="True" success="True" time="1.125" asserts="5" />
                          <test-case name="NUnit.Core.Tests.SetUpFixtureTests.NamespaceSetUpFixtureReplacesNamespaceNodeInTree" executed="True" success="True" time="0.078" asserts="14" />
                          <test-case name="NUnit.Core.Tests.SetUpFixtureTests.NamespaceSetUpFixtureWrapsExecutionOfSingleTest" executed="True" success="True" time="0.047" asserts="8" />
                          <test-case name="NUnit.Core.Tests.SetUpFixtureTests.NamespaceSetUpFixtureWrapsExecutionOfTwoTests" executed="True" success="True" time="0.047" asserts="13" />
                          <test-case name="NUnit.Core.Tests.SetUpFixtureTests.NamespaceSetUpFixtureWrapsNestedNamespaceSetUpFixture" executed="True" success="True" time="0.078" asserts="15" />
                          <test-case name="NUnit.Core.Tests.SetUpFixtureTests.NamespaceSetUpMethodsMayBeStatic" executed="True" success="True" time="0.078" asserts="8" />
                          <test-case name="NUnit.Core.Tests.SetUpFixtureTests.WithTwoSetUpFixtuesOnlyOneIsUsed" executed="True" success="True" time="0.078" asserts="8" />
                        </results>
                      </test-suite>
                      <test-suite name="SetUpTest" executed="True" success="True" time="0.078" asserts="0">
                        <results>
                          <test-case name="NUnit.Core.Tests.SetUpTest.BaseSetUpIsCalledFirstTearDownLast" executed="True" success="True" time="0.016" asserts="6" />
                          <test-case name="NUnit.Core.Tests.SetUpTest.CheckInheritedSetUpAndTearDownAreCalled" executed="True" success="True" time="0.000" asserts="2" />
                          <test-case name="NUnit.Core.Tests.SetUpTest.CheckOverriddenSetUpAndTearDownAreNotCalled" executed="True" success="True" time="0.016" asserts="4" />
                          <test-case name="NUnit.Core.Tests.SetUpTest.MakeSureSetUpAndTearDownAreCalled" executed="True" success="True" time="0.000" asserts="2" />
                          <test-case name="NUnit.Core.Tests.SetUpTest.MultipleSetUpAndTearDownMethodsAreCalled" executed="True" success="True" time="0.016" asserts="5" />
                          <test-case name="NUnit.Core.Tests.SetUpTest.SetUpAndTearDownCounter" executed="True" success="True" time="0.000" asserts="2" />
                          <test-case name="NUnit.Core.Tests.SetUpTest.SetupRecordsOriginalExceptionThownByTestCase" executed="True" success="True" time="0.031" asserts="3" />
                          <test-case name="NUnit.Core.Tests.SetUpTest.TearDownRecordsOriginalExceptionThownByTestCase" executed="True" success="True" time="0.000" asserts="4" />
                        </results>
                      </test-suite>
                      <test-suite name="SimpleNameFilterTests" executed="True" success="True" time="0.078" asserts="0">
                        <results>
                          <test-case name="NUnit.Core.Tests.SimpleNameFilterTests.ExplicitTestCaseDoesNotMatchWhenNotSelectedDirectly" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Core.Tests.SimpleNameFilterTests.ExplicitTestCaseMatchesWhenSelectedDirectly" executed="True" success="True" time="0.016" asserts="2" />
                          <test-case name="NUnit.Core.Tests.SimpleNameFilterTests.ExplicitTestSuiteDoesNotMatchWhenNotSelectedDirectly" executed="True" success="True" time="0.000" asserts="2" />
                          <test-case name="NUnit.Core.Tests.SimpleNameFilterTests.ExplicitTestSuiteMatchesWhenSelectedDirectly" executed="True" success="True" time="0.016" asserts="3" />
                          <test-case name="NUnit.Core.Tests.SimpleNameFilterTests.HighLevelSuite" executed="True" success="True" time="0.000" asserts="3" />
                          <test-case name="NUnit.Core.Tests.SimpleNameFilterTests.MultipleNameMatch" executed="True" success="True" time="0.016" asserts="3" />
                          <test-case name="NUnit.Core.Tests.SimpleNameFilterTests.SingleNameMatch" executed="True" success="True" time="0.000" asserts="4" />
                          <test-case name="NUnit.Core.Tests.SimpleNameFilterTests.SuiteNameMatch" executed="True" success="True" time="0.031" asserts="3" />
                          <test-case name="NUnit.Core.Tests.SimpleNameFilterTests.TestDoesNotMatch" executed="True" success="True" time="0.000" asserts="2" />
                        </results>
                      </test-suite>
                      <test-suite name="SimpleTestRunnerTests" executed="True" success="True" time="1.156" asserts="1">
                        <results>
                          <test-case name="NUnit.Core.Tests.SimpleTestRunnerTests.CheckRunnerID" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Core.Tests.SimpleTestRunnerTests.CountTestCases" executed="True" success="True" time="0.078" asserts="1" />
                          <test-case name="NUnit.Core.Tests.SimpleTestRunnerTests.CountTestCasesAcrossMultipleAssemblies" executed="True" success="True" time="0.141" asserts="1" />
                          <test-case name="NUnit.Core.Tests.SimpleTestRunnerTests.LoadAssembly" executed="True" success="True" time="0.078" asserts="1" />
                          <test-case name="NUnit.Core.Tests.SimpleTestRunnerTests.LoadAssemblyWithFixture" executed="True" success="True" time="0.047" asserts="1" />
                          <test-case name="NUnit.Core.Tests.SimpleTestRunnerTests.LoadAssemblyWithoutNamespaces" executed="True" success="True" time="0.063" asserts="4" />
                          <test-case name="NUnit.Core.Tests.SimpleTestRunnerTests.LoadAssemblyWithSuite" executed="True" success="True" time="0.047" asserts="1" />
                          <test-case name="NUnit.Core.Tests.SimpleTestRunnerTests.LoadMultipleAssemblies" executed="True" success="True" time="0.109" asserts="1" />
                          <test-case name="NUnit.Core.Tests.SimpleTestRunnerTests.LoadMultipleAssembliesWithFixture" executed="True" success="True" time="0.047" asserts="1" />
                          <test-case name="NUnit.Core.Tests.SimpleTestRunnerTests.LoadMultipleAssembliesWithSuite" executed="True" success="True" time="0.109" asserts="1" />
                          <test-case name="NUnit.Core.Tests.SimpleTestRunnerTests.RunAssembly" executed="True" success="True" time="0.063" asserts="1" />
                          <test-case name="NUnit.Core.Tests.SimpleTestRunnerTests.RunAssemblyUsingBeginAndEndRun" executed="True" success="True" time="0.094" asserts="2" />
                          <test-case name="NUnit.Core.Tests.SimpleTestRunnerTests.RunMultipleAssemblies" executed="True" success="True" time="0.125" asserts="1" />
                          <test-case name="NUnit.Core.Tests.SimpleTestRunnerTests.RunMultipleAssembliesUsingBeginAndEndRun" executed="True" success="True" time="0.125" asserts="2" />
                        </results>
                      </test-suite>
                      <test-suite name="StackOverflowTestFixture" executed="False">
                        <reason>
                          <message><![CDATA[Cannot handle StackOverflowException in managed code]]></message>
                        </reason>
                        <results>
                          <test-case name="NUnit.Core.Tests.StackOverflowTestFixture.SimpleOverflow" executed="False">
                            <reason>
                              <message><![CDATA[Cannot handle StackOverflowException in managed code]]></message>
                            </reason>
                          </test-case>
                        </results>
                      </test-suite>
                      <test-suite name="SuiteBuilderTests" executed="True" success="True" time="1.109" asserts="0">
                        <results>
                          <test-case name="NUnit.Core.Tests.SuiteBuilderTests.DiscoverSuite" executed="True" success="True" time="0.047" asserts="1" />
                          <test-case name="NUnit.Core.Tests.SuiteBuilderTests.FileNotFound" executed="True" success="True" time="0.016" asserts="0" />
                          <test-case name="NUnit.Core.Tests.SuiteBuilderTests.FixtureNotFound" executed="True" success="True" time="0.031" asserts="1" />
                          <test-case name="NUnit.Core.Tests.SuiteBuilderTests.InvalidAssembly" executed="True" success="True" time="0.016" asserts="0" />
                          <test-case name="NUnit.Core.Tests.SuiteBuilderTests.LoadAssembly" executed="True" success="True" time="0.328" asserts="3" />
                          <test-case name="NUnit.Core.Tests.SuiteBuilderTests.LoadAssemblyWithoutNamespaces" executed="True" success="True" time="0.266" asserts="3" />
                          <test-case name="NUnit.Core.Tests.SuiteBuilderTests.LoadFixture" executed="True" success="True" time="0.031" asserts="1" />
                          <test-case name="NUnit.Core.Tests.SuiteBuilderTests.LoadNamespaceAsSuite" executed="True" success="True" time="0.297" asserts="3" />
                          <test-case name="NUnit.Core.Tests.SuiteBuilderTests.LoadSuite" executed="True" success="True" time="0.031" asserts="2" />
                          <test-case name="NUnit.Core.Tests.SuiteBuilderTests.WrongReturnTypeSuite" executed="True" success="True" time="0.016" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite name="SuiteBuilderTests_Multiple" executed="True" success="True" time="0.453" asserts="0">
                        <results>
                          <test-case name="NUnit.Core.Tests.SuiteBuilderTests_Multiple.BuildSuite" executed="True" success="True" time="0.109" asserts="1" />
                          <test-case name="NUnit.Core.Tests.SuiteBuilderTests_Multiple.LoadFixture" executed="True" success="True" time="0.125" asserts="2" />
                          <test-case name="NUnit.Core.Tests.SuiteBuilderTests_Multiple.RootNode" executed="True" success="True" time="0.094" asserts="1" />
                          <test-case name="NUnit.Core.Tests.SuiteBuilderTests_Multiple.TestCaseCount" executed="True" success="True" time="0.109" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite name="TestAssemblyBuilderTests" executed="True" success="True" time="0.188" asserts="0">
                        <results>
                          <test-case name="NUnit.Core.Tests.TestAssemblyBuilderTests.CanLoadAssemblyAtRelativeDirectoryLocation" executed="True" success="True" time="0.094" asserts="1" />
                          <test-case name="NUnit.Core.Tests.TestAssemblyBuilderTests.CanLoadAssemblyInCurrentDirectory" executed="True" success="True" time="0.094" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite name="TestAttributeFixture" executed="True" success="True" time="0.047" asserts="0">
                        <results>
                          <test-case name="NUnit.Core.Tests.TestAttributeFixture.Description" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Core.Tests.TestAttributeFixture.DescriptionInResult" executed="True" success="True" time="0.016" asserts="2" />
                          <test-case name="NUnit.Core.Tests.TestAttributeFixture.FixtureDescription" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Core.Tests.TestAttributeFixture.FixtureDescriptionInResult" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Core.Tests.TestAttributeFixture.NoDescription" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Core.Tests.TestAttributeFixture.ReflectionTest" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Core.Tests.TestAttributeFixture.SeparateDescriptionAttribute" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Core.Tests.TestAttributeFixture.SeparateDescriptionInResult" executed="True" success="True" time="0.016" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite name="TestCaseAttributeTests" executed="True" success="True" time="0.078" asserts="0">
                        <results>
                          <test-suite name="ArgumentsAreCoalescedInObjectArray" executed="True" success="True" time="0.000" asserts="0">
                            <results>
                              <test-case name="NUnit.Core.Tests.TestCaseAttributeTests.ArgumentsAreCoalescedInObjectArray(System.Object[])" executed="True" success="True" time="0.000" asserts="2" />
                            </results>
                          </test-suite>
                          <test-suite name="ArgumentsOfDifferentTypeAreCoalescedInObjectArray" executed="True" success="True" time="0.000" asserts="0">
                            <results>
                              <test-case name="NUnit.Core.Tests.TestCaseAttributeTests.ArgumentsOfDifferentTypeAreCoalescedInObjectArray(System.Object[])" executed="True" success="True" time="0.000" asserts="2" />
                            </results>
                          </test-suite>
                          <test-suite name="CanConvertDoubleToDecimal" executed="True" success="True" time="0.000" asserts="0">
                            <results>
                              <test-case name="NUnit.Core.Tests.TestCaseAttributeTests.CanConvertDoubleToDecimal(2.2m,3.3m)" executed="True" success="True" time="0.000" asserts="1" />
                            </results>
                          </test-suite>
                          <test-suite name="CanConvertIntToDouble" executed="True" success="True" time="0.000" asserts="0">
                            <results>
                              <test-case name="NUnit.Core.Tests.TestCaseAttributeTests.CanConvertIntToDouble(2,2)" executed="True" success="True" time="0.000" asserts="1" />
                            </results>
                          </test-suite>
                          <test-suite name="CanConvertStringToDateTime" executed="True" success="True" time="0.000" asserts="0">
                            <results>
                              <test-case name="NUnit.Core.Tests.TestCaseAttributeTests.CanConvertStringToDateTime(10/12/1942 00:00:00)" executed="True" success="True" time="0.000" asserts="1" />
                            </results>
                          </test-suite>
                          <test-suite name="CanConvertStringToDecimal" executed="True" success="True" time="0.000" asserts="0">
                            <results>
                              <test-case name="NUnit.Core.Tests.TestCaseAttributeTests.CanConvertStringToDecimal(2.2m,3.3m)" executed="True" success="True" time="0.000" asserts="1" />
                            </results>
                          </test-suite>
                          <test-case name="NUnit.Core.Tests.TestCaseAttributeTests.CanIgnoreIndividualTestCase" executed="True" success="True" time="0.000" asserts="3" />
                          <test-suite name="CanPassArrayAsArgument" executed="True" success="True" time="0.000" asserts="0">
                            <results>
                              <test-case name="NUnit.Core.Tests.TestCaseAttributeTests.CanPassArrayAsArgument(System.Object[])" executed="True" success="True" time="0.000" asserts="2" />
                            </results>
                          </test-suite>
                          <test-suite name="CanPassNullAsFirstArgument" executed="True" success="True" time="0.000" asserts="0">
                            <results>
                              <test-case name="NUnit.Core.Tests.TestCaseAttributeTests.CanPassNullAsFirstArgument(null)" executed="True" success="True" time="0.000" asserts="1" />
                            </results>
                          </test-suite>
                          <test-suite name="CanPassObjectArrayAsFirstArgument" executed="True" success="True" time="0.000" asserts="0">
                            <results>
                              <test-case name="NUnit.Core.Tests.TestCaseAttributeTests.CanPassObjectArrayAsFirstArgument(System.Object[])" executed="True" success="True" time="0.000" asserts="0" />
                              <test-case name="NUnit.Core.Tests.TestCaseAttributeTests.CanPassObjectArrayAsFirstArgument(System.Object[])" executed="True" success="True" time="0.000" asserts="0" />
                            </results>
                          </test-suite>
                          <test-case name="NUnit.Core.Tests.TestCaseAttributeTests.CanSpecifyDescription" executed="True" success="True" time="0.000" asserts="1" />
                          <test-suite name="CanSpecifyExceptionMessage" executed="True" success="True" time="0.000" asserts="0">
                            <results>
                              <test-case name="NUnit.Core.Tests.TestCaseAttributeTests.CanSpecifyExceptionMessage(42)" executed="True" success="True" time="0.000" asserts="0" />
                            </results>
                          </test-suite>
                          <test-suite name="CanSpecifyExceptionMessageAndMatchType" executed="True" success="True" time="0.031" asserts="0">
                            <results>
                              <test-case name="NUnit.Core.Tests.TestCaseAttributeTests.CanSpecifyExceptionMessageAndMatchType(42)" executed="True" success="True" time="0.031" asserts="0" />
                            </results>
                          </test-suite>
                          <test-case name="NUnit.Core.Tests.TestCaseAttributeTests.CanSpecifyExpectedException" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Core.Tests.TestCaseAttributeTests.CanSpecifyExpectedException_NoneThrown" executed="True" success="True" time="0.000" asserts="2" />
                          <test-case name="NUnit.Core.Tests.TestCaseAttributeTests.CanSpecifyExpectedException_WrongException" executed="True" success="True" time="0.000" asserts="2" />
                          <test-case name="NUnit.Core.Tests.TestCaseAttributeTests.CanSpecifyExpectedException_WrongMessage" executed="True" success="True" time="0.000" asserts="2" />
                          <test-case name="NUnit.Core.Tests.TestCaseAttributeTests.CanSpecifyTestName" executed="True" success="True" time="0.016" asserts="2" />
                          <test-case name="NUnit.Core.Tests.TestCaseAttributeTests.ConversionOverflowGivesError" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Core.Tests.TestCaseAttributeTests.IgnoreTakesPrecedenceOverExpectedException" executed="True" success="True" time="0.000" asserts="2" />
                          <test-suite name="IntegerDivisionWithResultCheckedByNUnit" executed="True" success="True" time="0.016" asserts="0">
                            <results>
                              <test-case name="NUnit.Core.Tests.TestCaseAttributeTests.IntegerDivisionWithResultCheckedByNUnit(12,4)" executed="True" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Core.Tests.TestCaseAttributeTests.IntegerDivisionWithResultCheckedByNUnit(12,3)" executed="True" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Core.Tests.TestCaseAttributeTests.IntegerDivisionWithResultCheckedByNUnit(12,2)" executed="True" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Core.Tests.TestCaseAttributeTests.DivisionByZeroThrowsException" executed="True" success="True" time="0.000" asserts="0" />
                              <test-case name="NUnit.Core.Tests.TestCaseAttributeTests.IntegerDivisionWithResultCheckedByNUnit(12,0)" executed="True" success="True" time="0.000" asserts="0" />
                            </results>
                          </test-suite>
                          <test-suite name="IntegerDivisionWithResultPassedToTest" executed="True" success="True" time="0.000" asserts="0">
                            <results>
                              <test-case name="NUnit.Core.Tests.TestCaseAttributeTests.IntegerDivisionWithResultPassedToTest(12,0,0)" executed="True" success="True" time="0.000" asserts="0" />
                              <test-case name="NUnit.Core.Tests.TestCaseAttributeTests.IntegerDivisionWithResultPassedToTest(12,4,3)" executed="True" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Core.Tests.TestCaseAttributeTests.IntegerDivisionWithResultPassedToTest(12,2,6)" executed="True" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Core.Tests.TestCaseAttributeTests.IntegerDivisionWithResultPassedToTest(12,0,0)" executed="True" success="True" time="0.000" asserts="0" />
                              <test-case name="NUnit.Core.Tests.TestCaseAttributeTests.IntegerDivisionWithResultPassedToTest(12,3,4)" executed="True" success="True" time="0.000" asserts="1" />
                            </results>
                          </test-suite>
                        </results>
                      </test-suite>
                      <test-suite name="TestCaseResultFixture" executed="True" success="True" time="0.000" asserts="0">
                        <results>
                          <test-case name="NUnit.Core.Tests.TestCaseResultFixture.TestCaseDefault" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Core.Tests.TestCaseResultFixture.TestCaseFailure" executed="True" success="True" time="0.000" asserts="4" />
                          <test-case name="NUnit.Core.Tests.TestCaseResultFixture.TestCaseNotRun" executed="True" success="True" time="0.000" asserts="2" />
                          <test-case name="NUnit.Core.Tests.TestCaseResultFixture.TestCaseSuccess" executed="True" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite name="TestCaseSourceTests" executed="True" success="True" time="0.078" asserts="0">
                        <results>
                          <test-case name="NUnit.Core.Tests.TestCaseSourceTests.CanIgnoreIndividualTestCases" executed="True" success="True" time="0.000" asserts="3" />
                          <test-case name="NUnit.Core.Tests.TestCaseSourceTests.CanSpecifyExpectedException" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Core.Tests.TestCaseSourceTests.CanSpecifyExpectedException_NoneThrown" executed="True" success="True" time="0.000" asserts="2" />
                          <test-case name="NUnit.Core.Tests.TestCaseSourceTests.CanSpecifyExpectedException_WrongException" executed="True" success="True" time="0.031" asserts="2" />
                          <test-case name="NUnit.Core.Tests.TestCaseSourceTests.HandlesExceptionInTestCaseSource" executed="True" success="True" time="0.000" asserts="3" />
                          <test-case name="NUnit.Core.Tests.TestCaseSourceTests.IgnoreTakesPrecedenceOverExpectedException" executed="True" success="True" time="0.000" asserts="2" />
                          <test-suite name="MethodTakingTwoStringArrays" executed="True" success="True" time="0.000" asserts="0">
                            <results>
                              <test-case name="NUnit.Core.Tests.TestCaseSourceTests.MethodTakingTwoStringArrays(System.String[],System.String[])" executed="True" success="True" time="0.000" asserts="2" />
                            </results>
                          </test-suite>
                          <test-suite name="SourceCanBeInstanceField" executed="True" success="True" time="0.000" asserts="0">
                            <results>
                              <test-case name="NUnit.Core.Tests.TestCaseSourceTests.SourceCanBeInstanceField(&quot;InstanceField&quot;)" executed="True" success="True" time="0.000" asserts="1" />
                            </results>
                          </test-suite>
                          <test-suite name="SourceCanBeInstanceMethod" executed="True" success="True" time="0.000" asserts="0">
                            <results>
                              <test-case name="NUnit.Core.Tests.TestCaseSourceTests.SourceCanBeInstanceMethod(&quot;InstanceMethod&quot;)" executed="True" success="True" time="0.000" asserts="1" />
                            </results>
                          </test-suite>
                          <test-suite name="SourceCanBeInstanceProperty" executed="True" success="True" time="0.000" asserts="0">
                            <results>
                              <test-case name="NUnit.Core.Tests.TestCaseSourceTests.SourceCanBeInstanceProperty(&quot;InstanceProperty&quot;)" executed="True" success="True" time="0.000" asserts="1" />
                            </results>
                          </test-suite>
                          <test-suite name="SourceCanBeStaticField" executed="True" success="True" time="0.000" asserts="0">
                            <results>
                              <test-case name="NUnit.Core.Tests.TestCaseSourceTests.SourceCanBeStaticField(&quot;StaticField&quot;)" executed="True" success="True" time="0.000" asserts="1" />
                            </results>
                          </test-suite>
                          <test-suite name="SourceCanBeStaticMethod" executed="True" success="True" time="0.000" asserts="0">
                            <results>
                              <test-case name="NUnit.Core.Tests.TestCaseSourceTests.SourceCanBeStaticMethod(&quot;StaticMethod&quot;)" executed="True" success="True" time="0.000" asserts="1" />
                            </results>
                          </test-suite>
                          <test-suite name="SourceCanBeStaticProperty" executed="True" success="True" time="0.000" asserts="0">
                            <results>
                              <test-case name="NUnit.Core.Tests.TestCaseSourceTests.SourceCanBeStaticProperty(&quot;StaticProperty&quot;)" executed="True" success="True" time="0.000" asserts="1" />
                            </results>
                          </test-suite>
                          <test-suite name="SourceIsInvokedWithCorrectCurrentDirectory" executed="True" success="True" time="0.000" asserts="0">
                            <results>
                              <test-case name="NUnit.Core.Tests.TestCaseSourceTests.SourceIsInvokedWithCorrectCurrentDirectory(True)" executed="True" success="True" time="0.000" asserts="1" />
                            </results>
                          </test-suite>
                          <test-suite name="SourceMayBeInAnotherClass" executed="True" success="True" time="0.000" asserts="0">
                            <results>
                              <test-case name="NUnit.Core.Tests.TestCaseSourceTests.ThisOneShouldThrow" description="Demonstrates use of ExpectedException" executed="True" success="True" time="0.000" asserts="0">
                                <categories>
                                  <category name="Junk" />
                                </categories>
                                <properties>
                                  <property name="MyProp" value="zip" />
                                </properties>
                              </test-case>
                              <test-case name="NUnit.Core.Tests.TestCaseSourceTests.SourceMayBeInAnotherClass(100,20,5)" executed="True" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Core.Tests.TestCaseSourceTests.SourceMayBeInAnotherClass(100,4,25)" executed="True" success="True" time="0.000" asserts="1" />
                            </results>
                          </test-suite>
                          <test-suite name="SourceMayBeInAnotherClassWithReturn" executed="True" success="True" time="0.000" asserts="0">
                            <results>
                              <test-case name="NUnit.Core.Tests.TestCaseSourceTests.TC1" executed="True" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Core.Tests.TestCaseSourceTests.TC2" executed="True" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Core.Tests.TestCaseSourceTests.TC3" executed="True" success="True" time="0.000" asserts="1" />
                            </results>
                          </test-suite>
                          <test-suite name="SourceMayReturnArgumentsAsIntArray" executed="True" success="True" time="0.000" asserts="0">
                            <results>
                              <test-case name="NUnit.Core.Tests.TestCaseSourceTests.SourceMayReturnArgumentsAsIntArray(12,3,4)" executed="True" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Core.Tests.TestCaseSourceTests.SourceMayReturnArgumentsAsIntArray(12,4,3)" executed="True" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Core.Tests.TestCaseSourceTests.SourceMayReturnArgumentsAsIntArray(12,6,2)" executed="True" success="True" time="0.000" asserts="1" />
                            </results>
                          </test-suite>
                          <test-suite name="SourceMayReturnArgumentsAsObjectArray" executed="True" success="True" time="0.000" asserts="0">
                            <results>
                              <test-case name="NUnit.Core.Tests.TestCaseSourceTests.SourceMayReturnArgumentsAsObjectArray(12,3,4)" executed="True" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Core.Tests.TestCaseSourceTests.SourceMayReturnArgumentsAsObjectArray(12,4,3)" executed="True" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Core.Tests.TestCaseSourceTests.SourceMayReturnArgumentsAsObjectArray(12,6,2)" executed="True" success="True" time="0.000" asserts="1" />
                            </results>
                          </test-suite>
                          <test-suite name="SourceMayReturnArgumentsAsParamSet" executed="True" success="True" time="0.000" asserts="0">
                            <results>
                              <test-case name="NUnit.Core.Tests.TestCaseSourceTests.SourceMayReturnArgumentsAsParamSet(24,3)" executed="True" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Core.Tests.TestCaseSourceTests.SourceMayReturnArgumentsAsParamSet(24,2)" executed="True" success="True" time="0.000" asserts="1" />
                            </results>
                          </test-suite>
                          <test-suite name="SourceMayReturnSinglePrimitiveArgumentAlone" executed="True" success="True" time="0.000" asserts="0">
                            <results>
                              <test-case name="NUnit.Core.Tests.TestCaseSourceTests.SourceMayReturnSinglePrimitiveArgumentAlone(2)" executed="True" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Core.Tests.TestCaseSourceTests.SourceMayReturnSinglePrimitiveArgumentAlone(4)" executed="True" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Core.Tests.TestCaseSourceTests.SourceMayReturnSinglePrimitiveArgumentAlone(6)" executed="True" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Core.Tests.TestCaseSourceTests.SourceMayReturnSinglePrimitiveArgumentAlone(8)" executed="True" success="True" time="0.000" asserts="1" />
                            </results>
                          </test-suite>
                          <test-suite name="TestAttributeIsOptional" executed="True" success="True" time="0.000" asserts="0">
                            <results>
                              <test-case name="NUnit.Core.Tests.TestCaseSourceTests.TestAttributeIsOptional(12,3,4)" executed="True" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Core.Tests.TestCaseSourceTests.TestAttributeIsOptional(12,4,3)" executed="True" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Core.Tests.TestCaseSourceTests.TestAttributeIsOptional(12,6,2)" executed="True" success="True" time="0.000" asserts="1" />
                            </results>
                          </test-suite>
                          <test-suite name="TestMayUseMultipleSourceAttributes" executed="True" success="True" time="0.000" asserts="0">
                            <results>
                              <test-case name="NUnit.Core.Tests.TestCaseSourceTests.TestMayUseMultipleSourceAttributes(12,0,0)" executed="True" success="True" time="0.000" asserts="0" />
                              <test-case name="NUnit.Core.Tests.TestCaseSourceTests.TestMayUseMultipleSourceAttributes(12,1,12)" executed="True" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Core.Tests.TestCaseSourceTests.TestMayUseMultipleSourceAttributes(12,2,6)" executed="True" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Core.Tests.TestCaseSourceTests.TestMayUseMultipleSourceAttributes(12,3,4)" executed="True" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Core.Tests.TestCaseSourceTests.TestMayUseMultipleSourceAttributes(12,4,3)" executed="True" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Core.Tests.TestCaseSourceTests.TestMayUseMultipleSourceAttributes(12,6,2)" executed="True" success="True" time="0.000" asserts="1" />
                            </results>
                          </test-suite>
                          <test-suite name="TestWithFourArguments" executed="True" success="True" time="0.000" asserts="0">
                            <results>
                              <test-case name="NUnit.Core.Tests.TestCaseSourceTests.TestWithFourArguments(12,3,4,0)" executed="True" success="True" time="0.000" asserts="2" />
                              <test-case name="NUnit.Core.Tests.TestCaseSourceTests.TestWithFourArguments(12,4,3,0)" executed="True" success="True" time="0.000" asserts="2" />
                              <test-case name="NUnit.Core.Tests.TestCaseSourceTests.TestWithFourArguments(12,5,2,2)" executed="True" success="True" time="0.000" asserts="2" />
                            </results>
                          </test-suite>
                        </results>
                      </test-suite>
                      <test-suite name="TestCaseTest" executed="True" success="True" time="0.000" asserts="0">
                        <results>
                          <test-case name="NUnit.Core.Tests.TestCaseTest.CreateIgnoredTestCase" executed="True" success="True" time="0.000" asserts="3" />
                          <test-case name="NUnit.Core.Tests.TestCaseTest.LoadMethodCategories" executed="True" success="True" time="0.000" asserts="3" />
                          <test-case name="NUnit.Core.Tests.TestCaseTest.RunIgnoredTestCase" executed="True" success="True" time="0.000" asserts="3" />
                        </results>
                      </test-suite>
                      <test-suite name="TestConsole" executed="True" success="True" time="0.000" asserts="0">
                        <results>
                          <test-case name="NUnit.Core.Tests.TestConsole.ConsoleWrite" executed="True" success="True" time="0.000" asserts="0" />
                          <test-case name="NUnit.Core.Tests.TestConsole.ConsoleWriteLine" executed="True" success="True" time="0.000" asserts="0" />
                        </results>
                      </test-suite>
                      <test-suite name="TestContextTests" executed="True" success="True" time="0.016" asserts="0">
                        <results>
                          <test-case name="NUnit.Core.Tests.TestContextTests.SetAndRestoreCurrentCulture" executed="True" success="True" time="0.000" asserts="5" />
                          <test-case name="NUnit.Core.Tests.TestContextTests.SetAndRestoreCurrentDirectory" executed="True" success="True" time="0.000" asserts="5" />
                          <test-case name="NUnit.Core.Tests.TestContextTests.SetAndRestoreCurrentUICulture" executed="True" success="True" time="0.000" asserts="5" />
                        </results>
                      </test-suite>
                      <test-suite name="TestDelegateFixture" executed="True" success="True" time="0.000" asserts="0">
                        <results>
                          <test-case name="NUnit.Core.Tests.TestDelegateFixture.DelegateTest" executed="True" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite name="TestFixtureBuilderTests" executed="True" success="True" time="0.031" asserts="0">
                        <results>
                          <test-case name="NUnit.Core.Tests.TestFixtureBuilderTests.GoodSignature" executed="True" success="True" time="0.016" asserts="2" />
                          <test-case name="NUnit.Core.Tests.TestFixtureBuilderTests.LoadCategories" executed="True" success="True" time="0.016" asserts="2" />
                        </results>
                      </test-suite>
                      <test-suite name="TestFixtureExtension" executed="True" success="True" time="0.234" asserts="0">
                        <results>
                          <test-case name="NUnit.Core.Tests.TestFixtureExtension.CheckMultipleSetUp" executed="True" success="True" time="0.063" asserts="1" />
                          <test-case name="NUnit.Core.Tests.TestFixtureExtension.DerivedTest" executed="True" success="True" time="0.063" asserts="1" />
                          <test-case name="NUnit.Core.Tests.TestFixtureExtension.InheritSetup" executed="True" success="True" time="0.047" asserts="1" />
                          <test-case name="NUnit.Core.Tests.TestFixtureExtension.InheritTearDown" executed="True" success="True" time="0.063" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite name="TestFixtureTests" executed="True" success="True" time="0.438" asserts="0">
                        <results>
                          <test-case name="NUnit.Core.Tests.TestFixtureTests.CannotRunAbstractDerivedFixture" executed="True" success="True" time="0.016" asserts="2" />
                          <test-case name="NUnit.Core.Tests.TestFixtureTests.CannotRunAbstractFixture" executed="True" success="True" time="0.000" asserts="2" />
                          <test-case name="NUnit.Core.Tests.TestFixtureTests.CannotRunBadConstructor" executed="True" success="True" time="0.000" asserts="2" />
                          <test-case name="NUnit.Core.Tests.TestFixtureTests.CannotRunConstructorWithArgsNotSupplied" executed="True" success="True" time="0.016" asserts="2" />
                          <test-case name="NUnit.Core.Tests.TestFixtureTests.CannotRunFixtureSetupWithParameters" executed="True" success="True" time="0.016" asserts="2" />
                          <test-case name="NUnit.Core.Tests.TestFixtureTests.CannotRunFixtureSetupWithReturnValue" executed="True" success="True" time="0.000" asserts="2" />
                          <test-case name="NUnit.Core.Tests.TestFixtureTests.CannotRunFixtureTearDownWithParameters" executed="True" success="True" time="0.016" asserts="2" />
                          <test-case name="NUnit.Core.Tests.TestFixtureTests.CannotRunFixtureTearDownWithReturnValue" executed="True" success="True" time="0.016" asserts="2" />
                          <test-case name="NUnit.Core.Tests.TestFixtureTests.CannotRunIgnoredFixture" executed="True" success="True" time="0.016" asserts="2" />
                          <test-case name="NUnit.Core.Tests.TestFixtureTests.CannotRunPrivateFixtureSetUp" executed="True" success="True" time="0.000" asserts="2" />
                          <test-case name="NUnit.Core.Tests.TestFixtureTests.CannotRunPrivateFixtureTearDown" executed="True" success="True" time="0.016" asserts="2" />
                          <test-case name="NUnit.Core.Tests.TestFixtureTests.CannotRunPrivateSetUp" executed="True" success="True" time="0.016" asserts="2" />
                          <test-case name="NUnit.Core.Tests.TestFixtureTests.CannotRunPrivateTearDown" executed="True" success="True" time="0.000" asserts="2" />
                          <test-case name="NUnit.Core.Tests.TestFixtureTests.CannotRunSetupWithParameters" executed="True" success="True" time="0.000" asserts="2" />
                          <test-case name="NUnit.Core.Tests.TestFixtureTests.CannotRunSetupWithReturnValue" executed="True" success="True" time="0.016" asserts="2" />
                          <test-case name="NUnit.Core.Tests.TestFixtureTests.CannotRunTearDownWithParameters" executed="True" success="True" time="0.000" asserts="2" />
                          <test-case name="NUnit.Core.Tests.TestFixtureTests.CannotRunTearDownWithReturnValue" executed="True" success="True" time="0.000" asserts="2" />
                          <test-case name="NUnit.Core.Tests.TestFixtureTests.CanRunConstructorWithArgsSupplied" executed="True" success="True" time="0.016" asserts="1" />
                          <test-case name="NUnit.Core.Tests.TestFixtureTests.CanRunMultipleSetUp" executed="True" success="True" time="0.016" asserts="1" />
                          <test-case name="NUnit.Core.Tests.TestFixtureTests.CanRunMultipleTearDown" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Core.Tests.TestFixtureTests.CanRunMultipleTestFixtureSetUp" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Core.Tests.TestFixtureTests.CanRunMultipleTestFixtureTearDown" executed="True" success="True" time="0.016" asserts="1" />
                          <test-case name="NUnit.Core.Tests.TestFixtureTests.CanRunProtectedFixtureSetUp" executed="True" success="True" time="0.016" asserts="1" />
                          <test-case name="NUnit.Core.Tests.TestFixtureTests.CanRunProtectedFixtureTearDown" executed="True" success="True" time="0.016" asserts="1" />
                          <test-case name="NUnit.Core.Tests.TestFixtureTests.CanRunProtectedSetUp" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Core.Tests.TestFixtureTests.CanRunProtectedTearDown" executed="True" success="True" time="0.016" asserts="1" />
                          <test-case name="NUnit.Core.Tests.TestFixtureTests.CanRunStaticFixture" executed="True" success="True" time="0.016" asserts="1" />
                          <test-case name="NUnit.Core.Tests.TestFixtureTests.CanRunStaticFixtureSetUp" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Core.Tests.TestFixtureTests.CanRunStaticFixtureTearDown" executed="True" success="True" time="0.031" asserts="1" />
                          <test-case name="NUnit.Core.Tests.TestFixtureTests.CanRunStaticSetUp" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Core.Tests.TestFixtureTests.CanRunStaticTearDown" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Core.Tests.TestFixtureTests.ConstructFromDoublyNestedType" executed="True" success="True" time="0.016" asserts="2" />
                          <test-case name="NUnit.Core.Tests.TestFixtureTests.ConstructFromNestedType" executed="True" success="True" time="0.016" asserts="2" />
                          <test-case name="NUnit.Core.Tests.TestFixtureTests.ConstructFromStaticTypeWithoutTestFixtureAttribute" executed="True" success="True" time="0.016" asserts="2" />
                          <test-case name="NUnit.Core.Tests.TestFixtureTests.ConstructFromType" executed="True" success="True" time="0.000" asserts="2" />
                          <test-case name="NUnit.Core.Tests.TestFixtureTests.ConstructFromTypeWithoutNamespace" executed="True" success="True" time="0.016" asserts="2" />
                          <test-case name="NUnit.Core.Tests.TestFixtureTests.ConstructFromTypeWithoutTestFixtureAttribute" executed="True" success="True" time="0.000" asserts="2" />
                        </results>
                      </test-suite>
                      <test-suite name="TestFrameworkTests" executed="True" success="True" time="0.016" asserts="0">
                        <results>
                          <test-case name="NUnit.Core.Tests.TestFrameworkTests.NUnitFrameworkIsKnownAndReferenced" executed="True" success="True" time="0.000" asserts="0" />
                        </results>
                      </test-suite>
                      <test-suite name="TestIDTests" executed="True" success="True" time="0.000" asserts="0">
                        <results>
                          <test-case name="NUnit.Core.Tests.TestIDTests.ClonedTestIDsAreEqual" executed="True" success="True" time="0.000" asserts="3" />
                          <test-case name="NUnit.Core.Tests.TestIDTests.DifferentTestIDsAreNotEqual" executed="True" success="True" time="0.000" asserts="3" />
                          <test-case name="NUnit.Core.Tests.TestIDTests.DifferentTestIDsDisplayDifferentStrings" executed="True" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite name="TestInfoTests" executed="True" success="True" time="0.016" asserts="0">
                        <results>
                          <test-case name="NUnit.Core.Tests.TestInfoTests.ConstructFromFixture" executed="True" success="True" time="0.000" asserts="8" />
                          <test-case name="NUnit.Core.Tests.TestInfoTests.ConstructFromSuite" executed="True" success="True" time="0.016" asserts="7" />
                          <test-case name="NUnit.Core.Tests.TestInfoTests.ConstructFromTestCase" executed="True" success="True" time="0.000" asserts="7" />
                        </results>
                      </test-suite>
                      <test-suite name="TestMethodSignatureTests" executed="True" success="True" time="0.250" asserts="0">
                        <results>
                          <test-case name="NUnit.Core.Tests.TestMethodSignatureTests.InstanceTestMethodIsRunnable" executed="True" success="True" time="0.016" asserts="1" />
                          <test-case name="NUnit.Core.Tests.TestMethodSignatureTests.PrivateTestMethodIsNotRunnable" executed="True" success="True" time="0.016" asserts="2" />
                          <test-case name="NUnit.Core.Tests.TestMethodSignatureTests.ProtectedTestMethodIsNotRunnable" executed="True" success="True" time="0.016" asserts="2" />
                          <test-case name="NUnit.Core.Tests.TestMethodSignatureTests.RunningTestsThroughFixtureGivesCorrectResults" executed="True" success="True" time="0.000" asserts="6" />
                          <test-case name="NUnit.Core.Tests.TestMethodSignatureTests.StaticTestMethodIsRunnable" executed="True" success="True" time="0.031" asserts="1" />
                          <test-case name="NUnit.Core.Tests.TestMethodSignatureTests.StaticTestMethodWithArgumentsNotProvidedIsNotRunnable" executed="True" success="True" time="0.016" asserts="2" />
                          <test-case name="NUnit.Core.Tests.TestMethodSignatureTests.StaticTestMethodWithArgumentsProvidedIsRunnable" executed="True" success="True" time="0.016" asserts="1" />
                          <test-case name="NUnit.Core.Tests.TestMethodSignatureTests.StaticTestMethodWithWrongArgumentTypesProvidedGivesError" executed="True" success="True" time="0.016" asserts="1" />
                          <test-case name="NUnit.Core.Tests.TestMethodSignatureTests.StaticTestMethodWithWrongNumberOfArgumentsProvidedIsNotRunnable" executed="True" success="True" time="0.016" asserts="2" />
                          <test-case name="NUnit.Core.Tests.TestMethodSignatureTests.TestMethodWithArgumentsNotProvidedIsNotRunnable" executed="True" success="True" time="0.000" asserts="2" />
                          <test-case name="NUnit.Core.Tests.TestMethodSignatureTests.TestMethodWithArgumentsProvidedIsRunnable" executed="True" success="True" time="0.016" asserts="1" />
                          <test-case name="NUnit.Core.Tests.TestMethodSignatureTests.TestMethodWithConvertibleArgumentsIsRunnable" executed="True" success="True" time="0.016" asserts="1" />
                          <test-case name="NUnit.Core.Tests.TestMethodSignatureTests.TestMethodWithMultipleTestCasesExecutesMultipleTimes" executed="True" success="True" time="0.016" asserts="2" />
                          <test-case name="NUnit.Core.Tests.TestMethodSignatureTests.TestMethodWithMultipleTestCasesUsesCorrectNames" executed="True" success="True" time="0.016" asserts="7" />
                          <test-case name="NUnit.Core.Tests.TestMethodSignatureTests.TestMethodWithNonConvertibleArgumentsGivesError" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Core.Tests.TestMethodSignatureTests.TestMethodWithoutParametersWithArgumentsProvidedIsNotRunnable" executed="True" success="True" time="0.000" asserts="2" />
                          <test-case name="NUnit.Core.Tests.TestMethodSignatureTests.TestMethodWithReturnTypeIsNotRunnable" executed="True" success="True" time="0.016" asserts="2" />
                          <test-case name="NUnit.Core.Tests.TestMethodSignatureTests.TestMethodWithWrongArgumentTypesProvidedGivesError" executed="True" success="True" time="0.016" asserts="1" />
                          <test-case name="NUnit.Core.Tests.TestMethodSignatureTests.TestMethodWithWrongNumberOfArgumentsProvidedIsNotRunnable" executed="True" success="True" time="0.000" asserts="2" />
                        </results>
                      </test-suite>
                      <test-suite name="TestNameTests" executed="True" success="True" time="0.016" asserts="0">
                        <results>
                          <test-case name="NUnit.Core.Tests.TestNameTests.CanCompareStrongTestNames" executed="True" success="True" time="0.000" asserts="9" />
                          <test-case name="NUnit.Core.Tests.TestNameTests.CanCompareWeakAndStrongTestNames" executed="True" success="True" time="0.000" asserts="3" />
                          <test-case name="NUnit.Core.Tests.TestNameTests.CanCompareWeakTestNames" executed="True" success="True" time="0.000" asserts="6" />
                          <test-case name="NUnit.Core.Tests.TestNameTests.CanDisplayUniqueNames" executed="True" success="True" time="0.016" asserts="2" />
                          <test-case name="NUnit.Core.Tests.TestNameTests.CanParseSimpleTestNames" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Core.Tests.TestNameTests.CanParseStrongTestNames" executed="True" success="True" time="0.000" asserts="2" />
                          <test-case name="NUnit.Core.Tests.TestNameTests.CanParseWeakTestNames" executed="True" success="True" time="0.000" asserts="2" />
                          <test-case name="NUnit.Core.Tests.TestNameTests.ClonedTestNamesAreEqual" executed="True" success="True" time="0.000" asserts="6" />
                          <test-case name="NUnit.Core.Tests.TestNameTests.TestNamesWithDifferentRunnerIDsAreNotEqual" executed="True" success="True" time="0.000" asserts="7" />
                        </results>
                      </test-suite>
                      <test-suite name="TestNodeTests" executed="True" success="True" time="0.031" asserts="0">
                        <results>
                          <test-case name="NUnit.Core.Tests.TestNodeTests.ConstructFromMultipleTests" executed="True" success="True" time="0.016" asserts="8" />
                          <test-case name="NUnit.Core.Tests.TestNodeTests.ConstructFromSuite" executed="True" success="True" time="0.016" asserts="3" />
                          <test-case name="NUnit.Core.Tests.TestNodeTests.ConstructFromTestCase" executed="True" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite name="TestRunnerThreadTests" executed="True" success="True" time="0.016" asserts="0">
                        <results>
                          <test-case name="NUnit.Core.Tests.TestRunnerThreadTests.RunMultipleTests" executed="True" success="True" time="0.016" asserts="2" />
                          <test-case name="NUnit.Core.Tests.TestRunnerThreadTests.RunNamedTest" executed="True" success="True" time="0.000" asserts="2" />
                          <test-case name="NUnit.Core.Tests.TestRunnerThreadTests.RunTestSuite" executed="True" success="True" time="0.000" asserts="2" />
                        </results>
                      </test-suite>
                      <test-suite name="TestSuiteTest" executed="True" success="True" time="0.469" asserts="0">
                        <results>
                          <test-case name="NUnit.Core.Tests.TestSuiteTest.CanSortUsingExternalComparer" executed="True" success="True" time="0.016" asserts="1" />
                          <test-case name="NUnit.Core.Tests.TestSuiteTest.CountTestCasesFilteredByName" executed="True" success="True" time="0.016" asserts="4" />
                          <test-case name="NUnit.Core.Tests.TestSuiteTest.DefaultSortIsByName" executed="True" success="True" time="0.016" asserts="1" />
                          <test-case name="NUnit.Core.Tests.TestSuiteTest.ExcludingCategoryDoesNotRunExplicitTestCases" executed="True" success="True" time="0.016" asserts="1" />
                          <test-case name="NUnit.Core.Tests.TestSuiteTest.ExcludingCategoryDoesNotRunExplicitTestFixtures" executed="True" success="True" time="0.109" asserts="1" />
                          <test-case name="NUnit.Core.Tests.TestSuiteTest.InheritedTestCount" executed="True" success="True" time="0.031" asserts="1" />
                          <test-case name="NUnit.Core.Tests.TestSuiteTest.RunExplicitTestByCategory" executed="True" success="True" time="0.016" asserts="1" />
                          <test-case name="NUnit.Core.Tests.TestSuiteTest.RunExplicitTestByName" executed="True" success="True" time="0.016" asserts="1" />
                          <test-case name="NUnit.Core.Tests.TestSuiteTest.RunExplicitTestDirectly" executed="True" success="True" time="0.016" asserts="1" />
                          <test-case name="NUnit.Core.Tests.TestSuiteTest.RunNoTestSuite" executed="True" success="True" time="0.016" asserts="3" />
                          <test-case name="NUnit.Core.Tests.TestSuiteTest.RunSingleTest" executed="True" success="True" time="0.031" asserts="1" />
                          <test-case name="NUnit.Core.Tests.TestSuiteTest.RunSuiteByCategory" executed="True" success="True" time="0.016" asserts="1" />
                          <test-case name="NUnit.Core.Tests.TestSuiteTest.RunSuiteByName" executed="True" success="True" time="0.016" asserts="2" />
                          <test-case name="NUnit.Core.Tests.TestSuiteTest.RunTestByCategory" executed="True" success="True" time="0.016" asserts="1" />
                          <test-case name="NUnit.Core.Tests.TestSuiteTest.RunTestByName" executed="True" success="True" time="0.016" asserts="2" />
                          <test-case name="NUnit.Core.Tests.TestSuiteTest.RunTestExcludingCategory" executed="True" success="True" time="0.031" asserts="1" />
                          <test-case name="NUnit.Core.Tests.TestSuiteTest.RunTestsInFixture" executed="True" success="True" time="0.031" asserts="6" />
                          <test-case name="NUnit.Core.Tests.TestSuiteTest.SuiteRunInitialized" executed="True" success="True" time="0.016" asserts="1" />
                          <test-case name="NUnit.Core.Tests.TestSuiteTest.SuiteWithNoTests" executed="True" success="True" time="0.016" asserts="3" />
                        </results>
                      </test-suite>
                      <test-suite name="TheoryTests" executed="True" success="True" time="0.016" asserts="0">
                        <results>
                          <test-suite name="ArrayWithDatapointsAttributeIsUsed" executed="True" success="True" time="0.016" asserts="0">
                            <results>
                              <test-case name="NUnit.Core.Tests.TheoryTests.ArrayWithDatapointsAttributeIsUsed(&quot;xyz1&quot;)" executed="True" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Core.Tests.TheoryTests.ArrayWithDatapointsAttributeIsUsed(&quot;xyz2&quot;)" executed="True" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Core.Tests.TheoryTests.ArrayWithDatapointsAttributeIsUsed(&quot;xyz3&quot;)" executed="True" success="True" time="0.000" asserts="1" />
                            </results>
                          </test-suite>
                          <test-case name="NUnit.Core.Tests.TheoryTests.SimpleTestIgnoresDataPoints" executed="True" success="True" time="0.000" asserts="1" />
                          <test-suite name="SquareRootWithAllBadValues" executed="True" success="False" time="0.000" asserts="0">
                            <results>
                              <test-case name="NUnit.Core.Tests.TheoryTests.SquareRootWithAllBadValues(-12.0d)" executed="True" success="False" time="0.000" asserts="0" />
                              <test-case name="NUnit.Core.Tests.TheoryTests.SquareRootWithAllBadValues(-4.0d)" executed="True" success="False" time="0.000" asserts="0" />
                              <test-case name="NUnit.Core.Tests.TheoryTests.SquareRootWithAllBadValues(-9.0d)" executed="True" success="False" time="0.000" asserts="0" />
                            </results>
                          </test-suite>
                          <test-suite name="SquareRootWithAllGoodValues" executed="True" success="True" time="0.000" asserts="0">
                            <results>
                              <test-case name="NUnit.Core.Tests.TheoryTests.SquareRootWithAllGoodValues(12.0d)" executed="True" success="True" time="0.000" asserts="2" />
                              <test-case name="NUnit.Core.Tests.TheoryTests.SquareRootWithAllGoodValues(4.0d)" executed="True" success="True" time="0.000" asserts="2" />
                              <test-case name="NUnit.Core.Tests.TheoryTests.SquareRootWithAllGoodValues(9.0d)" executed="True" success="True" time="0.000" asserts="2" />
                            </results>
                          </test-suite>
                          <test-suite name="SquareRootWithOneBadValue" executed="True" success="True" time="0.000" asserts="0">
                            <results>
                              <test-case name="NUnit.Core.Tests.TheoryTests.SquareRootWithOneBadValue(12.0d)" executed="True" success="True" time="0.000" asserts="2" />
                              <test-case name="NUnit.Core.Tests.TheoryTests.SquareRootWithOneBadValue(-4.0d)" executed="True" success="False" time="0.000" asserts="0" />
                              <test-case name="NUnit.Core.Tests.TheoryTests.SquareRootWithOneBadValue(9.0d)" executed="True" success="True" time="0.000" asserts="2" />
                            </results>
                          </test-suite>
                          <test-case name="NUnit.Core.Tests.TheoryTests.TheoryWithDatapointsIsRunnable" executed="True" success="True" time="0.000" asserts="2" />
                          <test-case name="NUnit.Core.Tests.TheoryTests.TheoryWithNoArgumentsIsTreatedAsTest" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Core.Tests.TheoryTests.TheoryWithNoDatapointsIsNotRunnable" executed="True" success="True" time="0.000" asserts="2" />
                        </results>
                      </test-suite>
                      <test-suite name="TheoryTests+SqrtTests" executed="True" success="True" time="0.000" asserts="0">
                        <results>
                          <test-suite name="SqrtTimesItselfGivesOriginal" executed="True" success="True" time="0.000" asserts="0">
                            <results>
                              <test-case name="NUnit.Core.Tests.TheoryTests+SqrtTests.SqrtTimesItselfGivesOriginal(0.0d)" executed="True" success="True" time="0.000" asserts="2" />
                              <test-case name="NUnit.Core.Tests.TheoryTests+SqrtTests.SqrtTimesItselfGivesOriginal(1.0d)" executed="True" success="True" time="0.000" asserts="2" />
                              <test-case name="NUnit.Core.Tests.TheoryTests+SqrtTests.SqrtTimesItselfGivesOriginal(-1.0d)" executed="True" success="False" time="0.000" asserts="0" />
                              <test-case name="NUnit.Core.Tests.TheoryTests+SqrtTests.SqrtTimesItselfGivesOriginal(double.MaxValue)" executed="True" success="False" time="0.000" asserts="0" />
                              <test-case name="NUnit.Core.Tests.TheoryTests+SqrtTests.SqrtTimesItselfGivesOriginal(double.PositiveInfinity)" executed="True" success="False" time="0.000" asserts="0" />
                            </results>
                          </test-suite>
                        </results>
                      </test-suite>
                      <test-suite name="ThreadedTestRunnerTests" executed="True" success="True" time="1.031" asserts="1">
                        <results>
                          <test-case name="NUnit.Core.Tests.ThreadedTestRunnerTests.CheckRunnerID" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Core.Tests.ThreadedTestRunnerTests.CountTestCases" executed="True" success="True" time="0.078" asserts="1" />
                          <test-case name="NUnit.Core.Tests.ThreadedTestRunnerTests.CountTestCasesAcrossMultipleAssemblies" executed="True" success="True" time="0.109" asserts="1" />
                          <test-case name="NUnit.Core.Tests.ThreadedTestRunnerTests.LoadAssembly" executed="True" success="True" time="0.078" asserts="1" />
                          <test-case name="NUnit.Core.Tests.ThreadedTestRunnerTests.LoadAssemblyWithFixture" executed="True" success="True" time="0.031" asserts="1" />
                          <test-case name="NUnit.Core.Tests.ThreadedTestRunnerTests.LoadAssemblyWithoutNamespaces" executed="True" success="True" time="0.078" asserts="4" />
                          <test-case name="NUnit.Core.Tests.ThreadedTestRunnerTests.LoadAssemblyWithSuite" executed="True" success="True" time="0.031" asserts="1" />
                          <test-case name="NUnit.Core.Tests.ThreadedTestRunnerTests.LoadMultipleAssemblies" executed="True" success="True" time="0.109" asserts="1" />
                          <test-case name="NUnit.Core.Tests.ThreadedTestRunnerTests.LoadMultipleAssembliesWithFixture" executed="True" success="True" time="0.063" asserts="1" />
                          <test-case name="NUnit.Core.Tests.ThreadedTestRunnerTests.LoadMultipleAssembliesWithSuite" executed="True" success="True" time="0.078" asserts="1" />
                          <test-case name="NUnit.Core.Tests.ThreadedTestRunnerTests.RunAssembly" executed="True" success="True" time="0.063" asserts="1" />
                          <test-case name="NUnit.Core.Tests.ThreadedTestRunnerTests.RunAssemblyUsingBeginAndEndRun" executed="True" success="True" time="0.063" asserts="2" />
                          <test-case name="NUnit.Core.Tests.ThreadedTestRunnerTests.RunMultipleAssemblies" executed="True" success="True" time="0.109" asserts="1" />
                          <test-case name="NUnit.Core.Tests.ThreadedTestRunnerTests.RunMultipleAssembliesUsingBeginAndEndRun" executed="True" success="True" time="0.125" asserts="2" />
                        </results>
                      </test-suite>
                      <test-suite name="ThreadingTests" executed="True" success="True" time="0.375" asserts="0">
                        <results>
                          <test-case name="NUnit.Core.Tests.ThreadingTests.TestWithInfiniteLoopTimesOut" executed="True" success="True" time="0.172" asserts="2" />
                          <test-case name="NUnit.Core.Tests.ThreadingTests.TestWithMTAThreadRunsInMTA" executed="True" success="True" time="0.000" asserts="2">
                            <properties>
                              <property name="APARTMENT_STATE" value="MTA" />
                            </properties>
                          </test-case>
                          <test-case name="NUnit.Core.Tests.ThreadingTests.TestWithRequiresMTARunsInMTA" executed="True" success="True" time="0.000" asserts="2">
                            <properties>
                              <property name="APARTMENT_STATE" value="MTA" />
                            </properties>
                          </test-case>
                          <test-case name="NUnit.Core.Tests.ThreadingTests.TestWithRequiresSTARunsInSTA" executed="True" success="True" time="0.000" asserts="1">
                            <properties>
                              <property name="APARTMENT_STATE" value="STA" />
                            </properties>
                          </test-case>
                          <test-case name="NUnit.Core.Tests.ThreadingTests.TestWithRequiresThreadRunsInSeparateThread" executed="True" success="True" time="0.000" asserts="1">
                            <properties>
                              <property name="RequiresThread" value="True" />
                            </properties>
                          </test-case>
                          <test-case name="NUnit.Core.Tests.ThreadingTests.TestWithRequiresThreadRunsSetUpAndTestOnSameThread" executed="True" success="True" time="0.000" asserts="1">
                            <properties>
                              <property name="RequiresThread" value="True" />
                            </properties>
                          </test-case>
                          <test-case name="NUnit.Core.Tests.ThreadingTests.TestWithRequiresThreadWithMTAArgRunsOnSeparateThreadInMTA" executed="True" success="True" time="0.000" asserts="2">
                            <properties>
                              <property name="RequiresThread" value="True" />
                              <property name="APARTMENT_STATE" value="MTA" />
                            </properties>
                          </test-case>
                          <test-case name="NUnit.Core.Tests.ThreadingTests.TestWithRequiresThreadWithSTAArgRunsOnSeparateThreadInSTA" executed="True" success="True" time="0.000" asserts="2">
                            <properties>
                              <property name="RequiresThread" value="True" />
                              <property name="APARTMENT_STATE" value="STA" />
                            </properties>
                          </test-case>
                          <test-case name="NUnit.Core.Tests.ThreadingTests.TestWithSTAThreadRunsInSTA" executed="True" success="True" time="0.000" asserts="1">
                            <properties>
                              <property name="APARTMENT_STATE" value="STA" />
                            </properties>
                          </test-case>
                          <test-case name="NUnit.Core.Tests.ThreadingTests.TestWithTimeoutRunsOnSeparateThread" executed="True" success="True" time="0.000" asserts="1">
                            <properties>
                              <property name="Timeout" value="50" />
                            </properties>
                          </test-case>
                          <test-case name="NUnit.Core.Tests.ThreadingTests.TestWithTimeoutRunsSetUpAndTestOnSameThread" executed="True" success="True" time="0.000" asserts="1">
                            <properties>
                              <property name="Timeout" value="50" />
                            </properties>
                          </test-case>
                          <test-case name="NUnit.Core.Tests.ThreadingTests.TimeoutCanBeSetOnTestFixture" executed="True" success="True" time="0.188" asserts="3" />
                        </results>
                      </test-suite>
                      <test-suite name="ThreadingTests+FixtureRequiresMTA" executed="True" success="True" time="0.000" asserts="0">
                        <properties>
                          <property name="APARTMENT_STATE" value="MTA" />
                        </properties>
                        <results>
                          <test-case name="NUnit.Core.Tests.ThreadingTests+FixtureRequiresMTA.RequiresMTACanBeSetOnTestFixture" executed="True" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite name="ThreadingTests+FixtureRequiresSTA" executed="True" success="True" time="0.000" asserts="0">
                        <properties>
                          <property name="APARTMENT_STATE" value="STA" />
                        </properties>
                        <results>
                          <test-case name="NUnit.Core.Tests.ThreadingTests+FixtureRequiresSTA.RequiresSTACanBeSetOnTestFixture" executed="True" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite name="ThreadingTests+FixtureRequiresThread" executed="True" success="True" time="0.000" asserts="0">
                        <properties>
                          <property name="RequiresThread" value="True" />
                        </properties>
                        <results>
                          <test-case name="NUnit.Core.Tests.ThreadingTests+FixtureRequiresThread.RequiresThreadCanBeSetOnTestFixture" executed="True" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite name="ValueSourceTests" executed="True" success="True" time="0.016" asserts="0">
                        <results>
                          <test-suite name="MultipleArguments" executed="True" success="True" time="0.000" asserts="0">
                            <results>
                              <test-case name="NUnit.Core.Tests.ValueSourceTests.MultipleArguments(12,3,4)" executed="True" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Core.Tests.ValueSourceTests.MultipleArguments(12,4,3)" executed="True" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.Core.Tests.ValueSourceTests.MultipleArguments(12,6,2)" executed="True" success="True" time="0.000" asserts="1" />
                            </results>
                          </test-suite>
                          <test-suite name="ValueSourceCanBeInstanceField" executed="True" success="True" time="0.000" asserts="0">
                            <results>
                              <test-case name="NUnit.Core.Tests.ValueSourceTests.ValueSourceCanBeInstanceField(&quot;InstanceField&quot;)" executed="True" success="True" time="0.000" asserts="1" />
                            </results>
                          </test-suite>
                          <test-suite name="ValueSourceCanBeInstanceMethod" executed="True" success="True" time="0.000" asserts="0">
                            <results>
                              <test-case name="NUnit.Core.Tests.ValueSourceTests.ValueSourceCanBeInstanceMethod(&quot;InstanceMethod&quot;)" executed="True" success="True" time="0.000" asserts="1" />
                            </results>
                          </test-suite>
                          <test-suite name="ValueSourceCanBeInstanceProperty" executed="True" success="True" time="0.000" asserts="0">
                            <results>
                              <test-case name="NUnit.Core.Tests.ValueSourceTests.ValueSourceCanBeInstanceProperty(&quot;InstanceProperty&quot;)" executed="True" success="True" time="0.000" asserts="1" />
                            </results>
                          </test-suite>
                          <test-suite name="ValueSourceCanBeStaticField" executed="True" success="True" time="0.000" asserts="0">
                            <results>
                              <test-case name="NUnit.Core.Tests.ValueSourceTests.ValueSourceCanBeStaticField(&quot;StaticField&quot;)" executed="True" success="True" time="0.000" asserts="1" />
                            </results>
                          </test-suite>
                          <test-suite name="ValueSourceCanBeStaticMethod" executed="True" success="True" time="0.000" asserts="0">
                            <results>
                              <test-case name="NUnit.Core.Tests.ValueSourceTests.ValueSourceCanBeStaticMethod(&quot;StaticMethod&quot;)" executed="True" success="True" time="0.000" asserts="1" />
                            </results>
                          </test-suite>
                          <test-suite name="ValueSourceCanBeStaticProperty" executed="True" success="True" time="0.000" asserts="0">
                            <results>
                              <test-case name="NUnit.Core.Tests.ValueSourceTests.ValueSourceCanBeStaticProperty(&quot;StaticProperty&quot;)" executed="True" success="True" time="0.000" asserts="1" />
                            </results>
                          </test-suite>
                          <test-suite name="ValueSourceIsInvokedWithCorrectCurrentDirectory" executed="True" success="True" time="0.000" asserts="0">
                            <results>
                              <test-case name="NUnit.Core.Tests.ValueSourceTests.ValueSourceIsInvokedWithCorrectCurrentDirectory(True)" executed="True" success="True" time="0.000" asserts="1" />
                            </results>
                          </test-suite>
                          <test-suite name="ValueSourceMayBeInAnotherClass" executed="True" success="False" time="0.000" asserts="0" />
                        </results>
                      </test-suite>
                      <test-suite name="XmlTest" executed="True" success="True" time="1.109" asserts="0">
                        <results>
                          <test-case name="NUnit.Core.Tests.XmlTest.removeTime" executed="True" success="True" time="0.031" asserts="1" />
                          <test-case name="NUnit.Core.Tests.XmlTest.TestSchemaValidatorFrenchCulture" executed="True" success="True" time="0.547" asserts="1" />
                          <test-case name="NUnit.Core.Tests.XmlTest.TestSchemaValidatorInvariantCulture" executed="True" success="True" time="0.125" asserts="1" />
                          <test-case name="NUnit.Core.Tests.XmlTest.TestSchemaValidatorUnitedStatesCulture" executed="True" success="True" time="0.125" asserts="1" />
                          <test-case name="NUnit.Core.Tests.XmlTest.TestStream" executed="True" success="True" time="0.219" asserts="1" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                </results>
              </test-suite>
            </results>
          </test-suite>
        </results>
      </test-suite>
      <test-suite name="C:\Program Files\NUnit 2.5.2\bin\net-2.0\tests/nunit.util.tests.dll" executed="True" success="True" time="98.609" asserts="0">
        <results>
          <test-suite name="NUnit" executed="True" success="True" time="98.609" asserts="0">
            <results>
              <test-suite name="Util" executed="True" success="True" time="98.609" asserts="0">
                <results>
                  <test-suite name="Tests" executed="True" success="True" time="98.594" asserts="0">
                    <results>
                      <test-suite name="AssemblyListTests" executed="True" success="True" time="0.031" asserts="0">
                        <results>
                          <test-case name="NUnit.Util.Tests.AssemblyListTests.AddFiresChangedEvent" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Util.Tests.AssemblyListTests.CanAddAssemblies" executed="True" success="True" time="0.000" asserts="3" />
                          <test-case name="NUnit.Util.Tests.AssemblyListTests.CanRemoveAssemblies" executed="True" success="True" time="0.000" asserts="3" />
                          <test-case name="NUnit.Util.Tests.AssemblyListTests.EmptyList" executed="True" success="True" time="0.031" asserts="1" />
                          <test-case name="NUnit.Util.Tests.AssemblyListTests.MustAddAbsolutePath" executed="True" success="True" time="0.000" asserts="0" />
                          <test-case name="NUnit.Util.Tests.AssemblyListTests.RemoveAtFiresChangedEvent" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Util.Tests.AssemblyListTests.RemoveFiresChangedEvent" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Util.Tests.AssemblyListTests.SettingFullPathFiresChangedEvent" executed="True" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite name="CategoryManagerTest" executed="True" success="True" time="0.172" asserts="0">
                        <results>
                          <test-case name="NUnit.Util.Tests.CategoryManagerTest.CanAddAllAvailableCategoriesInTestTree" executed="True" success="True" time="0.094" asserts="1" />
                          <test-case name="NUnit.Util.Tests.CategoryManagerTest.CanAddStrings" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Util.Tests.CategoryManagerTest.CanAddStringsWithoutDuplicating" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Util.Tests.CategoryManagerTest.CanAddTestCategories" executed="True" success="True" time="0.078" asserts="1" />
                          <test-case name="NUnit.Util.Tests.CategoryManagerTest.CanClearEntries" executed="True" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite name="CategoryParseTests" executed="True" success="True" time="0.031" asserts="0">
                        <results>
                          <test-case name="NUnit.Util.Tests.CategoryParseTests.CanParseCompoundCategory" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Util.Tests.CategoryParseTests.CanParseExcludedCategories" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Util.Tests.CategoryParseTests.CanParseMultipleAlternatives" executed="True" success="True" time="0.000" asserts="4" />
                          <test-case name="NUnit.Util.Tests.CategoryParseTests.CanParseMultipleCategoriesWithAnd" executed="True" success="True" time="0.000" asserts="4" />
                          <test-case name="NUnit.Util.Tests.CategoryParseTests.CanParseSimpleCategory" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Util.Tests.CategoryParseTests.EmptyStringReturnsEmptyFilter" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Util.Tests.CategoryParseTests.OrAndMinusCombined" executed="True" success="True" time="0.000" asserts="5" />
                          <test-case name="NUnit.Util.Tests.CategoryParseTests.PlusAndMinusCombined" executed="True" success="True" time="0.000" asserts="6" />
                          <test-case name="NUnit.Util.Tests.CategoryParseTests.PrecedenceTest" executed="True" success="True" time="0.016" asserts="4" />
                          <test-case name="NUnit.Util.Tests.CategoryParseTests.PrecedenceTestWithParentheses" executed="True" success="True" time="0.000" asserts="5" />
                        </results>
                      </test-suite>
                      <test-suite name="EventDispatcherTests" executed="True" success="True" time="0.016" asserts="0">
                        <results>
                          <test-case name="NUnit.Util.Tests.EventDispatcherTests.ProjectLoaded" executed="True" success="True" time="0.000" asserts="3" />
                          <test-case name="NUnit.Util.Tests.EventDispatcherTests.ProjectLoadFailed" executed="True" success="True" time="0.000" asserts="4" />
                          <test-case name="NUnit.Util.Tests.EventDispatcherTests.ProjectLoading" executed="True" success="True" time="0.000" asserts="3" />
                          <test-case name="NUnit.Util.Tests.EventDispatcherTests.ProjectUnloaded" executed="True" success="True" time="0.000" asserts="3" />
                          <test-case name="NUnit.Util.Tests.EventDispatcherTests.ProjectUnloadFailed" executed="True" success="True" time="0.000" asserts="4" />
                          <test-case name="NUnit.Util.Tests.EventDispatcherTests.ProjectUnloading" executed="True" success="True" time="0.000" asserts="3" />
                          <test-case name="NUnit.Util.Tests.EventDispatcherTests.RunFailed" executed="True" success="True" time="0.000" asserts="3" />
                          <test-case name="NUnit.Util.Tests.EventDispatcherTests.RunFinished" executed="True" success="True" time="0.000" asserts="3" />
                          <test-case name="NUnit.Util.Tests.EventDispatcherTests.RunStarting" executed="True" success="True" time="0.000" asserts="4" />
                          <test-case name="NUnit.Util.Tests.EventDispatcherTests.SuiteFinished" executed="True" success="True" time="0.000" asserts="3" />
                          <test-case name="NUnit.Util.Tests.EventDispatcherTests.SuiteStarting" executed="True" success="True" time="0.000" asserts="3" />
                          <test-case name="NUnit.Util.Tests.EventDispatcherTests.TestFinished" executed="True" success="True" time="0.000" asserts="3" />
                          <test-case name="NUnit.Util.Tests.EventDispatcherTests.TestLoaded" executed="True" success="True" time="0.000" asserts="4" />
                          <test-case name="NUnit.Util.Tests.EventDispatcherTests.TestLoadFailed" executed="True" success="True" time="0.000" asserts="4" />
                          <test-case name="NUnit.Util.Tests.EventDispatcherTests.TestLoading" executed="True" success="True" time="0.000" asserts="3" />
                          <test-case name="NUnit.Util.Tests.EventDispatcherTests.TestReloaded" executed="True" success="True" time="0.000" asserts="4" />
                          <test-case name="NUnit.Util.Tests.EventDispatcherTests.TestReloadFailed" executed="True" success="True" time="0.000" asserts="4" />
                          <test-case name="NUnit.Util.Tests.EventDispatcherTests.TestReloading" executed="True" success="True" time="0.000" asserts="3" />
                          <test-case name="NUnit.Util.Tests.EventDispatcherTests.TestStarting" executed="True" success="True" time="0.000" asserts="3" />
                          <test-case name="NUnit.Util.Tests.EventDispatcherTests.TestUnloaded" executed="True" success="True" time="0.000" asserts="3" />
                          <test-case name="NUnit.Util.Tests.EventDispatcherTests.TestUnloadFailed" executed="True" success="True" time="0.000" asserts="4" />
                          <test-case name="NUnit.Util.Tests.EventDispatcherTests.TestUnloading" executed="True" success="True" time="0.000" asserts="3" />
                        </results>
                      </test-suite>
                      <test-suite name="FileWatcherTest" executed="True" success="True" time="0.969" asserts="0">
                        <results>
                          <test-case name="NUnit.Util.Tests.FileWatcherTest.ChangingAttributesDoesNotTriggerWatcher" executed="True" success="True" time="0.250" asserts="1" />
                          <test-case name="NUnit.Util.Tests.FileWatcherTest.ChangingFileTriggersWatcher" executed="True" success="True" time="0.219" asserts="2" />
                          <test-case name="NUnit.Util.Tests.FileWatcherTest.CopyingFileDoesNotTriggerWatcher" executed="True" success="True" time="0.203" asserts="1" />
                          <test-case name="NUnit.Util.Tests.FileWatcherTest.MultipleCloselySpacedChangesTriggerWatcherOnlyOnce" executed="True" success="True" time="0.297" asserts="2" />
                        </results>
                      </test-suite>
                      <test-suite name="MemorySettingsStorageTests" executed="True" success="True" time="0.000" asserts="0">
                        <results>
                          <test-case name="NUnit.Util.Tests.MemorySettingsStorageTests.MakeStorage" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Util.Tests.MemorySettingsStorageTests.MakeSubStorages" executed="True" success="True" time="0.000" asserts="2" />
                          <test-case name="NUnit.Util.Tests.MemorySettingsStorageTests.RemoveSettings" executed="True" success="True" time="0.000" asserts="3" />
                          <test-case name="NUnit.Util.Tests.MemorySettingsStorageTests.SaveAndLoadSettings" executed="True" success="True" time="0.000" asserts="4" />
                          <test-case name="NUnit.Util.Tests.MemorySettingsStorageTests.SubstorageSettings" executed="True" success="True" time="0.000" asserts="5" />
                          <test-case name="NUnit.Util.Tests.MemorySettingsStorageTests.TypeSafeSettings" executed="True" success="True" time="0.000" asserts="3" />
                        </results>
                      </test-suite>
                      <test-suite name="NUnitProjectLoad" executed="True" success="True" time="0.172" asserts="0">
                        <results>
                          <test-case name="NUnit.Util.Tests.NUnitProjectLoad.FromAssembly" executed="True" success="True" time="0.016" asserts="5" />
                          <test-case name="NUnit.Util.Tests.NUnitProjectLoad.LoadEmptyConfigs" executed="True" success="True" time="0.094" asserts="3" />
                          <test-case name="NUnit.Util.Tests.NUnitProjectLoad.LoadEmptyProject" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Util.Tests.NUnitProjectLoad.LoadNormalProject" executed="True" success="True" time="0.000" asserts="7" />
                          <test-case name="NUnit.Util.Tests.NUnitProjectLoad.LoadProjectWithManualBinPath" executed="True" success="True" time="0.000" asserts="2" />
                          <test-case name="NUnit.Util.Tests.NUnitProjectLoad.SaveClearsAssemblyWrapper" executed="True" success="True" time="0.031" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite name="NUnitProjectSave" executed="True" success="True" time="0.031" asserts="0">
                        <results>
                          <test-case name="NUnit.Util.Tests.NUnitProjectSave.SaveEmptyConfigs" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Util.Tests.NUnitProjectSave.SaveEmptyProject" executed="True" success="True" time="0.016" asserts="1" />
                          <test-case name="NUnit.Util.Tests.NUnitProjectSave.SaveNormalProject" executed="True" success="True" time="0.016" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite name="NUnitProjectTests" executed="True" success="True" time="0.172" asserts="0">
                        <results>
                          <test-case name="NUnit.Util.Tests.NUnitProjectTests.AddConfigMakesProjectDirty" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Util.Tests.NUnitProjectTests.CanAddAssemblies" executed="True" success="True" time="0.000" asserts="3" />
                          <test-case name="NUnit.Util.Tests.NUnitProjectTests.CanAddConfigs" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Util.Tests.NUnitProjectTests.CanSetActiveConfig" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Util.Tests.NUnitProjectTests.CanSetAppBase" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Util.Tests.NUnitProjectTests.ConfigurationFileFromAssemblies" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Util.Tests.NUnitProjectTests.ConfigurationFileFromAssembly" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Util.Tests.NUnitProjectTests.DefaultActiveConfig" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Util.Tests.NUnitProjectTests.DefaultApplicationBase" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Util.Tests.NUnitProjectTests.DefaultConfigurationFile" executed="True" success="True" time="0.016" asserts="2" />
                          <test-case name="NUnit.Util.Tests.NUnitProjectTests.DefaultProjectName" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Util.Tests.NUnitProjectTests.IsProjectFile" executed="True" success="True" time="0.000" asserts="2" />
                          <test-case name="NUnit.Util.Tests.NUnitProjectTests.LoadMakesProjectNotDirty" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Util.Tests.NUnitProjectTests.NewProjectDefaultPath" executed="True" success="True" time="0.000" asserts="3" />
                          <test-case name="NUnit.Util.Tests.NUnitProjectTests.NewProjectIsEmpty" executed="True" success="True" time="0.000" asserts="2" />
                          <test-case name="NUnit.Util.Tests.NUnitProjectTests.NewProjectIsNotDirty" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Util.Tests.NUnitProjectTests.NewProjectNotLoadable" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Util.Tests.NUnitProjectTests.RemoveActiveConfig" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Util.Tests.NUnitProjectTests.RemoveConfigMakesProjectDirty" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Util.Tests.NUnitProjectTests.RenameActiveConfig" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Util.Tests.NUnitProjectTests.RenameConfigMakesProjectDirty" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Util.Tests.NUnitProjectTests.SaveAndLoadConfigsWithAssemblies" executed="True" success="True" time="0.000" asserts="8" />
                          <test-case name="NUnit.Util.Tests.NUnitProjectTests.SaveAndLoadEmptyConfigs" executed="True" success="True" time="0.016" asserts="4" />
                          <test-case name="NUnit.Util.Tests.NUnitProjectTests.SaveAndLoadEmptyProject" executed="True" success="True" time="0.000" asserts="2" />
                          <test-case name="NUnit.Util.Tests.NUnitProjectTests.SaveMakesProjectNotDirty" executed="True" success="True" time="0.016" asserts="1" />
                          <test-case name="NUnit.Util.Tests.NUnitProjectTests.SaveSetsProjectPath" executed="True" success="True" time="0.000" asserts="2" />
                          <test-case name="NUnit.Util.Tests.NUnitProjectTests.SettingActiveConfigMakesProjectDirty" executed="True" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite name="NUnitRegistryTests" executed="True" success="True" time="0.000" asserts="0">
                        <results>
                          <test-case name="NUnit.Util.Tests.NUnitRegistryTests.CurrentUser" executed="True" success="True" time="0.000" asserts="2" />
                          <test-case name="NUnit.Util.Tests.NUnitRegistryTests.CurrentUserTestMode" executed="True" success="True" time="0.000" asserts="2" />
                          <test-case name="NUnit.Util.Tests.NUnitRegistryTests.LocalMachine" executed="True" success="True" time="0.000" asserts="2" />
                          <test-case name="NUnit.Util.Tests.NUnitRegistryTests.LocalMachineTestMode" executed="True" success="True" time="0.000" asserts="2" />
                          <test-case name="NUnit.Util.Tests.NUnitRegistryTests.TestClearRoutines" executed="True" success="True" time="0.000" asserts="2" />
                        </results>
                      </test-suite>
                      <test-suite name="PathUtilTests" executed="True" success="True" time="0.000" asserts="0">
                        <results>
                          <test-case name="NUnit.Util.Tests.PathUtilTests.CheckDefaults" executed="True" success="True" time="0.000" asserts="2" />
                        </results>
                      </test-suite>
                      <test-suite name="PathUtilTests_Unix" executed="True" success="True" time="0.016" asserts="0">
                        <results>
                          <test-case name="NUnit.Util.Tests.PathUtilTests_Unix.Canonicalize" executed="True" success="True" time="0.000" asserts="5" />
                          <test-case name="NUnit.Util.Tests.PathUtilTests_Unix.IsAssemblyFileType" executed="True" success="True" time="0.000" asserts="3" />
                          <test-case name="NUnit.Util.Tests.PathUtilTests_Unix.PathFromUri" executed="True" success="True" time="0.000" asserts="2" />
                          <test-case name="NUnit.Util.Tests.PathUtilTests_Unix.RelativePath" executed="True" success="True" time="0.000" asserts="5" />
                          <test-case name="NUnit.Util.Tests.PathUtilTests_Unix.SamePath" executed="True" success="True" time="0.016" asserts="4" />
                          <test-case name="NUnit.Util.Tests.PathUtilTests_Unix.SamePathOrUnder" executed="True" success="True" time="0.000" asserts="7" />
                        </results>
                      </test-suite>
                      <test-suite name="PathUtilTests_Windows" executed="True" success="True" time="0.000" asserts="0">
                        <results>
                          <test-case name="NUnit.Util.Tests.PathUtilTests_Windows.Canonicalize" executed="True" success="True" time="0.000" asserts="5" />
                          <test-case name="NUnit.Util.Tests.PathUtilTests_Windows.IsAssemblyFileType" executed="True" success="True" time="0.000" asserts="3" />
                          <test-case name="NUnit.Util.Tests.PathUtilTests_Windows.PathFromUri" executed="True" success="True" time="0.000" asserts="2" />
                          <test-case name="NUnit.Util.Tests.PathUtilTests_Windows.RelativePath" executed="True" success="True" time="0.000" asserts="4" />
                          <test-case name="NUnit.Util.Tests.PathUtilTests_Windows.SamePath" executed="True" success="True" time="0.000" asserts="4" />
                          <test-case name="NUnit.Util.Tests.PathUtilTests_Windows.SamePathOrUnder" executed="True" success="True" time="0.000" asserts="9" />
                        </results>
                      </test-suite>
                      <test-suite name="ProcessRunnerTests" executed="True" success="True" time="23.031" asserts="1">
                        <properties>
                          <property name="Timeout" value="10000" />
                        </properties>
                        <results>
                          <test-case name="NUnit.Util.Tests.ProcessRunnerTests.CheckRunnerID" executed="True" success="True" time="0.047" asserts="1" />
                          <test-case name="NUnit.Util.Tests.ProcessRunnerTests.CountTestCases" executed="True" success="True" time="1.719" asserts="1" />
                          <test-case name="NUnit.Util.Tests.ProcessRunnerTests.CountTestCasesAcrossMultipleAssemblies" executed="True" success="True" time="1.781" asserts="1" />
                          <test-case name="NUnit.Util.Tests.ProcessRunnerTests.LoadAssembly" executed="True" success="True" time="1.328" asserts="1" />
                          <test-case name="NUnit.Util.Tests.ProcessRunnerTests.LoadAssemblyWithFixture" executed="True" success="True" time="1.547" asserts="1" />
                          <test-case name="NUnit.Util.Tests.ProcessRunnerTests.LoadAssemblyWithoutNamespaces" executed="True" success="True" time="1.609" asserts="4" />
                          <test-case name="NUnit.Util.Tests.ProcessRunnerTests.LoadAssemblyWithSuite" executed="True" success="True" time="1.453" asserts="1" />
                          <test-case name="NUnit.Util.Tests.ProcessRunnerTests.LoadMultipleAssemblies" executed="True" success="True" time="1.672" asserts="1" />
                          <test-case name="NUnit.Util.Tests.ProcessRunnerTests.LoadMultipleAssembliesWithFixture" executed="True" success="True" time="1.719" asserts="1" />
                          <test-case name="NUnit.Util.Tests.ProcessRunnerTests.LoadMultipleAssembliesWithSuite" executed="True" success="True" time="1.578" asserts="1" />
                          <test-case name="NUnit.Util.Tests.ProcessRunnerTests.RunAssembly" executed="True" success="True" time="2.047" asserts="1" />
                          <test-case name="NUnit.Util.Tests.ProcessRunnerTests.RunAssemblyUsingBeginAndEndRun" executed="True" success="True" time="2.516" asserts="2" />
                          <test-case name="NUnit.Util.Tests.ProcessRunnerTests.RunMultipleAssemblies" executed="True" success="True" time="2.000" asserts="1" />
                          <test-case name="NUnit.Util.Tests.ProcessRunnerTests.RunMultipleAssembliesUsingBeginAndEndRun" executed="True" success="True" time="1.922" asserts="2" />
                        </results>
                      </test-suite>
                      <test-suite name="ProjectConfigTests" executed="True" success="True" time="0.016" asserts="0">
                        <results>
                          <test-case name="NUnit.Util.Tests.ProjectConfigTests.AbsoluteBasePath" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Util.Tests.ProjectConfigTests.AbsoluteConfigurationFile" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Util.Tests.ProjectConfigTests.AddingConfigMarksProjectDirty" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Util.Tests.ProjectConfigTests.AddingInitialConfigRequiresReload" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Util.Tests.ProjectConfigTests.AddingSubsequentConfigDoesNotRequireReload" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Util.Tests.ProjectConfigTests.AddToActiveConfigMarksProjectDirty" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Util.Tests.ProjectConfigTests.AddToActiveConfigRequiresReload" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Util.Tests.ProjectConfigTests.AddToInactiveConfigDoesNotRequireReload" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Util.Tests.ProjectConfigTests.AddToInactiveConfigMarksProjectDirty" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Util.Tests.ProjectConfigTests.CanAddAssemblies" executed="True" success="True" time="0.000" asserts="3" />
                          <test-case name="NUnit.Util.Tests.ProjectConfigTests.DefaultConfigurationFile" executed="True" success="True" time="0.000" asserts="2" />
                          <test-case name="NUnit.Util.Tests.ProjectConfigTests.EmptyConfig" executed="True" success="True" time="0.000" asserts="2" />
                          <test-case name="NUnit.Util.Tests.ProjectConfigTests.ManualPrivateBinPath" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Util.Tests.ProjectConfigTests.NoBasePathSet" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Util.Tests.ProjectConfigTests.NoPrivateBinPath" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Util.Tests.ProjectConfigTests.RelativeBasePath" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Util.Tests.ProjectConfigTests.RelativeConfigurationFile" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Util.Tests.ProjectConfigTests.RemoveActiveConfigMarksProjectDirty" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Util.Tests.ProjectConfigTests.RemoveActiveConfigRequiresReload" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Util.Tests.ProjectConfigTests.RemoveInactiveConfigDoesNotRequireReload" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Util.Tests.ProjectConfigTests.RemoveInactiveConfigMarksProjectDirty" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Util.Tests.ProjectConfigTests.RenameActiveConfigMarksProjectDirty" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Util.Tests.ProjectConfigTests.RenameActiveConfigRequiresReload" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Util.Tests.ProjectConfigTests.RenameInactiveConfigDoesNotRequireReload" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Util.Tests.ProjectConfigTests.RenameInctiveConfigMarksProjectDirty" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Util.Tests.ProjectConfigTests.SettingActiveConfigApplicationBaseMarksProjectDirty" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Util.Tests.ProjectConfigTests.SettingActiveConfigApplicationBaseRequiresReload" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Util.Tests.ProjectConfigTests.SettingActiveConfigBinPathTypeMarksProjectDirty" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Util.Tests.ProjectConfigTests.SettingActiveConfigBinPathTypeRequiresReload" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Util.Tests.ProjectConfigTests.SettingActiveConfigConfigurationFileMarksProjectDirty" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Util.Tests.ProjectConfigTests.SettingActiveConfigConfigurationFileRequiresReload" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Util.Tests.ProjectConfigTests.SettingActiveConfigPrivateBinPathMarksProjectDirty" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Util.Tests.ProjectConfigTests.SettingActiveConfigPrivateBinPathRequiresReload" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Util.Tests.ProjectConfigTests.SettingInactiveConfigApplicationBaseDoesNotRequireReload" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Util.Tests.ProjectConfigTests.SettingInactiveConfigApplicationBaseMarksProjectDirty" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Util.Tests.ProjectConfigTests.SettingInactiveConfigBinPathTypeDoesNotRequireReload" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Util.Tests.ProjectConfigTests.SettingInactiveConfigBinPathTypeMarksProjectDirty" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Util.Tests.ProjectConfigTests.SettingInactiveConfigConfigurationFileDoesNotRequireReload" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Util.Tests.ProjectConfigTests.SettingInactiveConfigConfigurationFileMarksProjectDirty" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Util.Tests.ProjectConfigTests.SettingInactiveConfigPrivateBinPathDoesNotRequireReload" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Util.Tests.ProjectConfigTests.SettingInactiveConfigPrivateBinPathMarksProjectDirty" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Util.Tests.ProjectConfigTests.ToArray" executed="True" success="True" time="0.000" asserts="2" />
                        </results>
                      </test-suite>
                      <test-suite name="RecentFileEntryTests" executed="True" success="True" time="0.000" asserts="0">
                        <results>
                          <test-case name="NUnit.Util.Tests.RecentFileEntryTests.CanCreateFromFileNameAndVersion" executed="True" success="True" time="0.000" asserts="2" />
                          <test-case name="NUnit.Util.Tests.RecentFileEntryTests.CanCreateFromSimpleFileName" executed="True" success="True" time="0.000" asserts="2" />
                          <test-case name="NUnit.Util.Tests.RecentFileEntryTests.CanParseFileNamePlusVersionString" executed="True" success="True" time="0.000" asserts="2" />
                          <test-case name="NUnit.Util.Tests.RecentFileEntryTests.CanParseFileNameWithCommaPlusVersionString" executed="True" success="True" time="0.000" asserts="2" />
                          <test-case name="NUnit.Util.Tests.RecentFileEntryTests.CanParseSimpleFileName" executed="True" success="True" time="0.000" asserts="2" />
                          <test-case name="NUnit.Util.Tests.RecentFileEntryTests.CanParseSimpleFileNameWithComma" executed="True" success="True" time="0.000" asserts="2" />
                          <test-case name="NUnit.Util.Tests.RecentFileEntryTests.EntryCanDisplayItself" executed="True" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite name="RecentFilesTests" executed="True" success="True" time="0.000" asserts="0">
                        <results>
                          <test-case name="NUnit.Util.Tests.RecentFilesTests.AddMaxItems" executed="True" success="True" time="0.000" asserts="7" />
                          <test-case name="NUnit.Util.Tests.RecentFilesTests.AddSingleItem" executed="True" success="True" time="0.000" asserts="3" />
                          <test-case name="NUnit.Util.Tests.RecentFilesTests.AddTooManyItems" executed="True" success="True" time="0.000" asserts="7" />
                          <test-case name="NUnit.Util.Tests.RecentFilesTests.CountAtMax" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Util.Tests.RecentFilesTests.CountAtMin" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Util.Tests.RecentFilesTests.CountDefault" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Util.Tests.RecentFilesTests.CountOverMax" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Util.Tests.RecentFilesTests.CountUnderMin" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Util.Tests.RecentFilesTests.EmptyList" executed="True" success="True" time="0.000" asserts="3" />
                          <test-case name="NUnit.Util.Tests.RecentFilesTests.IncreaseSize" executed="True" success="True" time="0.000" asserts="12" />
                          <test-case name="NUnit.Util.Tests.RecentFilesTests.IncreaseSizeAfterAdd" executed="True" success="True" time="0.000" asserts="8" />
                          <test-case name="NUnit.Util.Tests.RecentFilesTests.ReduceSize" executed="True" success="True" time="0.000" asserts="5" />
                          <test-case name="NUnit.Util.Tests.RecentFilesTests.ReduceSizeAfterAdd" executed="True" success="True" time="0.000" asserts="4" />
                          <test-case name="NUnit.Util.Tests.RecentFilesTests.RemoveFirstProject" executed="True" success="True" time="0.000" asserts="3" />
                          <test-case name="NUnit.Util.Tests.RecentFilesTests.RemoveLastProject" executed="True" success="True" time="0.000" asserts="5" />
                          <test-case name="NUnit.Util.Tests.RecentFilesTests.RemoveMultipleProjects" executed="True" success="True" time="0.000" asserts="3" />
                          <test-case name="NUnit.Util.Tests.RecentFilesTests.RemoveOneProject" executed="True" success="True" time="0.000" asserts="4" />
                          <test-case name="NUnit.Util.Tests.RecentFilesTests.ReorderLastProject" executed="True" success="True" time="0.000" asserts="6" />
                          <test-case name="NUnit.Util.Tests.RecentFilesTests.ReorderMultipleProjects" executed="True" success="True" time="0.000" asserts="6" />
                          <test-case name="NUnit.Util.Tests.RecentFilesTests.ReorderSameProject" executed="True" success="True" time="0.000" asserts="6" />
                          <test-case name="NUnit.Util.Tests.RecentFilesTests.ReorderSingleProject" executed="True" success="True" time="0.000" asserts="6" />
                          <test-case name="NUnit.Util.Tests.RecentFilesTests.ReorderWithListNotFull" executed="True" success="True" time="0.000" asserts="4" />
                        </results>
                      </test-suite>
                      <test-suite name="RegistrySettingsStorageTests" executed="True" success="True" time="0.016" asserts="0">
                        <results>
                          <test-case name="NUnit.Util.Tests.RegistrySettingsStorageTests.MakeSubStorages" executed="True" success="True" time="0.000" asserts="4" />
                          <test-case name="NUnit.Util.Tests.RegistrySettingsStorageTests.RemoveSettings" executed="True" success="True" time="0.016" asserts="3" />
                          <test-case name="NUnit.Util.Tests.RegistrySettingsStorageTests.SaveAndLoadSettings" executed="True" success="True" time="0.000" asserts="6" />
                          <test-case name="NUnit.Util.Tests.RegistrySettingsStorageTests.StorageHasCorrectKey" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Util.Tests.RegistrySettingsStorageTests.SubstorageSettings" executed="True" success="True" time="0.000" asserts="5" />
                          <test-case name="NUnit.Util.Tests.RegistrySettingsStorageTests.TypeSafeSettings" executed="True" success="True" time="0.000" asserts="3" />
                        </results>
                      </test-suite>
                      <test-suite name="RemoteTestAgentTests" executed="True" success="True" time="0.000" asserts="0">
                        <results>
                          <test-case name="NUnit.Util.Tests.RemoteTestAgentTests.AgentReturnsProcessId" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Util.Tests.RemoteTestAgentTests.CanLocateAgentExecutable" executed="True" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite name="RemoteTestResultTest" executed="True" success="True" time="2.250" asserts="0">
                        <results>
                          <test-case name="NUnit.Util.Tests.RemoteTestResultTest.ResultStillValidAfterDomainUnload" executed="True" success="True" time="2.250" asserts="3" />
                        </results>
                      </test-suite>
                      <test-suite name="ServerUtilityTests" executed="True" success="True" time="0.047" asserts="0">
                        <results>
                          <test-case name="NUnit.Util.Tests.ServerUtilityTests.CanGetTcpChannelOnSpecifiedPort" executed="True" success="True" time="0.031" asserts="5" />
                          <test-case name="NUnit.Util.Tests.ServerUtilityTests.CanGetTcpChannelOnUnpecifiedPort" executed="True" success="True" time="0.016" asserts="4" />
                        </results>
                      </test-suite>
                      <test-suite name="SettingsGroupTests" executed="True" success="True" time="0.031" asserts="0">
                        <results>
                          <test-case name="NUnit.Util.Tests.SettingsGroupTests.BadSetting" executed="True" success="True" time="0.016" asserts="1" />
                          <test-case name="NUnit.Util.Tests.SettingsGroupTests.DefaultSettings" executed="True" success="True" time="0.000" asserts="7" />
                          <test-case name="NUnit.Util.Tests.SettingsGroupTests.SubGroupSettings" executed="True" success="True" time="0.000" asserts="7" />
                          <test-case name="NUnit.Util.Tests.SettingsGroupTests.TopLevelSettings" executed="True" success="True" time="0.000" asserts="5" />
                          <test-case name="NUnit.Util.Tests.SettingsGroupTests.TypeSafeSettings" executed="True" success="True" time="0.000" asserts="3" />
                        </results>
                      </test-suite>
                      <test-suite name="SummaryResultFixture" executed="True" success="True" time="0.031" asserts="0">
                        <results>
                          <test-case name="NUnit.Util.Tests.SummaryResultFixture.SummaryMatchesResult" executed="True" success="True" time="0.031" asserts="9" />
                        </results>
                      </test-suite>
                      <test-suite name="TestAgencyTests" executed="True" success="True" time="1.234" asserts="0">
                        <results>
                          <test-case name="NUnit.Util.Tests.TestAgencyTests.CanConnectToAgency" executed="True" success="True" time="0.031" asserts="2" />
                          <test-case name="NUnit.Util.Tests.TestAgencyTests.CanLaunchAndConnectToAgent" executed="True" success="True" time="1.188" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite name="TestDomainFixture" executed="True" success="True" time="2.703" asserts="0">
                        <results>
                          <test-case name="NUnit.Util.Tests.TestDomainFixture.AppDomainIsSetUpCorrectly" executed="True" success="True" time="0.016" asserts="8" />
                          <test-case name="NUnit.Util.Tests.TestDomainFixture.AssemblyIsLoadedCorrectly" executed="True" success="True" time="0.000" asserts="2" />
                          <test-case name="NUnit.Util.Tests.TestDomainFixture.CanRunMockAssemblyTests" executed="True" success="True" time="0.563" asserts="5" />
                        </results>
                      </test-suite>
                      <test-suite name="TestDomainRunnerTests" executed="True" success="True" time="34.500" asserts="1">
                        <results>
                          <test-case name="NUnit.Util.Tests.TestDomainRunnerTests.CheckRunnerID" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Util.Tests.TestDomainRunnerTests.CountTestCases" executed="True" success="True" time="2.844" asserts="1" />
                          <test-case name="NUnit.Util.Tests.TestDomainRunnerTests.CountTestCasesAcrossMultipleAssemblies" executed="True" success="True" time="2.391" asserts="1" />
                          <test-case name="NUnit.Util.Tests.TestDomainRunnerTests.LoadAssembly" executed="True" success="True" time="2.438" asserts="1" />
                          <test-case name="NUnit.Util.Tests.TestDomainRunnerTests.LoadAssemblyWithFixture" executed="True" success="True" time="2.656" asserts="1" />
                          <test-case name="NUnit.Util.Tests.TestDomainRunnerTests.LoadAssemblyWithoutNamespaces" executed="True" success="True" time="2.141" asserts="4" />
                          <test-case name="NUnit.Util.Tests.TestDomainRunnerTests.LoadAssemblyWithSuite" executed="True" success="True" time="2.047" asserts="1" />
                          <test-case name="NUnit.Util.Tests.TestDomainRunnerTests.LoadMultipleAssemblies" executed="True" success="True" time="2.531" asserts="1" />
                          <test-case name="NUnit.Util.Tests.TestDomainRunnerTests.LoadMultipleAssembliesWithFixture" executed="True" success="True" time="2.234" asserts="1" />
                          <test-case name="NUnit.Util.Tests.TestDomainRunnerTests.LoadMultipleAssembliesWithSuite" executed="True" success="True" time="2.391" asserts="1" />
                          <test-case name="NUnit.Util.Tests.TestDomainRunnerTests.RunAssembly" executed="True" success="True" time="3.047" asserts="1" />
                          <test-case name="NUnit.Util.Tests.TestDomainRunnerTests.RunAssemblyUsingBeginAndEndRun" executed="True" success="True" time="3.094" asserts="2" />
                          <test-case name="NUnit.Util.Tests.TestDomainRunnerTests.RunMultipleAssemblies" executed="True" success="True" time="2.984" asserts="1" />
                          <test-case name="NUnit.Util.Tests.TestDomainRunnerTests.RunMultipleAssembliesUsingBeginAndEndRun" executed="True" success="True" time="3.578" asserts="2" />
                        </results>
                      </test-suite>
                      <test-suite name="TestDomainTests" executed="True" success="True" time="15.828" asserts="0">
                        <results>
                          <test-case name="NUnit.Util.Tests.TestDomainTests.BasePathOverrideIsHonored" executed="True" success="True" time="2.656" asserts="1" />
                          <test-case name="NUnit.Util.Tests.TestDomainTests.BinPathOverrideIsHonored" executed="True" success="True" time="2.406" asserts="1" />
                          <test-case name="NUnit.Util.Tests.TestDomainTests.ConfigFileOverrideIsHonored" executed="True" success="True" time="2.297" asserts="1" />
                          <test-case name="NUnit.Util.Tests.TestDomainTests.FileNotFound" executed="True" success="True" time="1.641" asserts="0" />
                          <test-case name="NUnit.Util.Tests.TestDomainTests.InvalidTestFixture" executed="True" success="True" time="2.234" asserts="1" />
                          <test-case name="NUnit.Util.Tests.TestDomainTests.SpecificTestFixture" executed="True" success="True" time="2.906" asserts="4" />
                          <test-case name="NUnit.Util.Tests.TestDomainTests.TurnOffShadowCopy" executed="True" success="True" time="1.656" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite name="TestDomainTests_Multiple" executed="True" success="True" time="3.000" asserts="0">
                        <results>
                          <test-case name="NUnit.Util.Tests.TestDomainTests_Multiple.AssemblyNodes" executed="True" success="True" time="0.000" asserts="2" />
                          <test-case name="NUnit.Util.Tests.TestDomainTests_Multiple.BuildSuite" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Util.Tests.TestDomainTests_Multiple.RootNode" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Util.Tests.TestDomainTests_Multiple.RunMultipleAssemblies" executed="True" success="True" time="0.500" asserts="1" />
                          <test-case name="NUnit.Util.Tests.TestDomainTests_Multiple.TestCaseCount" executed="True" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite name="TestDomainTests_MultipleFixture" executed="True" success="True" time="2.359" asserts="0">
                        <results>
                          <test-case name="NUnit.Util.Tests.TestDomainTests_MultipleFixture.LoadFixture" executed="True" success="True" time="2.344" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite name="TestLoaderAssemblyTests" executed="True" success="True" time="10.547" asserts="0">
                        <results>
                          <test-case name="NUnit.Util.Tests.TestLoaderAssemblyTests.AssemblyWithNoTests" executed="True" success="True" time="2.375" asserts="4" />
                          <test-case name="NUnit.Util.Tests.TestLoaderAssemblyTests.FileNotFound" executed="True" success="True" time="0.000" asserts="5" />
                          <test-case name="NUnit.Util.Tests.TestLoaderAssemblyTests.LoadProject" executed="True" success="True" time="0.016" asserts="5" />
                          <test-case name="NUnit.Util.Tests.TestLoaderAssemblyTests.LoadTest" executed="True" success="True" time="2.266" asserts="6" />
                          <test-case name="NUnit.Util.Tests.TestLoaderAssemblyTests.RunTest" executed="True" success="True" time="3.531" asserts="9" />
                          <test-case name="NUnit.Util.Tests.TestLoaderAssemblyTests.UnloadProject" executed="True" success="True" time="0.000" asserts="5" />
                          <test-case name="NUnit.Util.Tests.TestLoaderAssemblyTests.UnloadTest" executed="True" success="True" time="2.266" asserts="3" />
                        </results>
                      </test-suite>
                      <test-suite name="VisualStudioConverterTests" executed="True" success="True" time="0.625" asserts="0">
                        <results>
                          <test-case name="NUnit.Util.Tests.VisualStudioConverterTests.FromCppProject" executed="True" success="True" time="0.234" asserts="5" />
                          <test-case name="NUnit.Util.Tests.VisualStudioConverterTests.FromCSharpProject" executed="True" success="True" time="0.016" asserts="5" />
                          <test-case name="NUnit.Util.Tests.VisualStudioConverterTests.FromJsharpProject" executed="True" success="True" time="0.000" asserts="5" />
                          <test-case name="NUnit.Util.Tests.VisualStudioConverterTests.FromMakefileProject" executed="True" success="True" time="0.000" asserts="3" />
                          <test-case name="NUnit.Util.Tests.VisualStudioConverterTests.FromProjectWithHebrewFileIncluded" executed="True" success="True" time="0.031" asserts="5" />
                          <test-case name="NUnit.Util.Tests.VisualStudioConverterTests.FromVBProject" executed="True" success="True" time="0.016" asserts="5" />
                          <test-case name="NUnit.Util.Tests.VisualStudioConverterTests.FromVSSolution2003" executed="True" success="True" time="0.078" asserts="7" />
                          <test-case name="NUnit.Util.Tests.VisualStudioConverterTests.FromVSSolution2005" executed="True" success="True" time="0.094" asserts="7" />
                          <test-case name="NUnit.Util.Tests.VisualStudioConverterTests.FromWebApplication" executed="True" success="True" time="0.031" asserts="3" />
                          <test-case name="NUnit.Util.Tests.VisualStudioConverterTests.WithUnmanagedCpp" executed="True" success="True" time="0.078" asserts="5" />
                        </results>
                      </test-suite>
                      <test-suite name="VSProjectTests" executed="True" success="True" time="0.234" asserts="0">
                        <results>
                          <test-case name="NUnit.Util.Tests.VSProjectTests.FileNotFoundError" executed="True" success="True" time="0.000" asserts="0" />
                          <test-case name="NUnit.Util.Tests.VSProjectTests.GenerateCorrectExtensionsFromVCProjectVS2005" executed="True" success="True" time="0.016" asserts="4" />
                          <test-case name="NUnit.Util.Tests.VSProjectTests.InvalidProjectFormat" executed="True" success="True" time="0.016" asserts="0" />
                          <test-case name="NUnit.Util.Tests.VSProjectTests.InvalidXmlFormat" executed="True" success="True" time="0.016" asserts="0" />
                          <test-case name="NUnit.Util.Tests.VSProjectTests.LoadCppProject" executed="True" success="True" time="0.000" asserts="3" />
                          <test-case name="NUnit.Util.Tests.VSProjectTests.LoadCppProjectVS2005" executed="True" success="True" time="0.016" asserts="3" />
                          <test-case name="NUnit.Util.Tests.VSProjectTests.LoadCppProjectWithMacros" executed="True" success="True" time="0.016" asserts="4" />
                          <test-case name="NUnit.Util.Tests.VSProjectTests.LoadCsharpProject" executed="True" success="True" time="0.016" asserts="3" />
                          <test-case name="NUnit.Util.Tests.VSProjectTests.LoadCsharpProjectVS2005" executed="True" success="True" time="0.000" asserts="3" />
                          <test-case name="NUnit.Util.Tests.VSProjectTests.LoadInvalidFileType" executed="True" success="True" time="0.016" asserts="0" />
                          <test-case name="NUnit.Util.Tests.VSProjectTests.LoadJsharpProject" executed="True" success="True" time="0.000" asserts="3" />
                          <test-case name="NUnit.Util.Tests.VSProjectTests.LoadJsharpProjectVS2005" executed="True" success="True" time="0.000" asserts="3" />
                          <test-case name="NUnit.Util.Tests.VSProjectTests.LoadProjectWithHebrewFileIncluded" executed="True" success="True" time="0.016" asserts="3" />
                          <test-case name="NUnit.Util.Tests.VSProjectTests.LoadVbProject" executed="True" success="True" time="0.016" asserts="3" />
                          <test-case name="NUnit.Util.Tests.VSProjectTests.LoadVbProjectVS2005" executed="True" success="True" time="0.016" asserts="3" />
                          <test-case name="NUnit.Util.Tests.VSProjectTests.MissingAttributes" executed="True" success="True" time="0.016" asserts="0" />
                          <test-case name="NUnit.Util.Tests.VSProjectTests.NoConfigurations" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Util.Tests.VSProjectTests.NotWebProject" executed="True" success="True" time="0.000" asserts="2" />
                          <test-case name="NUnit.Util.Tests.VSProjectTests.ProjectExtensions" executed="True" success="True" time="0.000" asserts="4" />
                          <test-case name="NUnit.Util.Tests.VSProjectTests.SolutionExtension" executed="True" success="True" time="0.000" asserts="2" />
                        </results>
                      </test-suite>
                      <test-suite name="XmlResultWriterTest" executed="True" success="True" time="0.266" asserts="0">
                        <results>
                          <test-case name="NUnit.Util.Tests.XmlResultWriterTest.HasMultipleCategories" executed="True" success="True" time="0.016" asserts="2" />
                          <test-case name="NUnit.Util.Tests.XmlResultWriterTest.HasMultipleProperties" executed="True" success="True" time="0.016" asserts="2" />
                          <test-case name="NUnit.Util.Tests.XmlResultWriterTest.HasSingleCategory" executed="True" success="True" time="0.000" asserts="3" />
                          <test-case name="NUnit.Util.Tests.XmlResultWriterTest.HasSingleProperty" executed="True" success="True" time="0.000" asserts="3" />
                          <test-case name="NUnit.Util.Tests.XmlResultWriterTest.SuiteResultHasCategories" executed="True" success="True" time="0.000" asserts="3" />
                          <test-case name="NUnit.Util.Tests.XmlResultWriterTest.TestHasCultureInfo" executed="True" success="True" time="0.000" asserts="5" />
                          <test-case name="NUnit.Util.Tests.XmlResultWriterTest.TestHasEnvironmentInfo" executed="True" success="True" time="0.000" asserts="9" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                </results>
              </test-suite>
            </results>
          </test-suite>
        </results>
      </test-suite>
      <test-suite name="C:\Program Files\NUnit 2.5.2\bin\net-2.0\tests/nunit.mocks.tests.dll" executed="True" success="True" time="0.781" asserts="0">
        <results>
          <test-suite name="NUnit" executed="True" success="True" time="0.781" asserts="0">
            <results>
              <test-suite name="Mocks" executed="True" success="True" time="0.781" asserts="0">
                <results>
                  <test-suite name="Tests" executed="True" success="True" time="0.781" asserts="0">
                    <results>
                      <test-suite name="DynamicMockTests" executed="True" success="True" time="0.609" asserts="0">
                        <results>
                          <test-case name="NUnit.Mocks.Tests.DynamicMockTests.CallMethod" executed="True" success="True" time="0.000" asserts="0" />
                          <test-case name="NUnit.Mocks.Tests.DynamicMockTests.CallMethodWithArgs" executed="True" success="True" time="0.000" asserts="0" />
                          <test-case name="NUnit.Mocks.Tests.DynamicMockTests.CreateMockForMBRClass" executed="True" success="True" time="0.000" asserts="13" />
                          <test-case name="NUnit.Mocks.Tests.DynamicMockTests.CreateMockForNonMBRClassFails" executed="True" success="True" time="0.000" asserts="0" />
                          <test-case name="NUnit.Mocks.Tests.DynamicMockTests.DefaultReturnValues" executed="True" success="True" time="0.000" asserts="5" />
                          <test-case name="NUnit.Mocks.Tests.DynamicMockTests.ExpectedMethod" executed="True" success="True" time="0.000" asserts="2" />
                          <test-case name="NUnit.Mocks.Tests.DynamicMockTests.ExpectedMethodNotCalled" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Mocks.Tests.DynamicMockTests.MethodWithReturnValue" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Mocks.Tests.DynamicMockTests.MockHasDefaultName" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Mocks.Tests.DynamicMockTests.MockHasNonDefaultName" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Mocks.Tests.DynamicMockTests.OverrideMethodOnDynamicMock" executed="True" success="True" time="0.156" asserts="1" />
                          <test-case name="NUnit.Mocks.Tests.DynamicMockTests.RefParameter" executed="True" success="True" time="0.000" asserts="2" />
                          <test-case name="NUnit.Mocks.Tests.DynamicMockTests.WrongReturnType" executed="True" success="True" time="0.000" asserts="0" />
                        </results>
                      </test-suite>
                      <test-suite name="MockTests" executed="True" success="True" time="0.156" asserts="0">
                        <results>
                          <test-case name="NUnit.Mocks.Tests.MockTests.CallMultipleMethodsInDifferentOrder" executed="True" success="True" time="0.000" asserts="6" />
                          <test-case name="NUnit.Mocks.Tests.MockTests.CallMultipleMethodsSomeWithoutExpectations" executed="True" success="True" time="0.000" asserts="5" />
                          <test-case name="NUnit.Mocks.Tests.MockTests.ChangeExpectAndReturnToFixedReturn" executed="True" success="True" time="0.000" asserts="8" />
                          <test-case name="NUnit.Mocks.Tests.MockTests.ChangeFixedReturnToExpectAndReturn" executed="True" success="True" time="0.000" asserts="9" />
                          <test-case name="NUnit.Mocks.Tests.MockTests.ConstraintArgumentSucceeds" executed="True" success="True" time="0.000" asserts="3" />
                          <test-case name="NUnit.Mocks.Tests.MockTests.ConstraintArgumentThatFails" executed="True" success="True" time="0.000" asserts="3" />
                          <test-case name="NUnit.Mocks.Tests.MockTests.ExpectAndReturn" executed="True" success="True" time="0.000" asserts="4" />
                          <test-case name="NUnit.Mocks.Tests.MockTests.ExpectAndReturnNull" executed="True" success="True" time="0.000" asserts="4" />
                          <test-case name="NUnit.Mocks.Tests.MockTests.ExpectAndReturnWithArgument" executed="True" success="True" time="0.000" asserts="5" />
                          <test-case name="NUnit.Mocks.Tests.MockTests.ExpectAndReturnWithWrongArgument" executed="True" success="True" time="0.000" asserts="3" />
                          <test-case name="NUnit.Mocks.Tests.MockTests.ExpectAndThrowException" executed="True" success="True" time="0.031" asserts="2" />
                          <test-case name="NUnit.Mocks.Tests.MockTests.ExpectNoCallFails" executed="True" success="True" time="0.000" asserts="0" />
                          <test-case name="NUnit.Mocks.Tests.MockTests.ExpectNoCallSucceeds" executed="True" success="True" time="0.000" asserts="0" />
                          <test-case name="NUnit.Mocks.Tests.MockTests.FailWithParametersSpecified" executed="True" success="True" time="0.000" asserts="2" />
                          <test-case name="NUnit.Mocks.Tests.MockTests.IgnoreArguments" executed="True" success="True" time="0.000" asserts="2" />
                          <test-case name="NUnit.Mocks.Tests.MockTests.MethodNotCalled" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Mocks.Tests.MockTests.MockHasName" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Mocks.Tests.MockTests.MultipleCallsToSameMethod" executed="True" success="True" time="0.000" asserts="4" />
                          <test-case name="NUnit.Mocks.Tests.MockTests.MultipleExpectAndReturn" executed="True" success="True" time="0.000" asserts="10" />
                          <test-case name="NUnit.Mocks.Tests.MockTests.MultipleExpectations" executed="True" success="True" time="0.000" asserts="12" />
                          <test-case name="NUnit.Mocks.Tests.MockTests.NotEnoughCalls" executed="True" success="True" time="0.031" asserts="3" />
                          <test-case name="NUnit.Mocks.Tests.MockTests.OneExpectation" executed="True" success="True" time="0.000" asserts="2" />
                          <test-case name="NUnit.Mocks.Tests.MockTests.RequireArguments" executed="True" success="True" time="0.000" asserts="2" />
                          <test-case name="NUnit.Mocks.Tests.MockTests.SetReturnValue" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Mocks.Tests.MockTests.SetReturnValueMultipleTimesOnMultipleMethods" executed="True" success="True" time="0.000" asserts="7" />
                          <test-case name="NUnit.Mocks.Tests.MockTests.SetReturnValueRepeatedCalls" executed="True" success="True" time="0.000" asserts="3" />
                          <test-case name="NUnit.Mocks.Tests.MockTests.SetReturnValueWithoutCalling" executed="True" success="True" time="0.000" asserts="0" />
                          <test-case name="NUnit.Mocks.Tests.MockTests.StrictDefaultsToFalse" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Mocks.Tests.MockTests.StrictMode" executed="True" success="True" time="0.016" asserts="2" />
                          <test-case name="NUnit.Mocks.Tests.MockTests.StrictMode_ExceptionsCaught" executed="True" success="True" time="0.016" asserts="4" />
                          <test-case name="NUnit.Mocks.Tests.MockTests.TooManyCalls" executed="True" success="True" time="0.000" asserts="3" />
                          <test-case name="NUnit.Mocks.Tests.MockTests.UnexpectedCallsIgnored" executed="True" success="True" time="0.000" asserts="0" />
                          <test-case name="NUnit.Mocks.Tests.MockTests.VerifyNewMock" executed="True" success="True" time="0.000" asserts="0" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                </results>
              </test-suite>
            </results>
          </test-suite>
        </results>
      </test-suite>
      <test-suite name="C:\Program Files\NUnit 2.5.2\bin\net-2.0\tests/nunit-console.tests.dll" executed="True" success="True" time="34.328" asserts="0">
        <results>
          <test-suite name="NUnit" executed="True" success="True" time="34.313" asserts="0">
            <results>
              <test-suite name="ConsoleRunner" executed="True" success="True" time="34.297" asserts="0">
                <results>
                  <test-suite name="Tests" executed="True" success="True" time="34.297" asserts="0">
                    <results>
                      <test-suite name="CommandLineTests" executed="True" success="True" time="0.297" asserts="0">
                        <results>
                          <test-case name="NUnit.ConsoleRunner.Tests.CommandLineTests.AllowForwardSlashDefaultsCorrectly" executed="True" success="True" time="0.188" asserts="1" />
                          <test-case name="NUnit.ConsoleRunner.Tests.CommandLineTests.AssemblyAloneIsValid" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.ConsoleRunner.Tests.CommandLineTests.AssemblyName" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.ConsoleRunner.Tests.CommandLineTests.FileNameWithoutXmlParameterLooksLikeParameter" executed="True" success="True" time="0.000" asserts="2" />
                          <test-case name="NUnit.ConsoleRunner.Tests.CommandLineTests.FixtureNamePlusAssemblyIsValid" executed="True" success="True" time="0.000" asserts="3" />
                          <test-case name="NUnit.ConsoleRunner.Tests.CommandLineTests.HelpTextUsesCorrectDelimiterForPlatform" executed="True" success="True" time="0.016" asserts="2" />
                          <test-case name="NUnit.ConsoleRunner.Tests.CommandLineTests.InvalidCommandLineParms" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.ConsoleRunner.Tests.CommandLineTests.InvalidOption" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.ConsoleRunner.Tests.CommandLineTests.NoFixtureNameProvided" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.ConsoleRunner.Tests.CommandLineTests.NoParametersCount" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.ConsoleRunner.Tests.CommandLineTests.OptionsAreRecognized" executed="True" success="True" time="0.047" asserts="98" />
                          <test-case name="NUnit.ConsoleRunner.Tests.CommandLineTests.XmlParameter" executed="True" success="True" time="0.000" asserts="3" />
                          <test-case name="NUnit.ConsoleRunner.Tests.CommandLineTests.XmlParameterWithFullPath" executed="True" success="True" time="0.000" asserts="3" />
                          <test-case name="NUnit.ConsoleRunner.Tests.CommandLineTests.XmlParameterWithFullPathUsingEqualSign" executed="True" success="True" time="0.000" asserts="3" />
                          <test-case name="NUnit.ConsoleRunner.Tests.CommandLineTests.XmlParameterWithoutFileNameIsInvalid" executed="True" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite name="CommandLineTests_MultipleAssemblies" executed="True" success="True" time="0.000" asserts="0">
                        <results>
                          <test-case name="NUnit.ConsoleRunner.Tests.CommandLineTests_MultipleAssemblies.CheckParameters" executed="True" success="True" time="0.000" asserts="2" />
                          <test-case name="NUnit.ConsoleRunner.Tests.CommandLineTests_MultipleAssemblies.FixtureParameters" executed="True" success="True" time="0.000" asserts="3" />
                          <test-case name="NUnit.ConsoleRunner.Tests.CommandLineTests_MultipleAssemblies.FixtureValidate" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.ConsoleRunner.Tests.CommandLineTests_MultipleAssemblies.MultipleAssemblyValidate" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.ConsoleRunner.Tests.CommandLineTests_MultipleAssemblies.ParameterCount" executed="True" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite name="ConsoleRunnerTest" executed="True" success="True" time="34.000" asserts="0">
                        <results>
                          <test-case name="NUnit.ConsoleRunner.Tests.ConsoleRunnerTest.AssemblyNotFound" executed="True" success="True" time="1.766" asserts="1" />
                          <test-case name="NUnit.ConsoleRunner.Tests.ConsoleRunnerTest.Bug1073539Test" executed="True" success="True" time="2.859" asserts="1" />
                          <test-case name="NUnit.ConsoleRunner.Tests.ConsoleRunnerTest.Bug1311644Test" executed="True" success="True" time="2.797" asserts="1" />
                          <test-case name="NUnit.ConsoleRunner.Tests.ConsoleRunnerTest.CanRunWithMultipleTestDomains" executed="True" success="True" time="5.703" asserts="2" />
                          <test-case name="NUnit.ConsoleRunner.Tests.ConsoleRunnerTest.CanRunWithMultipleTestDomains_NoThread" executed="True" success="True" time="3.875" asserts="2" />
                          <test-case name="NUnit.ConsoleRunner.Tests.ConsoleRunnerTest.CanRunWithoutTestDomain" executed="True" success="True" time="1.406" asserts="2" />
                          <test-case name="NUnit.ConsoleRunner.Tests.ConsoleRunnerTest.CanRunWithoutTestDomain_NoThread" executed="True" success="True" time="1.391" asserts="2" />
                          <test-case name="NUnit.ConsoleRunner.Tests.ConsoleRunnerTest.CanRunWithSingleTestDomain" executed="True" success="True" time="1.281" asserts="2" />
                          <test-case name="NUnit.ConsoleRunner.Tests.ConsoleRunnerTest.CanRunWithSingleTestDomain_NoThread" executed="True" success="True" time="1.297" asserts="2" />
                          <test-case name="NUnit.ConsoleRunner.Tests.ConsoleRunnerTest.FailureFixture" executed="True" success="True" time="1.266" asserts="1" />
                          <test-case name="NUnit.ConsoleRunner.Tests.ConsoleRunnerTest.InvalidFixture" executed="True" success="True" time="0.891" asserts="1" />
                          <test-case name="NUnit.ConsoleRunner.Tests.ConsoleRunnerTest.MultiFailureFixture" executed="True" success="True" time="1.250" asserts="1" />
                          <test-case name="NUnit.ConsoleRunner.Tests.ConsoleRunnerTest.OneOfTwoAssembliesNotFound" executed="True" success="True" time="2.313" asserts="1" />
                          <test-case name="NUnit.ConsoleRunner.Tests.ConsoleRunnerTest.SuccessFixture" executed="True" success="True" time="1.734" asserts="1" />
                          <test-case name="NUnit.ConsoleRunner.Tests.ConsoleRunnerTest.XmlResult" executed="True" success="True" time="1.953" asserts="2" />
                          <test-case name="NUnit.ConsoleRunner.Tests.ConsoleRunnerTest.XmlToConsole" executed="True" success="True" time="2.156" asserts="2" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                </results>
              </test-suite>
            </results>
          </test-suite>
        </results>
      </test-suite>
      <test-suite name="C:\Program Files\NUnit 2.5.2\bin\net-2.0\tests/nunit.uiexception.tests.dll" executed="True" success="True" time="1.859" asserts="0">
        <results>
          <test-suite name="NUnit" executed="True" success="True" time="1.859" asserts="0">
            <results>
              <test-suite name="UiException" executed="True" success="True" time="1.813" asserts="0">
                <results>
                  <test-suite name="Tests" executed="True" success="True" time="1.766" asserts="0">
                    <results>
                      <test-suite name="CodeFormatters" executed="True" success="True" time="0.406" asserts="0">
                        <results>
                          <test-suite name="TestCodeFormatterCollection" executed="True" success="True" time="0.031" asserts="0">
                            <results>
                              <test-case name="NUnit.UiException.Tests.CodeFormatters.TestCodeFormatterCollection.Clear" executed="True" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.UiException.Tests.CodeFormatters.TestCodeFormatterCollection.ContainsFormatterFromExtension" executed="True" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.UiException.Tests.CodeFormatters.TestCodeFormatterCollection.Indexer_Can_Throw_UnknownExtensionException" executed="True" success="True" time="0.016" asserts="0" />
                              <test-case name="NUnit.UiException.Tests.CodeFormatters.TestCodeFormatterCollection.ItemIndexer_Can_Throw_NullExtensionException" executed="True" success="True" time="0.000" asserts="0" />
                              <test-case name="NUnit.UiException.Tests.CodeFormatters.TestCodeFormatterCollection.Register_Can_Throw_NullExtensionException" executed="True" success="True" time="0.000" asserts="0" />
                              <test-case name="NUnit.UiException.Tests.CodeFormatters.TestCodeFormatterCollection.Register_Can_Throw_NullFormatterException" executed="True" success="True" time="0.000" asserts="0" />
                              <test-case name="NUnit.UiException.Tests.CodeFormatters.TestCodeFormatterCollection.Register_Check_Extension_Case" executed="True" success="True" time="0.000" asserts="0" />
                              <test-case name="NUnit.UiException.Tests.CodeFormatters.TestCodeFormatterCollection.Register_Check_Extension_Is_Not_Empty" executed="True" success="True" time="0.000" asserts="0" />
                              <test-case name="NUnit.UiException.Tests.CodeFormatters.TestCodeFormatterCollection.Register_Check_Extension_Not_Contain_Dot_Character" executed="True" success="True" time="0.000" asserts="0" />
                              <test-case name="NUnit.UiException.Tests.CodeFormatters.TestCodeFormatterCollection.Register_Check_Multiple_Extension_Definition" executed="True" success="True" time="0.000" asserts="0" />
                              <test-case name="NUnit.UiException.Tests.CodeFormatters.TestCodeFormatterCollection.Remove" executed="True" success="True" time="0.000" asserts="4" />
                              <test-case name="NUnit.UiException.Tests.CodeFormatters.TestCodeFormatterCollection.Remove_Is_Not_Case_Sensitive" executed="True" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.UiException.Tests.CodeFormatters.TestCodeFormatterCollection.StringIndexer_Can_Throw_NullExtensionException" executed="True" success="True" time="0.000" asserts="0" />
                              <test-case name="NUnit.UiException.Tests.CodeFormatters.TestCodeFormatterCollection.Test_Default" executed="True" success="True" time="0.000" asserts="10" />
                            </results>
                          </test-suite>
                          <test-suite name="TestCSharpCodeFormatter" executed="True" success="True" time="0.047" asserts="0">
                            <results>
                              <test-case name="NUnit.UiException.Tests.CodeFormatters.TestCSharpCodeFormatter.Format_Can_Throw_CSharpNullException" executed="True" success="True" time="0.000" asserts="0" />
                              <test-case name="NUnit.UiException.Tests.CodeFormatters.TestCSharpCodeFormatter.Test_Conserve_Intermediary_Spaces" executed="True" success="True" time="0.031" asserts="9" />
                              <test-case name="NUnit.UiException.Tests.CodeFormatters.TestCSharpCodeFormatter.Test_Default" executed="True" success="True" time="0.000" asserts="4" />
                              <test-case name="NUnit.UiException.Tests.CodeFormatters.TestCSharpCodeFormatter.Test_Format" executed="True" success="True" time="0.016" asserts="1" />
                              <test-case name="NUnit.UiException.Tests.CodeFormatters.TestCSharpCodeFormatter.Test_Format_2" executed="True" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.UiException.Tests.CodeFormatters.TestCSharpCodeFormatter.Test_Format_3" executed="True" success="True" time="0.000" asserts="2" />
                              <test-case name="NUnit.UiException.Tests.CodeFormatters.TestCSharpCodeFormatter.Test_PreProcess" executed="True" success="True" time="0.000" asserts="3" />
                            </results>
                          </test-suite>
                          <test-suite name="TestFormattedCode" executed="True" success="True" time="0.047" asserts="0">
                            <results>
                              <test-case name="NUnit.UiException.Tests.CodeFormatters.TestFormattedCode.CheckData_Can_Throw_NullDataException" executed="True" success="True" time="0.000" asserts="0" />
                              <test-case name="NUnit.UiException.Tests.CodeFormatters.TestFormattedCode.CheckData_IndexArray_And_TagArray_Count_Must_Match" executed="True" success="True" time="0.016" asserts="0" />
                              <test-case name="NUnit.UiException.Tests.CodeFormatters.TestFormattedCode.CheckData_LineArray_Values_Must_Always_Grow_Up" executed="True" success="True" time="0.000" asserts="0" />
                              <test-case name="NUnit.UiException.Tests.CodeFormatters.TestFormattedCode.CheckData_LineArray_Values_Must_Be_In_IndexArray_Count" executed="True" success="True" time="0.000" asserts="0" />
                              <test-case name="NUnit.UiException.Tests.CodeFormatters.TestFormattedCode.Empty" executed="True" success="True" time="0.000" asserts="2" />
                              <test-case name="NUnit.UiException.Tests.CodeFormatters.TestFormattedCode.Test_ComplexCollection" executed="True" success="True" time="0.000" asserts="22" />
                              <test-case name="NUnit.UiException.Tests.CodeFormatters.TestFormattedCode.Test_Equals" executed="True" success="True" time="0.000" asserts="10" />
                              <test-case name="NUnit.UiException.Tests.CodeFormatters.TestFormattedCode.Test_MaxLength" executed="True" success="True" time="0.000" asserts="3" />
                              <test-case name="NUnit.UiException.Tests.CodeFormatters.TestFormattedCode.Test_SimpleCollection" executed="True" success="True" time="0.000" asserts="17" />
                            </results>
                          </test-suite>
                          <test-suite name="TestGeneralCodeFormatter" executed="True" success="True" time="0.094" asserts="0">
                            <results>
                              <test-case name="NUnit.UiException.Tests.CodeFormatters.TestGeneralCodeFormatter.All_Formatters_Have_Unique_Language_Value" executed="True" success="True" time="0.016" asserts="2" />
                              <test-case name="NUnit.UiException.Tests.CodeFormatters.TestGeneralCodeFormatter.All_Formatters_Should_Have_Overwrite_Behavior" executed="True" success="True" time="0.000" asserts="2" />
                              <test-case name="NUnit.UiException.Tests.CodeFormatters.TestGeneralCodeFormatter.All_Formatters_Should_PreProcess_Tab_Character" executed="True" success="True" time="0.000" asserts="2" />
                              <test-case name="NUnit.UiException.Tests.CodeFormatters.TestGeneralCodeFormatter.Any_Formatter_Should_Format_Any_Text" executed="True" success="True" time="0.031" asserts="6" />
                              <test-case name="NUnit.UiException.Tests.CodeFormatters.TestGeneralCodeFormatter.DefaultFormatter" executed="True" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.UiException.Tests.CodeFormatters.TestGeneralCodeFormatter.DefaultFormatter_Can_Throw_FormatterNullException" executed="True" success="True" time="0.000" asserts="0" />
                              <test-case name="NUnit.UiException.Tests.CodeFormatters.TestGeneralCodeFormatter.Format" executed="True" success="True" time="0.000" asserts="2" />
                              <test-case name="NUnit.UiException.Tests.CodeFormatters.TestGeneralCodeFormatter.Format_Can_Throw_CodeNullException" executed="True" success="True" time="0.000" asserts="0" />
                              <test-case name="NUnit.UiException.Tests.CodeFormatters.TestGeneralCodeFormatter.Format_Can_Throw_LanguageNameNullException" executed="True" success="True" time="0.000" asserts="0" />
                              <test-case name="NUnit.UiException.Tests.CodeFormatters.TestGeneralCodeFormatter.Format_Pick_Best_Formatter" executed="True" success="True" time="0.016" asserts="2" />
                              <test-case name="NUnit.UiException.Tests.CodeFormatters.TestGeneralCodeFormatter.FormatFromExtension_Can_Throw_CodeNullException" executed="True" success="True" time="0.000" asserts="0" />
                              <test-case name="NUnit.UiException.Tests.CodeFormatters.TestGeneralCodeFormatter.FormatFromExtension_Can_Throw_ExtensionNullException" executed="True" success="True" time="0.000" asserts="0" />
                              <test-case name="NUnit.UiException.Tests.CodeFormatters.TestGeneralCodeFormatter.GetFormatterFromExtension_Can_Throw_ExtensionNullException" executed="True" success="True" time="0.000" asserts="0" />
                              <test-case name="NUnit.UiException.Tests.CodeFormatters.TestGeneralCodeFormatter.GetFormatterFromLanguage_Can_Throw_LanguageNullException" executed="True" success="True" time="0.000" asserts="0" />
                              <test-case name="NUnit.UiException.Tests.CodeFormatters.TestGeneralCodeFormatter.GetFormatterFroms" executed="True" success="True" time="0.000" asserts="4" />
                              <test-case name="NUnit.UiException.Tests.CodeFormatters.TestGeneralCodeFormatter.LanguageFromExtension" executed="True" success="True" time="0.000" asserts="3" />
                              <test-case name="NUnit.UiException.Tests.CodeFormatters.TestGeneralCodeFormatter.Test_Default" executed="True" success="True" time="0.000" asserts="3" />
                            </results>
                          </test-suite>
                          <test-suite name="TestLexer" executed="True" success="True" time="0.016" asserts="0">
                            <results>
                              <test-case name="NUnit.UiException.Tests.CodeFormatters.TestLexer.Test_Default" executed="True" success="True" time="0.000" asserts="3" />
                              <test-case name="NUnit.UiException.Tests.CodeFormatters.TestLexer.Test_Dot_Character" executed="True" success="True" time="0.000" asserts="5" />
                              <test-case name="NUnit.UiException.Tests.CodeFormatters.TestLexer.Test_SetText_Throws_NullArgumentException" executed="True" success="True" time="0.000" asserts="0" />
                              <test-case name="NUnit.UiException.Tests.CodeFormatters.TestLexer.Test_Split_ColonCharacter" executed="True" success="True" time="0.000" asserts="20" />
                              <test-case name="NUnit.UiException.Tests.CodeFormatters.TestLexer.Test_Split_CommentC" executed="True" success="True" time="0.000" asserts="10" />
                              <test-case name="NUnit.UiException.Tests.CodeFormatters.TestLexer.Test_Split_CommentCpp" executed="True" success="True" time="0.000" asserts="5" />
                              <test-case name="NUnit.UiException.Tests.CodeFormatters.TestLexer.Test_Split_DoubleQuote" executed="True" success="True" time="0.000" asserts="19" />
                              <test-case name="NUnit.UiException.Tests.CodeFormatters.TestLexer.Test_Split_Equals" executed="True" success="True" time="0.000" asserts="5" />
                              <test-case name="NUnit.UiException.Tests.CodeFormatters.TestLexer.Test_Split_New_Line" executed="True" success="True" time="0.000" asserts="5" />
                              <test-case name="NUnit.UiException.Tests.CodeFormatters.TestLexer.Test_Split_NumberSign" executed="True" success="True" time="0.000" asserts="5" />
                              <test-case name="NUnit.UiException.Tests.CodeFormatters.TestLexer.Test_Split_SingleQuote" executed="True" success="True" time="0.000" asserts="5" />
                              <test-case name="NUnit.UiException.Tests.CodeFormatters.TestLexer.Test_Split_WhiteSpaces" executed="True" success="True" time="0.016" asserts="35" />
                              <test-case name="NUnit.UiException.Tests.CodeFormatters.TestLexer.Test_Split_Words" executed="True" success="True" time="0.000" asserts="10" />
                            </results>
                          </test-suite>
                          <test-suite name="TestPlainTextCodeFormatter" executed="True" success="True" time="0.000" asserts="0">
                            <results>
                              <test-case name="NUnit.UiException.Tests.CodeFormatters.TestPlainTextCodeFormatter.Format_Can_Throw_CodeNullException" executed="True" success="True" time="0.000" asserts="0" />
                              <test-case name="NUnit.UiException.Tests.CodeFormatters.TestPlainTextCodeFormatter.Format_HelloWorld" executed="True" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.UiException.Tests.CodeFormatters.TestPlainTextCodeFormatter.Format_Lines" executed="True" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.UiException.Tests.CodeFormatters.TestPlainTextCodeFormatter.Test_Language" executed="True" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.UiException.Tests.CodeFormatters.TestPlainTextCodeFormatter.Test_PreProcess" executed="True" success="True" time="0.000" asserts="3" />
                            </results>
                          </test-suite>
                          <test-suite name="TestToken" executed="True" success="True" time="0.016" asserts="0">
                            <results>
                              <test-case name="NUnit.UiException.Tests.CodeFormatters.TestToken.Test_Equals" executed="True" success="True" time="0.000" asserts="6" />
                            </results>
                          </test-suite>
                          <test-suite name="TestTokenClassifier" executed="True" success="True" time="0.031" asserts="0">
                            <results>
                              <test-case name="NUnit.UiException.Tests.CodeFormatters.TestTokenClassifier.test_AcceptToken" executed="True" success="True" time="0.000" asserts="60" />
                              <test-case name="NUnit.UiException.Tests.CodeFormatters.TestTokenClassifier.Test_Classification_Cases" executed="True" success="True" time="0.000" asserts="32" />
                              <test-case name="NUnit.UiException.Tests.CodeFormatters.TestTokenClassifier.Test_Classify" executed="True" success="True" time="0.016" asserts="60" />
                              <test-case name="NUnit.UiException.Tests.CodeFormatters.TestTokenClassifier.Test_Classify_As_Keyword" executed="True" success="True" time="0.000" asserts="81" />
                              <test-case name="NUnit.UiException.Tests.CodeFormatters.TestTokenClassifier.Test_Classify_Can_Throw_ArgumentNullException" executed="True" success="True" time="0.000" asserts="0" />
                              <test-case name="NUnit.UiException.Tests.CodeFormatters.TestTokenClassifier.Test_Classify_Throw_NullArgException" executed="True" success="True" time="0.000" asserts="0" />
                              <test-case name="NUnit.UiException.Tests.CodeFormatters.TestTokenClassifier.Test_Escaping_sequence" executed="True" success="True" time="0.016" asserts="61" />
                              <test-case name="NUnit.UiException.Tests.CodeFormatters.TestTokenClassifier.Test_NewState" executed="True" success="True" time="0.000" asserts="40" />
                              <test-case name="NUnit.UiException.Tests.CodeFormatters.TestTokenClassifier.Test_Reset" executed="True" success="True" time="0.000" asserts="1" />
                            </results>
                          </test-suite>
                          <test-suite name="TestTokenDictionary" executed="True" success="True" time="0.031" asserts="0">
                            <results>
                              <test-case name="NUnit.UiException.Tests.CodeFormatters.TestTokenDictionary.Add_can_throw_AlreadyDefinedException" executed="True" success="True" time="0.000" asserts="2" />
                              <test-case name="NUnit.UiException.Tests.CodeFormatters.TestTokenDictionary.Add_can_throw_EmptySequenceException" executed="True" success="True" time="0.000" asserts="2" />
                              <test-case name="NUnit.UiException.Tests.CodeFormatters.TestTokenDictionary.Add_can_throw_InvalidSortException" executed="True" success="True" time="0.000" asserts="2" />
                              <test-case name="NUnit.UiException.Tests.CodeFormatters.TestTokenDictionary.Add_can_throw_NullValueException" executed="True" success="True" time="0.000" asserts="2" />
                              <test-case name="NUnit.UiException.Tests.CodeFormatters.TestTokenDictionary.add_token" executed="True" success="True" time="0.000" asserts="3" />
                              <test-case name="NUnit.UiException.Tests.CodeFormatters.TestTokenDictionary.PopulateTokenStartingWith" executed="True" success="True" time="0.000" asserts="14" />
                              <test-case name="NUnit.UiException.Tests.CodeFormatters.TestTokenDictionary.PopulateTokenStartingWith_can_throw_NullOutputException" executed="True" success="True" time="0.000" asserts="2" />
                              <test-case name="NUnit.UiException.Tests.CodeFormatters.TestTokenDictionary.PopulateTokenStartingWith_can_throw_NullStarterException" executed="True" success="True" time="0.000" asserts="2" />
                              <test-case name="NUnit.UiException.Tests.CodeFormatters.TestTokenDictionary.test_default" executed="True" success="True" time="0.000" asserts="3" />
                              <test-case name="NUnit.UiException.Tests.CodeFormatters.TestTokenDictionary.TryMatch_can_throw_NullPredictionException" executed="True" success="True" time="0.000" asserts="2" />
                              <test-case name="NUnit.UiException.Tests.CodeFormatters.TestTokenDictionary.TryMatch_can_throw_NullTextException" executed="True" success="True" time="0.000" asserts="2" />
                              <test-case name="NUnit.UiException.Tests.CodeFormatters.TestTokenDictionary.TryMatch_no_prediction" executed="True" success="True" time="0.000" asserts="146" />
                              <test-case name="NUnit.UiException.Tests.CodeFormatters.TestTokenDictionary.TryMatch_prediction" executed="True" success="True" time="0.000" asserts="19" />
                            </results>
                          </test-suite>
                        </results>
                      </test-suite>
                      <test-suite name="Controls" executed="True" success="True" time="1.156" asserts="0">
                        <results>
                          <test-suite name="TestCodeBox" executed="True" success="True" time="0.266" asserts="0">
                            <results>
                              <test-case name="NUnit.UiException.Tests.Controls.TestCodeBox.Can_Disable_ShowCurrentLine" executed="True" success="True" time="0.203" asserts="3" />
                              <test-case name="NUnit.UiException.Tests.Controls.TestCodeBox.Can_Set_Back_And_Fore_Colors" executed="True" success="True" time="0.016" asserts="2" />
                              <test-case name="NUnit.UiException.Tests.Controls.TestCodeBox.Changing_Font_Causes_Reformatting" executed="True" success="True" time="0.000" asserts="24" />
                              <test-case name="NUnit.UiException.Tests.Controls.TestCodeBox.Changing_Language_Causes_Reformatting" executed="True" success="True" time="0.016" asserts="34" />
                              <test-case name="NUnit.UiException.Tests.Controls.TestCodeBox.CurrentLine" executed="True" success="True" time="0.000" asserts="30" />
                              <test-case name="NUnit.UiException.Tests.Controls.TestCodeBox.DefaultState" executed="True" success="True" time="0.000" asserts="12" />
                              <test-case name="NUnit.UiException.Tests.Controls.TestCodeBox.Format_Text_With_Language" executed="True" success="True" time="0.016" asserts="25" />
                              <test-case name="NUnit.UiException.Tests.Controls.TestCodeBox.OnPaint" executed="True" success="True" time="0.000" asserts="19" />
                            </results>
                          </test-suite>
                          <test-suite name="TestCodeRenderingContext" executed="True" success="True" time="0.016" asserts="0">
                            <results>
                              <test-case name="NUnit.UiException.Tests.Controls.TestCodeRenderingContext.Can_Change_Colors" executed="True" success="True" time="0.016" asserts="43" />
                              <test-case name="NUnit.UiException.Tests.Controls.TestCodeRenderingContext.DefaultState" executed="True" success="True" time="0.000" asserts="39" />
                            </results>
                          </test-suite>
                          <test-suite name="TestDefaultCodeRenderer" executed="True" success="True" time="0.031" asserts="0">
                            <results>
                              <test-case name="NUnit.UiException.Tests.Controls.TestDefaultCodeRenderer.DrawToGraphics_Can_Raise_ArgumentNullException" executed="True" success="True" time="0.016" asserts="2" />
                              <test-case name="NUnit.UiException.Tests.Controls.TestDefaultCodeRenderer.GetDocumentSize" executed="True" success="True" time="0.000" asserts="4" />
                              <test-case name="NUnit.UiException.Tests.Controls.TestDefaultCodeRenderer.GetDocumentSize_Can_Raise_ArgumentNullException" executed="True" success="True" time="0.000" asserts="3" />
                              <test-case name="NUnit.UiException.Tests.Controls.TestDefaultCodeRenderer.LineIndexToYCoordinate" executed="True" success="True" time="0.000" asserts="4" />
                              <test-case name="NUnit.UiException.Tests.Controls.TestDefaultCodeRenderer.LineIndexToYCoordinate_Can_Raise_ArgumentNullException" executed="True" success="True" time="0.016" asserts="2" />
                              <test-case name="NUnit.UiException.Tests.Controls.TestDefaultCodeRenderer.ViewportLines" executed="True" success="True" time="0.000" asserts="32" />
                            </results>
                          </test-suite>
                          <test-suite name="TestDefaultErrorListRenderer" executed="True" success="True" time="0.250" asserts="0">
                            <results>
                              <test-case name="NUnit.UiException.Tests.Controls.TestDefaultErrorListRenderer.DefaultState" executed="True" success="True" time="0.016" asserts="3" />
                              <test-case name="NUnit.UiException.Tests.Controls.TestDefaultErrorListRenderer.DrawToGraphics_Can_Throw_ArgumentNullException" executed="True" success="True" time="0.000" asserts="2" />
                              <test-case name="NUnit.UiException.Tests.Controls.TestDefaultErrorListRenderer.GetDocumentSize" executed="True" success="True" time="0.016" asserts="5" />
                              <test-case name="NUnit.UiException.Tests.Controls.TestDefaultErrorListRenderer.IsDirty" executed="True" success="True" time="0.203" asserts="7" />
                              <test-case name="NUnit.UiException.Tests.Controls.TestDefaultErrorListRenderer.ItemAt" executed="True" success="True" time="0.000" asserts="7" />
                              <test-case name="NUnit.UiException.Tests.Controls.TestDefaultErrorListRenderer.MeasureItem" executed="True" success="True" time="0.000" asserts="6" />
                            </results>
                          </test-suite>
                          <test-suite name="TestErrorBrowser" executed="True" success="True" time="0.219" asserts="0">
                            <results>
                              <test-case name="NUnit.UiException.Tests.Controls.TestErrorBrowser.Can_Raise_ErrorSourceChanged" executed="True" success="True" time="0.141" asserts="3" />
                              <test-case name="NUnit.UiException.Tests.Controls.TestErrorBrowser.Cannot_Register_Null_Display" executed="True" success="True" time="0.016" asserts="0" />
                              <test-case name="NUnit.UiException.Tests.Controls.TestErrorBrowser.DefaultState" executed="True" success="True" time="0.000" asserts="10" />
                              <test-case name="NUnit.UiException.Tests.Controls.TestErrorBrowser.ErrorDisplay_Plugins_life_cycle_events" executed="True" success="True" time="0.047" asserts="55" />
                              <test-case name="NUnit.UiException.Tests.Controls.TestErrorBrowser.LayoutPanel_Auto_Resizes_When_Parent_Sizes_Change" executed="True" success="True" time="0.000" asserts="4" />
                            </results>
                          </test-suite>
                          <test-suite name="TestErrorList" executed="True" success="True" time="0.047" asserts="0">
                            <results>
                              <test-case name="NUnit.UiException.Tests.Controls.TestErrorList.AutoSelectFirstItem" executed="True" success="True" time="0.000" asserts="4" />
                              <test-case name="NUnit.UiException.Tests.Controls.TestErrorList.CanReportInvalidItems" executed="True" success="True" time="0.000" asserts="3" />
                              <test-case name="NUnit.UiException.Tests.Controls.TestErrorList.Click_Can_Select_Item" executed="True" success="True" time="0.000" asserts="23" />
                              <test-case name="NUnit.UiException.Tests.Controls.TestErrorList.CurrentSelection" executed="True" success="True" time="0.000" asserts="10" />
                              <test-case name="NUnit.UiException.Tests.Controls.TestErrorList.DefaultState" executed="True" success="True" time="0.000" asserts="7" />
                              <test-case name="NUnit.UiException.Tests.Controls.TestErrorList.DrawItem" executed="True" success="True" time="0.016" asserts="39" />
                              <test-case name="NUnit.UiException.Tests.Controls.TestErrorList.Invoking_DrawToGraphics" executed="True" success="True" time="0.000" asserts="22" />
                              <test-case name="NUnit.UiException.Tests.Controls.TestErrorList.ListOrderPolicy" executed="True" success="True" time="0.000" asserts="22" />
                              <test-case name="NUnit.UiException.Tests.Controls.TestErrorList.Populate_StackTraceSource" executed="True" success="True" time="0.000" asserts="11" />
                            </results>
                          </test-suite>
                          <test-suite name="TestErrorPanelLayout" executed="True" success="True" time="0.016" asserts="0">
                            <results>
                              <test-case name="NUnit.UiException.Tests.Controls.TestErrorPanelLayout.Can_Layout_Child_Controls_When_Size_Changed" executed="True" success="True" time="0.000" asserts="16" />
                              <test-case name="NUnit.UiException.Tests.Controls.TestErrorPanelLayout.DefaultState" executed="True" success="True" time="0.000" asserts="13" />
                              <test-case name="NUnit.UiException.Tests.Controls.TestErrorPanelLayout.Setting_Content" executed="True" success="True" time="0.000" asserts="21" />
                              <test-case name="NUnit.UiException.Tests.Controls.TestErrorPanelLayout.Setting_Toolbar" executed="True" success="True" time="0.000" asserts="14" />
                            </results>
                          </test-suite>
                          <test-suite name="TestErrorToolbar" executed="True" success="True" time="0.109" asserts="0">
                            <results>
                              <test-case name="NUnit.UiException.Tests.Controls.TestErrorToolbar.Cannot_Register_Null_Display" executed="True" success="True" time="0.000" asserts="2" />
                              <test-case name="NUnit.UiException.Tests.Controls.TestErrorToolbar.Cannot_Select_UnRegistered_Display" executed="True" success="True" time="0.016" asserts="0" />
                              <test-case name="NUnit.UiException.Tests.Controls.TestErrorToolbar.DefaultState" executed="True" success="True" time="0.000" asserts="8" />
                              <test-case name="NUnit.UiException.Tests.Controls.TestErrorToolbar.NewStripButton" executed="True" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.UiException.Tests.Controls.TestErrorToolbar.PluginItem_Click_Raises_SelectedRenderedChanged" executed="True" success="True" time="0.031" asserts="4" />
                              <test-case name="NUnit.UiException.Tests.Controls.TestErrorToolbar.Registering_displays_adds_ToolStripItem" executed="True" success="True" time="0.047" asserts="30" />
                              <test-case name="NUnit.UiException.Tests.Controls.TestErrorToolbar.SelectedDisplay" executed="True" success="True" time="0.000" asserts="9" />
                              <test-case name="NUnit.UiException.Tests.Controls.TestErrorToolbar.Set_Or_Unset_Check_Flag_On_Selection" executed="True" success="True" time="0.000" asserts="6" />
                            </results>
                          </test-suite>
                          <test-suite name="TestSourceCodeDisplay" executed="True" success="True" time="0.063" asserts="0">
                            <results>
                              <test-case name="NUnit.UiException.Tests.Controls.TestSourceCodeDisplay.CanReportFileException" executed="True" success="True" time="0.016" asserts="2" />
                              <test-case name="NUnit.UiException.Tests.Controls.TestSourceCodeDisplay.DefaultState" executed="True" success="True" time="0.000" asserts="15" />
                              <test-case name="NUnit.UiException.Tests.Controls.TestSourceCodeDisplay.ListOrderPolicy" executed="True" success="True" time="0.000" asserts="14" />
                              <test-case name="NUnit.UiException.Tests.Controls.TestSourceCodeDisplay.SelectedItemChanged" executed="True" success="True" time="0.000" asserts="26" />
                              <test-case name="NUnit.UiException.Tests.Controls.TestSourceCodeDisplay.SplitOrientation" executed="True" success="True" time="0.016" asserts="4" />
                              <test-case name="NUnit.UiException.Tests.Controls.TestSourceCodeDisplay.SplitterDistance" executed="True" success="True" time="0.016" asserts="2" />
                            </results>
                          </test-suite>
                          <test-suite name="TestSplitterBox" executed="True" success="True" time="0.047" asserts="0">
                            <results>
                              <test-case name="NUnit.UiException.Tests.Controls.TestSplitterBox.CanChangeDefaultControl1" executed="True" success="True" time="0.000" asserts="48" />
                              <test-case name="NUnit.UiException.Tests.Controls.TestSplitterBox.CanChangeDefaultControl2" executed="True" success="True" time="0.000" asserts="48" />
                              <test-case name="NUnit.UiException.Tests.Controls.TestSplitterBox.ChangingSizeInvokeDoLayout" executed="True" success="True" time="0.000" asserts="28" />
                              <test-case name="NUnit.UiException.Tests.Controls.TestSplitterBox.CollapseControl" executed="True" success="True" time="0.000" asserts="82" />
                              <test-case name="NUnit.UiException.Tests.Controls.TestSplitterBox.DefaultState" executed="True" success="True" time="0.000" asserts="51" />
                              <test-case name="NUnit.UiException.Tests.Controls.TestSplitterBox.MouseActions" executed="True" success="True" time="0.000" asserts="6" />
                              <test-case name="NUnit.UiException.Tests.Controls.TestSplitterBox.OrientationAffectsLayout" executed="True" success="True" time="0.000" asserts="25" />
                              <test-case name="NUnit.UiException.Tests.Controls.TestSplitterBox.PointToSplit" executed="True" success="True" time="0.000" asserts="75" />
                              <test-case name="NUnit.UiException.Tests.Controls.TestSplitterBox.SplitterDistance" executed="True" success="True" time="0.000" asserts="81" />
                            </results>
                          </test-suite>
                          <test-suite name="TestStackTraceDisplay" executed="True" success="True" time="0.063" asserts="0">
                            <results>
                              <test-case name="NUnit.UiException.Tests.Controls.TestStackTraceDisplay.CopyToClipBoard" executed="True" success="True" time="0.047" asserts="4">
                                <properties>
                                  <property name="APARTMENT_STATE" value="STA" />
                                </properties>
                              </test-case>
                              <test-case name="NUnit.UiException.Tests.Controls.TestStackTraceDisplay.DefaultState" executed="True" success="True" time="0.000" asserts="10" />
                              <test-case name="NUnit.UiException.Tests.Controls.TestStackTraceDisplay.FeedingDisplayWithGarbageDoesNotMakeItCrash" executed="True" success="True" time="0.000" asserts="1" />
                              <test-case name="NUnit.UiException.Tests.Controls.TestStackTraceDisplay.OnStackTraceChanged" executed="True" success="True" time="0.000" asserts="3" />
                            </results>
                          </test-suite>
                        </results>
                      </test-suite>
                      <test-suite name="StackTraceAnalyzers" executed="True" success="True" time="0.063" asserts="0">
                        <results>
                          <test-suite name="TestFunctionParser" executed="True" success="True" time="0.000" asserts="0">
                            <results>
                              <test-case name="NUnit.UiException.Tests.StackTraceAnalyzers.TestFunctionParser.Test_Ability_To_Parse_Regular_Function_Values" executed="True" success="True" time="0.000" asserts="8" />
                              <test-case name="NUnit.UiException.Tests.StackTraceAnalyzers.TestFunctionParser.Test_Fail_To_Parse_Odd_Function_Values" executed="True" success="True" time="0.000" asserts="5" />
                              <test-case name="NUnit.UiException.Tests.StackTraceAnalyzers.TestFunctionParser.Test_IErrorParser_Can_Throw_ArgsNullException" executed="True" success="True" time="0.000" asserts="10" />
                              <test-case name="NUnit.UiException.Tests.StackTraceAnalyzers.TestFunctionParser.Test_IErrorParser_Can_Throw_ParserNullException" executed="True" success="True" time="0.000" asserts="10" />
                            </results>
                          </test-suite>
                          <test-suite name="TestIErrorParser" executed="True" success="True" time="0.000" asserts="0">
                            <results>
                              <test-case name="NUnit.UiException.Tests.StackTraceAnalyzers.TestIErrorParser.Test_IErrorParser_Can_Throw_ArgsNullException" executed="True" success="True" time="0.000" asserts="10" />
                              <test-case name="NUnit.UiException.Tests.StackTraceAnalyzers.TestIErrorParser.Test_IErrorParser_Can_Throw_ParserNullException" executed="True" success="True" time="0.000" asserts="10" />
                            </results>
                          </test-suite>
                          <test-suite name="TestLineNumberParser" executed="True" success="True" time="0.000" asserts="0">
                            <results>
                              <test-case name="NUnit.UiException.Tests.StackTraceAnalyzers.TestLineNumberParser.Test_Ability_To_Parse_Regular_Line_Number_Values" executed="True" success="True" time="0.000" asserts="10" />
                              <test-case name="NUnit.UiException.Tests.StackTraceAnalyzers.TestLineNumberParser.Test_Ability_To_Reject_Odd_Line_Number_Values" executed="True" success="True" time="0.000" asserts="5" />
                              <test-case name="NUnit.UiException.Tests.StackTraceAnalyzers.TestLineNumberParser.Test_IErrorParser_Can_Throw_ArgsNullException" executed="True" success="True" time="0.000" asserts="10" />
                              <test-case name="NUnit.UiException.Tests.StackTraceAnalyzers.TestLineNumberParser.Test_IErrorParser_Can_Throw_ParserNullException" executed="True" success="True" time="0.000" asserts="10" />
                            </results>
                          </test-suite>
                          <test-suite name="TestPathParser" executed="True" success="True" time="0.000" asserts="0">
                            <results>
                              <test-case name="NUnit.UiException.Tests.StackTraceAnalyzers.TestPathParser.Test_Ability_To_Handle_Unix_Path_Like_Values" executed="True" success="True" time="0.000" asserts="4" />
                              <test-case name="NUnit.UiException.Tests.StackTraceAnalyzers.TestPathParser.Test_Ability_To_Handle_Windows_Path_Like_Values" executed="True" success="True" time="0.000" asserts="4" />
                              <test-case name="NUnit.UiException.Tests.StackTraceAnalyzers.TestPathParser.Test_IErrorParser_Can_Throw_ArgsNullException" executed="True" success="True" time="0.000" asserts="12" />
                              <test-case name="NUnit.UiException.Tests.StackTraceAnalyzers.TestPathParser.Test_IErrorParser_Can_Throw_ParserNullException" executed="True" success="True" time="0.000" asserts="12" />
                            </results>
                          </test-suite>
                          <test-suite name="TestUnixPathParser" executed="True" success="True" time="0.000" asserts="0">
                            <results>
                              <test-case name="NUnit.UiException.Tests.StackTraceAnalyzers.TestUnixPathParser.Test_Ability_To_Parse_Regular_Unix_Like_Path_Values" executed="True" success="True" time="0.000" asserts="21" />
                              <test-case name="NUnit.UiException.Tests.StackTraceAnalyzers.TestUnixPathParser.Test_IErrorParser_Can_Throw_ArgsNullException" executed="True" success="True" time="0.000" asserts="11" />
                              <test-case name="NUnit.UiException.Tests.StackTraceAnalyzers.TestUnixPathParser.Test_IErrorParser_Can_Throw_ParserNullException" executed="True" success="True" time="0.000" asserts="11" />
                              <test-case name="NUnit.UiException.Tests.StackTraceAnalyzers.TestUnixPathParser.Test_Inability_To_Parse_Non_Unix_Like_Path_Values" executed="True" success="True" time="0.000" asserts="6" />
                            </results>
                          </test-suite>
                          <test-suite name="TestWindowsPathParser" executed="True" success="True" time="0.000" asserts="0">
                            <results>
                              <test-case name="NUnit.UiException.Tests.StackTraceAnalyzers.TestWindowsPathParser.Test_Ability_To_Parse_Regular_Windows_Path" executed="True" success="True" time="0.000" asserts="21" />
                              <test-case name="NUnit.UiException.Tests.StackTraceAnalyzers.TestWindowsPathParser.Test_IErrorParser_Can_Throw_ArgsNullException" executed="True" success="True" time="0.000" asserts="11" />
                              <test-case name="NUnit.UiException.Tests.StackTraceAnalyzers.TestWindowsPathParser.Test_IErrorParser_Can_Throw_ParserNullException" executed="True" success="True" time="0.000" asserts="11" />
                              <test-case name="NUnit.UiException.Tests.StackTraceAnalyzers.TestWindowsPathParser.Test_Inability_To_Parse_Non_Windows_Like_Path_Values" executed="True" success="True" time="0.000" asserts="6" />
                            </results>
                          </test-suite>
                        </results>
                      </test-suite>
                      <test-suite name="TestDefaultTextManager" executed="True" success="True" time="0.000" asserts="0">
                        <results>
                          <test-case name="NUnit.UiException.Tests.TestDefaultTextManager.Test_CodeBlockCollection" executed="True" success="True" time="0.000" asserts="15" />
                          <test-case name="NUnit.UiException.Tests.TestDefaultTextManager.Test_Default" executed="True" success="True" time="0.000" asserts="3" />
                          <test-case name="NUnit.UiException.Tests.TestDefaultTextManager.Test_MaxLength" executed="True" success="True" time="0.000" asserts="3" />
                        </results>
                      </test-suite>
                      <test-suite name="TestErrorItem" executed="True" success="True" time="0.047" asserts="0">
                        <results>
                          <test-case name="NUnit.UiException.Tests.TestErrorItem.Can_Set_Properties" executed="True" success="True" time="0.000" asserts="10" />
                          <test-case name="NUnit.UiException.Tests.TestErrorItem.Ctor_2" executed="True" success="True" time="0.000" asserts="10" />
                          <test-case name="NUnit.UiException.Tests.TestErrorItem.Ctor_Throws_NullPathException" executed="True" success="True" time="0.031" asserts="0" />
                          <test-case name="NUnit.UiException.Tests.TestErrorItem.Ctor_With_Line_0" executed="True" success="True" time="0.000" asserts="0" />
                          <test-case name="NUnit.UiException.Tests.TestErrorItem.ReadFile" executed="True" success="True" time="0.000" asserts="2" />
                          <test-case name="NUnit.UiException.Tests.TestErrorItem.ReadFile_Throws_FileNotExistException" executed="True" success="True" time="0.000" asserts="0" />
                          <test-case name="NUnit.UiException.Tests.TestErrorItem.Test_Equals" executed="True" success="True" time="0.000" asserts="8" />
                          <test-case name="NUnit.UiException.Tests.TestErrorItem.Test_FileExtension" executed="True" success="True" time="0.000" asserts="5" />
                          <test-case name="NUnit.UiException.Tests.TestErrorItem.Test_MethodName" executed="True" success="True" time="0.000" asserts="15" />
                        </results>
                      </test-suite>
                      <test-suite name="TestErrorItemCollection" executed="True" success="True" time="0.031" asserts="0">
                        <results>
                          <test-case name="NUnit.UiException.Tests.TestErrorItemCollection.Test_Add_Throws_NullItemException" executed="True" success="True" time="0.016" asserts="0" />
                          <test-case name="NUnit.UiException.Tests.TestErrorItemCollection.Test_Clear" executed="True" success="True" time="0.000" asserts="2" />
                          <test-case name="NUnit.UiException.Tests.TestErrorItemCollection.Test_Contains" executed="True" success="True" time="0.016" asserts="3" />
                          <test-case name="NUnit.UiException.Tests.TestErrorItemCollection.Test_TraceItems" executed="True" success="True" time="0.000" asserts="7" />
                        </results>
                      </test-suite>
                      <test-suite name="TestPaintLineLocation" executed="True" success="True" time="0.016" asserts="0">
                        <results>
                          <test-case name="NUnit.UiException.Tests.TestPaintLineLocation.Test_Equals" executed="True" success="True" time="0.000" asserts="8" />
                          <test-case name="NUnit.UiException.Tests.TestPaintLineLocation.Test_PaintLineLocation" executed="True" success="True" time="0.000" asserts="3" />
                          <test-case name="NUnit.UiException.Tests.TestPaintLineLocation.Test_SetText_Throws_NullTextException" executed="True" success="True" time="0.000" asserts="0" />
                        </results>
                      </test-suite>
                      <test-suite name="TestStackTraceParser" executed="True" success="True" time="0.016" asserts="0">
                        <results>
                          <test-case name="NUnit.UiException.Tests.TestStackTraceParser.Test_Ability_To_Handle_Different_Path_System_Syntaxes" executed="True" success="True" time="0.000" asserts="3" />
                          <test-case name="NUnit.UiException.Tests.TestStackTraceParser.Test_Ability_To_Handle_Files_With_Unknown_Extension" executed="True" success="True" time="0.000" asserts="2" />
                          <test-case name="NUnit.UiException.Tests.TestStackTraceParser.Test_Analysis_Does_Not_Depend_Upon_File_Extension" executed="True" success="True" time="0.000" asserts="2" />
                          <test-case name="NUnit.UiException.Tests.TestStackTraceParser.Test_Default" executed="True" success="True" time="0.000" asserts="2" />
                          <test-case name="NUnit.UiException.Tests.TestStackTraceParser.Test_English_Stack" executed="True" success="True" time="0.000" asserts="2" />
                          <test-case name="NUnit.UiException.Tests.TestStackTraceParser.Test_Missing_Line_Number" executed="True" success="True" time="0.000" asserts="2" />
                          <test-case name="NUnit.UiException.Tests.TestStackTraceParser.Test_Parse" executed="True" success="True" time="0.000" asserts="3" />
                          <test-case name="NUnit.UiException.Tests.TestStackTraceParser.Test_Parse_MultipleExtension" executed="True" success="True" time="0.000" asserts="6" />
                          <test-case name="NUnit.UiException.Tests.TestStackTraceParser.Test_Parse_Null" executed="True" success="True" time="0.000" asserts="0" />
                          <test-case name="NUnit.UiException.Tests.TestStackTraceParser.Test_Parse_With_Real_Life_Samples" executed="True" success="True" time="0.000" asserts="5" />
                          <test-case name="NUnit.UiException.Tests.TestStackTraceParser.Test_Trace_When_Missing_File" executed="True" success="True" time="0.000" asserts="5" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                </results>
              </test-suite>
            </results>
          </test-suite>
        </results>
      </test-suite>
      <test-suite name="C:\Program Files\NUnit 2.5.2\bin\net-2.0\tests/nunit.uikit.tests.dll" executed="True" success="True" time="9.125" asserts="0">
        <results>
          <test-suite name="NUnit" executed="True" success="True" time="9.094" asserts="0">
            <results>
              <test-suite name="UiKit" executed="True" success="True" time="9.078" asserts="0">
                <results>
                  <test-suite name="Tests" executed="True" success="True" time="9.047" asserts="0">
                    <results>
                      <test-suite name="AddConfigurationDialogTests" executed="True" success="True" time="0.594" asserts="0">
                        <results>
                          <test-case name="NUnit.UiKit.Tests.AddConfigurationDialogTests.CheckComboBox" executed="True" success="True" time="0.297" asserts="5" />
                          <test-case name="NUnit.UiKit.Tests.AddConfigurationDialogTests.CheckForControls" executed="True" success="True" time="0.000" asserts="0" />
                          <test-case name="NUnit.UiKit.Tests.AddConfigurationDialogTests.CheckTextBox" executed="True" success="True" time="0.016" asserts="1" />
                          <test-case name="NUnit.UiKit.Tests.AddConfigurationDialogTests.TestComplexEntry" executed="True" success="True" time="0.219" asserts="2" />
                          <test-case name="NUnit.UiKit.Tests.AddConfigurationDialogTests.TestSimpleEntry" executed="True" success="True" time="0.031" asserts="2" />
                        </results>
                      </test-suite>
                      <test-suite name="ErrorDisplayTests" executed="True" success="True" time="0.078" asserts="0">
                        <results>
                          <test-case name="NUnit.UiKit.Tests.ErrorDisplayTests.ControlsArePositionedCorrectly" executed="True" success="True" time="0.000" asserts="0" />
                          <test-case name="NUnit.UiKit.Tests.ErrorDisplayTests.ControlsExist" executed="True" success="True" time="0.000" asserts="0" />
                        </results>
                      </test-suite>
                      <test-suite name="LongRunningOperationDisplayTests" executed="True" success="True" time="0.063" asserts="0">
                        <results>
                          <test-case name="NUnit.UiKit.Tests.LongRunningOperationDisplayTests.CreateDisplay" executed="True" success="True" time="0.047" asserts="2" />
                        </results>
                      </test-suite>
                      <test-suite name="ProgressBarTests" executed="True" success="True" time="0.203" asserts="0">
                        <results>
                          <test-case name="NUnit.UiKit.Tests.ProgressBarTests.TestProgressDisplay" executed="True" success="True" time="0.203" asserts="5" />
                        </results>
                      </test-suite>
                      <test-suite name="RecentFileMenuHandlerTests" executed="True" success="True" time="0.031" asserts="0">
                        <results>
                          <test-case name="NUnit.UiKit.Tests.RecentFileMenuHandlerTests.DisableOnLoadWhenEmpty" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.UiKit.Tests.RecentFileMenuHandlerTests.EnableOnLoadWhenNotEmpty" executed="True" success="True" time="0.016" asserts="1" />
                          <test-case name="NUnit.UiKit.Tests.RecentFileMenuHandlerTests.LoadMenuItems" executed="True" success="True" time="0.000" asserts="2" />
                        </results>
                      </test-suite>
                      <test-suite name="SimpleTextDisplayTests" executed="True" success="True" time="0.547" asserts="0">
                        <results>
                          <test-case name="NUnit.UiKit.Tests.SimpleTextDisplayTests.AppendText_AfterCreation" executed="True" success="True" time="0.031" asserts="7" />
                          <test-case name="NUnit.UiKit.Tests.SimpleTextDisplayTests.AppendText_BeforeAndAfterCreation" executed="True" success="True" time="0.000" asserts="2" />
                          <test-case name="NUnit.UiKit.Tests.SimpleTextDisplayTests.AppendText_BeforeCreation" executed="True" success="True" time="0.000" asserts="2" />
                          <test-case name="NUnit.UiKit.Tests.SimpleTextDisplayTests.ClearText_AfterCreation" executed="True" success="True" time="0.000" asserts="2" />
                          <test-case name="NUnit.UiKit.Tests.SimpleTextDisplayTests.ClearText_BeforeCreation" executed="True" success="True" time="0.000" asserts="2" />
                          <test-case name="NUnit.UiKit.Tests.SimpleTextDisplayTests.SetText_AfterCreation" executed="True" success="True" time="0.000" asserts="2" />
                          <test-case name="NUnit.UiKit.Tests.SimpleTextDisplayTests.SetText_BeforeCreation" executed="True" success="True" time="0.000" asserts="4" />
                          <test-case name="NUnit.UiKit.Tests.SimpleTextDisplayTests.StressTest" executed="True" success="True" time="0.500" asserts="2" />
                        </results>
                      </test-suite>
                      <test-suite name="StatusBarTests" executed="True" success="True" time="0.875" asserts="0">
                        <results>
                          <test-case name="NUnit.UiKit.Tests.StatusBarTests.TestConstruction" executed="True" success="True" time="0.281" asserts="5" />
                          <test-case name="NUnit.UiKit.Tests.StatusBarTests.TestFinalDisplay" executed="True" success="True" time="0.234" asserts="5" />
                          <test-case name="NUnit.UiKit.Tests.StatusBarTests.TestInitialization" executed="True" success="True" time="0.156" asserts="10" />
                          <test-case name="NUnit.UiKit.Tests.StatusBarTests.TestProgressDisplay" executed="True" success="True" time="0.188" asserts="5" />
                        </results>
                      </test-suite>
                      <test-suite name="TestSuiteTreeNodeTests" executed="True" success="True" time="0.250" asserts="0">
                        <results>
                          <test-case name="NUnit.UiKit.Tests.TestSuiteTreeNodeTests.ClearNestedResults" executed="True" success="True" time="0.063" asserts="8" />
                          <test-case name="NUnit.UiKit.Tests.TestSuiteTreeNodeTests.ClearResult" executed="True" success="True" time="0.016" asserts="5" />
                          <test-case name="NUnit.UiKit.Tests.TestSuiteTreeNodeTests.ConstructFromTestInfo" executed="True" success="True" time="0.016" asserts="6" />
                          <test-case name="NUnit.UiKit.Tests.TestSuiteTreeNodeTests.ResultNotSet" executed="True" success="True" time="0.016" asserts="2" />
                          <test-case name="NUnit.UiKit.Tests.TestSuiteTreeNodeTests.SetResult_Failure" executed="True" success="True" time="0.016" asserts="3" />
                          <test-case name="NUnit.UiKit.Tests.TestSuiteTreeNodeTests.SetResult_Ignore" executed="True" success="True" time="0.016" asserts="4" />
                          <test-case name="NUnit.UiKit.Tests.TestSuiteTreeNodeTests.SetResult_Inconclusive" executed="True" success="True" time="0.031" asserts="4" />
                          <test-case name="NUnit.UiKit.Tests.TestSuiteTreeNodeTests.SetResult_Skipped" executed="True" success="True" time="0.016" asserts="3" />
                          <test-case name="NUnit.UiKit.Tests.TestSuiteTreeNodeTests.SetResult_Success" executed="True" success="True" time="0.016" asserts="3" />
                        </results>
                      </test-suite>
                      <test-suite name="TestSuiteTreeViewReloadTests" executed="True" success="True" time="3.594" asserts="0">
                        <results>
                          <test-case name="NUnit.UiKit.Tests.TestSuiteTreeViewReloadTests.CanReloadAfterChangingOrder" executed="True" success="True" time="0.797" asserts="103" />
                          <test-case name="NUnit.UiKit.Tests.TestSuiteTreeViewReloadTests.CanReloadAfterDeletingBranch" executed="True" success="True" time="0.313" asserts="65" />
                          <test-case name="NUnit.UiKit.Tests.TestSuiteTreeViewReloadTests.CanReloadAfterDeletingOneTestCase" executed="True" success="True" time="0.250" asserts="100" />
                          <test-case name="NUnit.UiKit.Tests.TestSuiteTreeViewReloadTests.CanReloadAfterDeletingThreeTestCases" executed="True" success="True" time="0.250" asserts="94" />
                          <test-case name="NUnit.UiKit.Tests.TestSuiteTreeViewReloadTests.CanReloadAfterInsertingTestCase" executed="True" success="True" time="0.234" asserts="106" />
                          <test-case name="NUnit.UiKit.Tests.TestSuiteTreeViewReloadTests.CanReloadAfterInsertingTestFixture" executed="True" success="True" time="0.266" asserts="107" />
                          <test-case name="NUnit.UiKit.Tests.TestSuiteTreeViewReloadTests.CanReloadAfterMultipleChanges" executed="True" success="True" time="0.234" asserts="104" />
                          <test-case name="NUnit.UiKit.Tests.TestSuiteTreeViewReloadTests.CanReloadAfterTurningOffAutoNamespaces" executed="True" success="True" time="0.453" asserts="84" />
                          <test-case name="NUnit.UiKit.Tests.TestSuiteTreeViewReloadTests.CanReloadWithoutChange" executed="True" success="True" time="0.281" asserts="102" />
                          <test-case name="NUnit.UiKit.Tests.TestSuiteTreeViewReloadTests.ReloadTreeWithWrongTest" executed="True" success="True" time="0.234" asserts="0" />
                          <test-case name="NUnit.UiKit.Tests.TestSuiteTreeViewReloadTests.VerifyCheckTreeWorks" executed="True" success="True" time="0.234" asserts="102" />
                        </results>
                      </test-suite>
                      <test-suite name="TestSuiteTreeViewTests" executed="True" success="True" time="1.250" asserts="0">
                        <results>
                          <test-case name="NUnit.UiKit.Tests.TestSuiteTreeViewTests.BuildFromResult" executed="True" success="True" time="0.266" asserts="15" />
                          <test-case name="NUnit.UiKit.Tests.TestSuiteTreeViewTests.BuildTreeView" executed="True" success="True" time="0.234" asserts="5" />
                          <test-case name="NUnit.UiKit.Tests.TestSuiteTreeViewTests.ClearTree" executed="True" success="True" time="0.234" asserts="1" />
                          <test-case name="NUnit.UiKit.Tests.TestSuiteTreeViewTests.ProcessChecks" executed="True" success="True" time="0.266" asserts="7" />
                          <test-case name="NUnit.UiKit.Tests.TestSuiteTreeViewTests.SetTestResult" executed="True" success="True" time="0.234" asserts="3" />
                        </results>
                      </test-suite>
                      <test-suite name="VisualStateTests" executed="True" success="True" time="1.531" asserts="0">
                        <results>
                          <test-case name="NUnit.UiKit.Tests.VisualStateTests.SaveAndRestoreVisualState" executed="True" success="True" time="1.516" asserts="5" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                </results>
              </test-suite>
            </results>
          </test-suite>
        </results>
      </test-suite>
      <test-suite name="C:\Program Files\NUnit 2.5.2\bin\net-2.0\tests/nunit-gui.tests.dll" executed="True" success="True" time="1.156" asserts="0">
        <results>
          <test-suite name="NUnit" executed="True" success="True" time="1.156" asserts="0">
            <results>
              <test-suite name="Gui" executed="True" success="True" time="1.156" asserts="0">
                <results>
                  <test-suite name="Tests" executed="True" success="True" time="1.156" asserts="0">
                    <results>
                      <test-suite name="CommandLineTests" executed="True" success="True" time="0.125" asserts="0">
                        <results>
                          <test-case name="NUnit.Gui.Tests.CommandLineTests.AssemblyName" executed="True" success="True" time="0.094" asserts="1" />
                          <test-case name="NUnit.Gui.Tests.CommandLineTests.Help" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Gui.Tests.CommandLineTests.HelpTextUsesCorrectDelimiterForPlatform" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Gui.Tests.CommandLineTests.InvalidArgs" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Gui.Tests.CommandLineTests.InvalidCommandLineParms" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Gui.Tests.CommandLineTests.NoNameValuePairs" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Gui.Tests.CommandLineTests.NoParametersCount" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Gui.Tests.CommandLineTests.ShortHelp" executed="True" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Gui.Tests.CommandLineTests.ValidateSuccessful" executed="True" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite name="ExceptionDetailsFormTests" executed="True" success="True" time="0.188" asserts="0">
                        <results>
                          <test-case name="NUnit.Gui.Tests.ExceptionDetailsFormTests.ControlsArePositionedCorrectly" executed="True" success="True" time="0.000" asserts="0" />
                          <test-case name="NUnit.Gui.Tests.ExceptionDetailsFormTests.ControlsExist" executed="True" success="True" time="0.000" asserts="0" />
                          <test-case name="NUnit.Gui.Tests.ExceptionDetailsFormTests.MessageDisplaysCorrectly" executed="True" success="True" time="0.078" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite name="ProjectEditorTests" executed="True" success="True" time="0.828" asserts="0">
                        <results>
                          <test-case name="NUnit.Gui.Tests.ProjectEditorTests.CheckControls" executed="True" success="True" time="0.547" asserts="0" />
                          <test-case name="NUnit.Gui.Tests.ProjectEditorTests.InitialFieldValues" executed="True" success="True" time="0.156" asserts="2" />
                          <test-case name="NUnit.Gui.Tests.ProjectEditorTests.SetProjectBase" executed="True" success="True" time="0.109" asserts="1" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                </results>
              </test-suite>
            </results>
          </test-suite>
        </results>
      </test-suite>
      <test-suite name="C:\Program Files\NUnit 2.5.2\bin\net-2.0\tests/nunit.fixtures.tests.dll" executed="True" success="True" time="1.375" asserts="0">
        <results>
          <test-suite name="NUnit" executed="True" success="True" time="1.359" asserts="0">
            <results>
              <test-suite name="Fixtures" executed="True" success="True" time="1.359" asserts="0">
                <results>
                  <test-suite name="Tests" executed="True" success="True" time="1.359" asserts="0">
                    <results>
                      <test-suite name="CompilationTests" executed="True" success="True" time="1.328" asserts="0">
                        <results>
                          <test-case name="NUnit.Fixtures.Tests.CompilationTests.CheckDefaultSettings" executed="True" success="True" time="0.141" asserts="5" />
                          <test-case name="NUnit.Fixtures.Tests.CompilationTests.CompileToFile" executed="True" success="True" time="0.484" asserts="3" />
                          <test-case name="NUnit.Fixtures.Tests.CompilationTests.CompilingBadCodeGivesAnError" executed="True" success="True" time="0.219" asserts="1" />
                          <test-case name="NUnit.Fixtures.Tests.CompilationTests.LoadTestsFromCompiledAssembly" executed="True" success="True" time="0.484" asserts="3" />
                        </results>
                      </test-suite>
                      <test-suite name="TestTreeTests" executed="True" success="True" time="0.016" asserts="0">
                        <results>
                          <test-case name="NUnit.Fixtures.Tests.TestTreeTests.MatchingTreesAreEqual" executed="True" success="True" time="0.000" asserts="3" />
                          <test-case name="NUnit.Fixtures.Tests.TestTreeTests.NonMatchingTreesAreNotEqual" executed="True" success="True" time="0.000" asserts="3" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                </results>
              </test-suite>
            </results>
          </test-suite>
        </results>
      </test-suite>
    </results>
  </test-suite>
</test-results>